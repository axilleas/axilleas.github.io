<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Over the line</title><link href="http://axilleas.github.io/" rel="alternate"></link><link href="http://axilleas.github.io/feeds/geek.atom.xml" rel="self"></link><id>http://axilleas.github.io/</id><updated>2013-06-25T00:00:00+03:00</updated><entry><title>GSoC - Weekly update 1</title><link href="http://axilleas.github.io/en/blog/2013/gsoc-weekly-update-1" rel="alternate"></link><updated>2013-06-25T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.github.io,2013-06-25:en/blog/2013/gsoc-weekly-update-1</id><summary type="html">&lt;p&gt;It's been over a week that GSoC started and here is a weekly report of what achieved
so far.&lt;/p&gt;
&lt;h2 id="weekly-process"&gt;Weekly process&lt;/h2&gt;
&lt;h3 id="workflow"&gt;Workflow&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://trello.com/board/gitlab/51b844202ed21a6735011b25"&gt;Trello board&lt;/a&gt; - This is a web app in which you can manage your workflow by adding
tasks that are to be completed. I set it up to remind me the things I have to accomplish
in due time. Cool thing is that there is an android app too, so I can manage it
from wherever I am :)&lt;/p&gt;
&lt;h3 id="first-package"&gt;First package&lt;/h3&gt;
&lt;p&gt;I submitted my first package to Bugzilla for review. Yay! It is called &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=969877"&gt;timers&lt;/a&gt;
and is of course a rubygem (what else :p). Not a big deal, just an easy one to get
me started.&lt;/p&gt;
&lt;h3 id="list-of-gems-to-package"&gt;List of gems to package&lt;/h3&gt;
&lt;p&gt;I re-calculated GitLab's gem dependencies, this time including only the ones
needed for runtime. I ditched from the list the ones that are used for testting/development.
Not that they are not useful, but because for the time being runtime dependencies
are a priority. I used a really ugly hack but it works for now. Here is how:
Clone &lt;a href="https://github.com/gitlabhq/gitlabhq"&gt;GitLab&lt;/a&gt;, cd into it and run:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;bundle &lt;span class="nb"&gt;exec &lt;/span&gt;install --deployment --without &lt;span class="nb"&gt;test &lt;/span&gt;development
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will install all deps included in the Gemfile except for the ones in test and 
development groups. Then, using a for loop we can iterate under the &lt;code&gt;vendor/bundle/ruby/1.9.1/gems&lt;/code&gt;
directory and write the results in a file.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;for &lt;/span&gt;i in &lt;span class="sb"&gt;`&lt;/span&gt;ls vendor/bundle/ruby/1.9.1/gems&lt;span class="sb"&gt;`&lt;/span&gt;; &lt;span class="k"&gt;do &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &amp;gt;&amp;gt; ../gitlab53-gems; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The list contains gems in the format of &lt;code&gt;gem_name-1.0.0&lt;/code&gt; so I had to clean that
up a little. I used some string methods in the &lt;a href="https://github.com/axilleas/fedora/blob/master/gitlab-deps/gemfile.py#L30"&gt;python script&lt;/a&gt; and stored those values
in a dictionary where key is the gem name and value its version. Then the names
list was easily retrievable. All I had to do is call the &lt;code&gt;keys()&lt;/code&gt; method on
the dictionary and store the result in a &lt;a href="https://github.com/axilleas/fedora/blob/master/gitlab-deps/rubygems_gitlab"&gt;file&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then, I had somehow to include in the list of already packaged gems, the ones that 
are submitted in bugzilla for review. No need to work on them if their specfile
is already submitted for review, right? For that I used the &lt;a href="https://fedorahosted.org/python-bugzilla/"&gt;python-bugzilla&lt;/a&gt;
tool that queries a Bugzilla instance and spits nice &lt;a href="https://github.com/axilleas/fedora/blob/master/gitlab-deps/rubygems_bugzilla_raw"&gt;formated results&lt;/a&gt;.
The query is pretty much self explanatory. In the end I just sorted them according
to their bug status.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;bugzilla query --product&lt;span class="o"&gt;=&lt;/span&gt;fedora --bug_status&lt;span class="o"&gt;=&lt;/span&gt;new,assigned --component&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Package Review&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
--short_desc&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rubygem-&amp;#39;&lt;/span&gt; | sort -k2 -r &amp;gt; &lt;span class="nv"&gt;$bugzilla_gems_raw&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Below, using the same query methods and some sed/awk magic&lt;sup id="fnref:json"&gt;&lt;a class="footnote-ref" href="#fn:json" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;, we end up with a file
containing only the names of gems that are submitted for review in Bugzilla.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;bugzilla query --product&lt;span class="o"&gt;=&lt;/span&gt;fedora --bug_status&lt;span class="o"&gt;=&lt;/span&gt;new,assigned --component&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Package Review&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
--short_desc&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rubygem-&amp;#39;&lt;/span&gt; | awk &lt;span class="s1"&gt;&amp;#39;BEGIN { FS = &amp;quot; - &amp;quot; }; { print $3 }&amp;#39;&lt;/span&gt; | awk &lt;span class="s1"&gt;&amp;#39;BEGIN { FS = &amp;quot;:&amp;quot; }; { print $2 }&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
| sed -e &lt;span class="s1"&gt;&amp;#39;s/rubygem-//&amp;#39;&lt;/span&gt; | sort -k1 &amp;gt; &lt;span class="nv"&gt;$bugzilla_gems&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That list, combined with the query from the official repos, results in the &lt;a href="https://github.com/axilleas/fedora/blob/master/gitlab-deps/rubygems_fedora"&gt;final&lt;/a&gt;
one which has all the Ruby gems already packaged or are to be packaged for Fedora.&lt;/p&gt;
&lt;p&gt;I also wrote a method to store those values in a &lt;a href="https://github.com/axilleas/fedora/blob/master/gitlab-deps/gemfile.py#L95"&gt;dictionary&lt;/a&gt; in the format
of &lt;code&gt;dict = { gem_name: [bug_id, status, assignee, description] }&lt;/code&gt;. It might come
in handy in the future, who knows!&lt;/p&gt;
&lt;p&gt;Next step was to find the missing gems that I will have to package for Fedora.
Comparing those two lists we end up with this &lt;a href="https://github.com/axilleas/fedora/blob/master/gitlab-deps/rubygems_missing"&gt;list&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And the new results are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Gitlab uses &lt;strong&gt;143&lt;/strong&gt; runtime gems.&lt;/p&gt;
&lt;p&gt;Fedora has packaged &lt;strong&gt;461&lt;/strong&gt; gems.&lt;/p&gt;
&lt;p&gt;There are &lt;strong&gt;73&lt;/strong&gt; common gems.&lt;/p&gt;
&lt;p&gt;There should be packaged &lt;strong&gt;70&lt;/strong&gt; gems.&lt;/p&gt;
&lt;p&gt;Fedora will have &lt;strong&gt;15.18 %&lt;/strong&gt; more ruby packages, that is &lt;strong&gt;534&lt;/strong&gt; gems in total.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="gem-tree-dependencies"&gt;Gem tree dependencies&lt;/h3&gt;
&lt;p&gt;There are a lot of gems that depend on each other which means one has to
be picky as to what to package first. The best way would be: given a package,
find its dependency tree and start packaging first the leafs that have no children
going all the way up until you reach to the root.&lt;/p&gt;
&lt;p&gt;I started writing a &lt;a href="https://github.com/axilleas/fedora/tree/master/gitlab-deps/gemtree"&gt;script&lt;/a&gt; in ruby as a way to better learn the language,
but I have yet to iplement the DFS algorithm which will traverse through all
dependencies. Any comments on how to best approach this are welcomed!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Update!!&lt;/em&gt;&lt;/strong&gt; I just found out this reaaally cool site: &lt;a href="https://gemlou.pe"&gt;https://gemlou.pe&lt;/a&gt;
which parses rubygems.org and lists the runtime tree dependencies of a gem through 
javascript!&lt;/p&gt;
&lt;h3 id="article-about-gem-packaging"&gt;Article about gem packaging&lt;/h3&gt;
&lt;p&gt;I started writing an article about packaging a Ruby gem in Fedora. I want to
note down the whole process, beginning from the use of gem2rpm to the review process.
At first I wanted to have it finished by this week, but the information is so vast
that I will take my time and write it piece by piece. You can follow the process &lt;a href="https://github.com/axilleas/axilleas.github.io/blob/source/src/posts/en/2013-06-12-fedora-rubygem-packaging.md"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="todo"&gt;TODO&lt;/h2&gt;
&lt;p&gt;Some TODOs for this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Continue writing the article about Rubygem packaging&lt;/li&gt;
&lt;li&gt;Make some unofficial package reviews in order to get &lt;a href="https://fedoraproject.org/wiki/Join_the_package_collection_maintainers#Get_Sponsored"&gt;sponsored&lt;/a&gt; as a packager&lt;/li&gt;
&lt;li&gt;Make more package submissions (I have some specfiles ready)&lt;/li&gt;
&lt;li&gt;Start wikifying the process (like the &lt;a href="https://fedoraproject.org/wiki/User:Ktdreyer/Gitorious"&gt;Gitorious&lt;/a&gt; page)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="extras"&gt;Extras&lt;/h2&gt;
&lt;p&gt;Apart from the GSoC program that is an awesome experience, there are some other
cool stuff going on this summer. &lt;/p&gt;
&lt;p&gt;First one is &lt;a href="http://euruko2013.org/"&gt;Euruko&lt;/a&gt; which will take place in
Athens, so it will be easy to attend. I have already purchased a ticket. I am sure
that it's gonna be awesome and I'll get to meet the GitLab devs as well :)&lt;/p&gt;
&lt;p&gt;The other one is a MOOC by UC Berkley and is a course about agile development and SaaS.
It has two parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.edx.org/course/uc-berkeley/cs-169-1x/software-service/993"&gt;CS169.1x&lt;/a&gt; starts on July 2nd and is lasting 5 weeks&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.edx.org/course/uc-berkeley/cs-169-2x/software-service/1005"&gt;CS169.2x&lt;/a&gt; starts on August 13th and is lasting 6 weeks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The language they use is Ruby and the framework on which they build the apps is
Rails. I am going to attend both courses as it is strictly related to GitLab and
my GSoC involvement. Actually, I already bought the accompanying &lt;a href="http://www.saasbook.info/"&gt;book&lt;/a&gt; (not mandatory)
and started reading it :)&lt;/p&gt;
&lt;p&gt;I will try to be more on schedule next time and post about my progress at the end
of each week.&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:json"&gt;
&lt;p&gt;It would make matters easier if the query returned a json file. I haven't
seen anything in the man page about json support.&amp;#160;&lt;a class="footnote-backref" href="#fnref:json" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="gsoc"></category><category term="fedora"></category></entry><entry><title>Connect to Transmission through an ssh encrypted session</title><link href="http://axilleas.github.io/en/blog/2013/connect-to-transmission-through-an-ssh-encrypted-session" rel="alternate"></link><updated>2013-06-11T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.github.io,2013-06-11:en/blog/2013/connect-to-transmission-through-an-ssh-encrypted-session</id><summary type="html">&lt;p&gt;Use case: You have a remote machine with high bandwidth and you want to turn it 
in a torrent server.&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#prerequisites"&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#transgui"&gt;Transgui&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="prerequisites"&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;All you have to install in the remote server, is &lt;code&gt;transmission-daemon&lt;/code&gt; which is 
pretty much included in every well known distribution. After it successfuly installs,
run &lt;code&gt;transmission-daemon&lt;/code&gt; as your user, no need for extra privileges. See the
man page for extra commands.&lt;/p&gt;
&lt;p&gt;In the client side you will need &lt;a href="https://code.google.com/p/transmisson-remote-gui/"&gt;Transmission Remote Gui&lt;/a&gt; (I will call it 
transgui from now on), a cool cross platform front-end to remotely control a 
Transmission Bit-Torrent client daemon via its RPC protocol. In Fedora you can 
install it from the official repos with:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;yum&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;transgui&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;whereas in Archlinux you can find it in &lt;a href="https://aur.archlinux.org/packages/?O=0&amp;amp;K=transmission-remote-gui"&gt;AUR&lt;/a&gt;. I suggest you go with the bin one
which is a precompiled binary so that you avoid the building time.&lt;/p&gt;
&lt;p&gt;Now, there is this little bash script which makes an ssh connection to you server,
in order to link transgui with transmission-daemon:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;RPORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;9091
&lt;span class="nv"&gt;LPORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;9092

ssh -C -c blowfish -f remotevm -L &lt;span class="nv"&gt;$LPORT&lt;/span&gt;:localhost:&lt;span class="nv"&gt;$RPORT&lt;/span&gt; -N

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;;
  &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Connection established&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Connection failed&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's cut it down to pieces. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-C&lt;/code&gt; is optional and it will compress all the data of the session. As the man page
dictates, use it only on slow connections (client side).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-c blowfish&lt;/code&gt; selects the cipher specification for encrypting the session, in 
  this case &lt;a href="https://en.wikipedia.org/wiki/Blowfish_%28cipher%29"&gt;blowfish&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-f&lt;/code&gt; requests ssh to go to the background.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;remotevm&lt;/code&gt; is just an alias of the remote server I have at my &lt;code&gt;~/.ssh/config&lt;/code&gt; 
  in which I use an ssh key to connect to, without using a password.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-L $LPORT:localhost:$RPORT&lt;/code&gt; specifies that the given port on the local (client) 
  host  is  to be  forwarded  to  the  given  host on the remote side.
  Here I use &lt;code&gt;RPORT&lt;/code&gt; for the remote side and &lt;code&gt;LPORT&lt;/code&gt; for the local one. Note that
  9091 is used by default from transmission as its bind port. All this is traversed 
  through localhost, no external IPs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-N&lt;/code&gt; makes sure there isn't executed a remote command. This is useful for just 
  forwarding ports.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="transgui"&gt;Transgui&lt;/h2&gt;
&lt;p&gt;After you run the above script and see the &lt;em&gt;Connection established&lt;/em&gt; message, it's
time to open transgui and connect to the remote server. Make a new connection as
it appears in the image below. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Connect to transgui" src="http://axilleas.github.io/static/images/transgui_connection.png" /&gt;&lt;/p&gt;
&lt;p&gt;Default username:password is &lt;code&gt;transmission&lt;/code&gt;. If you want to change it, either 
pass it as a parameter when running &lt;code&gt;transmission-daemon&lt;/code&gt; (see man page) or edit 
&lt;code&gt;$HOME/.config/transmission-daemon/settings.json&lt;/code&gt; with the daemon stopped.&lt;/p&gt;
&lt;p&gt;Some more screens:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Download dialog" src="http://axilleas.github.io/static/images/down_dialog.png" /&gt;
&lt;em&gt;The dialog that appears when you open a torrent file&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Downloading Fedora" src="http://axilleas.github.io/static/images/fedora_torrent.png" /&gt;
&lt;em&gt;Main download page&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now all that remains is to retrieve the downloaded data. There are numerous ways 
to do so, like using &lt;code&gt;scp&lt;/code&gt;, &lt;code&gt;rync&lt;/code&gt;, &lt;code&gt;ftp&lt;/code&gt;, &lt;code&gt;sftp&lt;/code&gt;, &lt;code&gt;sshfs&lt;/code&gt; etc, each serving its 
own purpose.&lt;/p&gt;</summary><category term="transmission"></category><category term="ssh"></category><category term="torrent"></category></entry><entry><title>Accepted for GSoC 2013</title><link href="http://axilleas.github.io/en/blog/2013/accepted-for-gsoc-2013" rel="alternate"></link><updated>2013-05-27T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.github.io,2013-05-27:en/blog/2013/accepted-for-gsoc-2013</id><summary type="html">&lt;p&gt;&lt;img alt="gsoc-logo" src="https://1-ps.googleusercontent.com/sx/s.google-melange.appspot.com/www.google-melange.com/soc/content/2-1-20130521/images/gsoc/logo/924x156xbanner-gsoc2013.png.pagespeed.ic.Z9V_lgyiqp.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Sooo, I am happy to announce that I got accepted to this year's Google Summer of Code!
Couldn't be more happy right now :)&lt;/p&gt;
&lt;p&gt;For those that have no idea, here is my &lt;a href="https://fedoraproject.org/wiki/GSOC_2013/Student_Application_Axilleas/Gitlab%28463%29"&gt;proposal&lt;/a&gt; on Fedora's wiki (&lt;a href="https://fedoraproject.org/wiki/User:Axilleas"&gt;my user&lt;/a&gt;). 
I have in mind to make a follow post on how I dealt with all this the past three months.&lt;/p&gt;
&lt;p&gt;Special thanks to &lt;a href="https://github.com/johngian"&gt;John Giannelos&lt;/a&gt; for pressuring me to apply :p&lt;/p&gt;</summary><category term="gsoc"></category><category term="fedora"></category><category term="gitlab"></category><category term="superexcited"></category></entry><entry><title>Codeschool offers 2-day hall pass to all courses</title><link href="http://axilleas.github.io/en/blog/2013/codeschool-two-day-hall-pass" rel="alternate"></link><updated>2013-05-13T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.github.io,2013-05-13:en/blog/2013/codeschool-two-day-hall-pass</id><summary type="html">&lt;p&gt;&lt;img alt="codeschool-logo" src="https://d1tijy5l7mg5kk.cloudfront.net/assets/press_kit/logo-full-text-842f207391207c249d46b10fb166a8cb.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www.codeschool.com/"&gt;Code School&lt;/a&gt; is an online learning platform that teaches a variety of
programming and web design skills. Courses range from beginner to advanced
levels and you get to earn rewards and badges as you learn.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Courses cover a variety of technologies including among others &lt;code&gt;Git&lt;/code&gt;, &lt;code&gt;Ruby&lt;/code&gt;, 
&lt;code&gt;Backbone.js&lt;/code&gt;, &lt;code&gt;Sass&lt;/code&gt;, &lt;code&gt;Rails&lt;/code&gt;, &lt;code&gt;jQuery&lt;/code&gt;. Each course has a unique environment 
and some their own theme song, which is kinda cool. Here is the &lt;a href="http://www.codeschool.com/jingles"&gt;special page&lt;/a&gt; where 
you can find all these songs. &lt;/p&gt;
&lt;p&gt;Normally, there is a monthly &lt;a href="http://www.codeschool.com/enroll"&gt;subscription&lt;/a&gt; that costs only 25$ and 
grants you access to all courses and screencasts, with download links for the 
videos and the presentations.&lt;/p&gt;
&lt;p&gt;The current offer covers a 2 day free pass for all courses and screencasts. &lt;a href="http://go.codeschool.com/3UBpUQ"&gt;Here&lt;/a&gt; 
is my affiliate link&lt;sup id="fnref:afflink"&gt;&lt;a class="footnote-ref" href="#fn:afflink" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; to get you started (shameless promo :p). 
For each person that signs up, you get two more free days until you reach a 
limit of 30. During this weekend I finished the &lt;a href="http://www.codeschool.com/courses/ruby-bits"&gt;Ruby Bits&lt;/a&gt; and &lt;a href="http://www.codeschool.com/courses/git-real"&gt;Git Real&lt;/a&gt;
courses and I have to admit I learned a lot. My next goal is the famous &lt;a href="http://www.codeschool.com/courses/rails-for-zombies-redux"&gt;Rails for Zombies&lt;/a&gt; 
which I am looking forward to complete!&lt;/p&gt;
&lt;p&gt;So, what are you waiting for? &lt;a href="http://go.codeschool.com/3UBpUQ"&gt;Go&lt;/a&gt; and learn some realy cool stuff!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:afflink"&gt;
&lt;p&gt;I got an email from codeschool about this offer and there doesn't seem to be a clear url to reach it. That's why I am posting the affiliate url.&amp;#160;&lt;a class="footnote-backref" href="#fnref:afflink" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="codeschool"></category><category term="ruby"></category><category term="courses"></category><category term="javascript"></category><category term="html"></category><category term="css"></category></entry><entry><title>Nominated for Space Apps Challenge 2013</title><link href="http://axilleas.github.io/en/blog/2013/nasa-spaceappschallenge-2013" rel="alternate"></link><updated>2013-05-02T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.github.io,2013-05-02:en/blog/2013/nasa-spaceappschallenge-2013</id><summary type="html">&lt;p&gt;&lt;strong&gt;&lt;em&gt;Update&lt;/em&gt;&lt;/strong&gt;: The Popeye on Mars project came &lt;a href="http://www.nasa.gov/home/hqnews/2013/may/HQ_13-152_Space_App_Challenge_winners.html"&gt;first&lt;/a&gt; in "Best Mission Concept" 
category. Congrats guys!&lt;/p&gt;
&lt;p&gt;During the weekend of 20th and 21st of April we gathered at &lt;a href="https://hackerspace.gr"&gt;hackerpace.gr&lt;/a&gt;
and started hacking for NASA's space apps challenge. From their &lt;a href="http://spaceappschallenge.org/about/"&gt;webpage&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The International Space Apps Challenge is an international mass collaboration 
focused on space exploration that takes place over 48-hours in cities around 
the world. The event embraces collaborative problem solving with a goal of 
producing relevant open-source solutions to address global needs applicable to
both life on Earth and life in space. NASA is leading this global collaboration 
along with a number of additional government collaborators and 100+ local 
partner organizations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;16 people, 2 teams, 2 days, 2 globally nominated projects:
&lt;code&gt;popeye on mars&lt;/code&gt; and &lt;code&gt;anapNEO&lt;/code&gt;. See &lt;a href="https://plus.google.com/u/0/photos/117312389370621956919/albums/5868971703249663889" title="Space App Challenge 2013 at hackerspace.gr"&gt;here&lt;/a&gt; some photos. 
Thank you &lt;a href="https://mozilla.org"&gt;mozilla&lt;/a&gt; for all the pizzas and souvlakia :)&lt;/p&gt;
&lt;h1 id="popeye-on-mars"&gt;Popeye on Mars&lt;/h1&gt;
&lt;p&gt;Our solution is a deployable, reusable spinach greenhouse for Mars.
Internally, a fully equipped aeroponic system operates for ~45 days,
having all the needed resources, sensors and electronic systems to
stabilize the internal environment and help the spinach growth. Also,
there are systems for harvesting produced oxygen during the process
and the plants at the end of it. Externally, photovoltaic panels
provide power, while several cover layers protect the system against
Mars extreme conditions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://spaceappschallenge.org/project/pom"&gt;Project page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=kBl5lzwcYlQ"&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="anapneo"&gt;anapNEO&lt;/h1&gt;
&lt;p&gt;anapNEO is a web app build on Django and HTML, CSS, JS that enables
the submission and ranking of NEO findings. Focused on UX simplicity
and streamlining of the registration and submission process, a user
signs up easily using Persona, and creates a user account (with basic
information). She then lands on a (public too!) Dashboard that
displays all latest submissions and can submit a new finding. You can
also vote on findings affecting the score and (yet to implement)
expose those on an API.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://spaceappschallenge.org/project/anapneo"&gt;Project page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=u5eSPSy4ix8"&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="nasa"></category><category term="hsgr"></category><category term="django"></category><category term="spinach"></category><category term="popeye"></category></entry><entry><title>Bringing GitLab to Fedora</title><link href="http://axilleas.github.io/en/blog/2013/bringing-gitlab-in-fedora" rel="alternate"></link><updated>2013-04-07T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.github.io,2013-04-07:en/blog/2013/bringing-gitlab-in-fedora</id><summary type="html">&lt;p&gt;&lt;strong&gt;&lt;em&gt;Update&lt;/em&gt;&lt;/strong&gt;: I just got a confirmation mail that my proposal got accepted! &lt;a href="http://axilleas.github.io/en/blog/2013/accepted-for-gsoc-2013"&gt;Read here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, I decided to write some info regarding my involvement for this year's
&lt;a href="http://www.google-melange.com/gsoc/homepage/google/gsoc2013" title="Google Summer of Code 2013"&gt;Google Summer of Code&lt;/a&gt;. I have been using/testing GitLab since
version 2.0 (almost a year now) and I am thrilled to see how much it has
growed since. This year I got a little more involved into this and
I made &lt;a href="https://github.com/gitlabhq/gitlabhq/commits/master/doc/install/installation.md?author=axilleas"&gt;two&lt;/a&gt; &lt;a href="https://github.com/gitlabhq/gitlabhq/commits/master/lib/tasks/gitlab/check.rake?author=axilleas"&gt;commits&lt;/a&gt; upstream. Nothing fancy, but I hope to
contribute more as time passes by.&lt;/p&gt;
&lt;p&gt;In the rest of this article I will try to explain what GitLab is,
how Fedora is involved into all this and what are the benefits of this involvement.
This is the first of many follow-up posts I intend to write, so keep tight!&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-gitlab"&gt;What is GitLab?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fedoras-involvement-so-far"&gt;Fedora's involvement so far&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-are-the-benefits"&gt;What are the benefits&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#get-more-ruby-packages-in-the-repos"&gt;Get more ruby packages in the repos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-new-service-for-fedorahostedorg"&gt;A new service for fedorahosted.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#next-steps-and-things-to-overcome"&gt;Next steps and things to overcome&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="what-is-gitlab"&gt;What is GitLab?&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://blog.gitlab.com" title="GitLab home page"&gt;GitLab&lt;/a&gt; is an &lt;a href="https://github.com/gitlabhq/gitlabhq" title="GitLab on Github :p"&gt;open source&lt;/a&gt; MIT licenced &lt;a href="http://git-scm.com" title="git home page"&gt;git&lt;/a&gt; repository
management application. It is built on &lt;a href="http://rubyonrails.org/" title="Ruby on Rails"&gt;Ruby on Rails&lt;/a&gt; and is
one of the most &lt;a href="https://github.com/popular/starred" title="GitLab featured in Github's most popular repos"&gt;popular&lt;/a&gt; projects featured on Github.
It is used by many companies as their internal git management repository.
The reason it gained so much popularity is that it bares a strong resemblance
to github's &lt;a href="http://gitlab.org/screenshots/" title="GitLab screenshots"&gt;looks&lt;/a&gt; and &lt;a href="http://blog.gitlab.com/features/" title="GitLab features"&gt;feels&lt;/a&gt;.
It is a project with great potential, under heavy development with a release
cycle every month. That makes it possible to apply bug fixes quite regularly
and test new features. And since a picture is worth a thousand words, here is
a &lt;a href="http://demo.gitlab.com/users/sign_in" title="GitLab demo site"&gt;demo site&lt;/a&gt; where you can test all the latest features.&lt;/p&gt;
&lt;h1 id="fedoras-involvement-so-far"&gt;Fedora's involvement so far&lt;/h1&gt;
&lt;p&gt;The thought of GitLab being packaged and deployed for &lt;a href="http://fedorahosted.org"&gt;Fedora Hosted&lt;/a&gt; isn't new.
It all started last March when &lt;a href="https://fedoraproject.org/wiki/User:Mojavelinux"&gt;Dan Allen&lt;/a&gt; &lt;a href="https://lists.fedoraproject.org/pipermail/infrastructure/2012-March/011463.html"&gt;proposed&lt;/a&gt; GitLab 
to be used as a service for Fedora Hosted. If you follow the conversation 
it summarizes to some key points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Projects pages should be ideally hosted as &lt;code&gt;$projectname.fedorahosted.org&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;GitLab and its dependencies should be packaged for Fedora and EPEL 6.&lt;/li&gt;
&lt;li&gt;Puppetize the whole thing up. &lt;a href="https://forge.puppetlabs.com/sbadia/gitlab"&gt;There&lt;/a&gt; are &lt;a href="https://forge.puppetlabs.com/lboynton/gitlab"&gt;some&lt;/a&gt; configs, but they'll sure need some adjustment.&lt;/li&gt;
&lt;li&gt;We need to form a team of maintainers for longterm support even after GSoC is over.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There was even a &lt;a href="https://groups.google.com/forum/?fromgroups=#!topic/gitlabhq/SQMDi-yyXmU"&gt;post&lt;/a&gt; in GitLab's list, also by Dan Allen,
bringing the project to the attention of the GitLab community.
The most interesting thing was that the &lt;a href="https://github.com/randx"&gt;lead developer&lt;/a&gt; of GitLab 
was more than willing to help. In the end, there was an &lt;a href="https://fedoraproject.org/wiki/GSOC_2012/Student_Application_babakb/GitlabSetup" title="Student application for GitLab at GSoC 2012"&gt;application&lt;/a&gt; but 
unfortunately that was the last anyone heard about the project.&lt;/p&gt;
&lt;p&gt;So, here we are a year after with me applying for the project. To be exact
there is &lt;a href="https://lists.fedoraproject.org/pipermail/summer-coding/2013-March/000286.html"&gt;another&lt;/a&gt; sudent interested in this as well, so that makes it two of us.
I have already expressed my interest in &lt;a href="https://lists.fedoraproject.org/pipermail/ruby-sig/2013-March/001270.html"&gt;RubySIG&lt;/a&gt; and in the &lt;a href="https://lists.fedoraproject.org/pipermail/infrastructure/2013-March/012631.html"&gt;infrastructure&lt;/a&gt; mailing list.
I was glad to see that there was a positive response from Dan Allen,
as well as some valuable advice from user &lt;a href="https://fedoraproject.org/wiki/User:Ktdreyer"&gt;Ken Dreyer&lt;/a&gt; who currently 
tries to deal with &lt;a href="https://fedoraproject.org/wiki/User:Ktdreyer/Gitorious"&gt;Gitorious&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="what-are-the-benefits"&gt;What are the benefits&lt;/h1&gt;
&lt;p&gt;There are two major benefits for Fedora.&lt;/p&gt;
&lt;h2 id="get-more-ruby-packages-in-the-repos"&gt;Get more ruby packages in the repos&lt;/h2&gt;
&lt;p&gt;Prior to addressing my interest in the mailing lists, I approached &lt;a href="https://fedoraproject.org/wiki/User:Vondruch"&gt;Vít Ondruch&lt;/a&gt; to get some feedback about this task.
He was very helpful and pointed me to what should be done as a first step.
That is&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;identify which gems are missing in Fedora and package them,&lt;/li&gt;
&lt;li&gt;compile a list of gems GitLab is using, including all their dependencies (and possibly bundled dependencies).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For the first task, I used a hackish bash script which first accumulates 
all rubygems in a file and then removes the duplicate packages and the ones
that are documentation.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;file_raw&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/axil/tools/fedora-gitlab/rubygems_fedora_raw&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;file_new&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/axil/tools/fedora-gitlab/rubygems_fedora&amp;#39;&lt;/span&gt;

yum search all rubygem | awk &lt;span class="s1"&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt; &amp;gt; &lt;span class="nv"&gt;$file_raw&lt;/span&gt;

sed -e &lt;span class="s1"&gt;&amp;#39;s/rubygem-//g&amp;#39;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;s/.noarch//g&amp;#39;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;s/.x86_64//g&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
-e &lt;span class="s1"&gt;&amp;#39;/i686/d&amp;#39;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;/==/d&amp;#39;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;/:/d&amp;#39;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;/-doc/d&amp;#39;&lt;/span&gt; &amp;lt; &lt;span class="nv"&gt;$file_raw&lt;/span&gt; &amp;gt; &lt;span class="nv"&gt;$file_new&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In order to find what gems GitLab depends on, I used the &lt;a href="https://github.com/gitlabhq/gitlabhq/blob/master/Gemfile.lock"&gt;Gemfile.lock&lt;/a&gt; 
and wrote a simple python &lt;a href="https://github.com/axilleas/fedora-gitlab/blob/master/gemfile.py"&gt;script&lt;/a&gt;&lt;sup id="fnref:python-script"&gt;&lt;a class="footnote-ref" href="#fn:python-script" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; that computes how many and which gems 
Fedora and GitLab have in common. Below are some draft&lt;sup id="fnref:draft_numbers"&gt;&lt;a class="footnote-ref" href="#fn:draft_numbers" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; numbers and a bar chart.&lt;/p&gt;
&lt;div id="rubygems_chart"&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Gitlab uses: &lt;strong&gt;203&lt;/strong&gt; gems.&lt;/p&gt;
&lt;p&gt;Fedora has packaged: &lt;strong&gt;385&lt;/strong&gt; gems.&lt;/p&gt;
&lt;p&gt;There are &lt;strong&gt;97&lt;/strong&gt; common gems.&lt;/p&gt;
&lt;p&gt;There should be packaged: &lt;strong&gt;106&lt;/strong&gt; gems.&lt;/p&gt;
&lt;p&gt;Fedora will have &lt;strong&gt;27.53 %&lt;/strong&gt; more ruby packages, that is &lt;strong&gt;482&lt;/strong&gt; gems in total.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Not bad, &lt;strong&gt;106&lt;/strong&gt; more ruby packages! That is a plus now that Fedora is considered 
one of &lt;a href="https://bugs.ruby-lang.org/projects/ruby-trunk/wiki/20SupportedPlatforms"&gt;Ruby's supported platforms&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; I just found out about the &lt;a href="http://isitfedoraruby.com/stats/gemfile_tool"&gt;gemfile tool&lt;/a&gt; that isitfedoraruby.com&lt;sup id="fnref:isitfedruby"&gt;&lt;a class="footnote-ref" href="#fn:isitfedruby" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;
is using. This will come in handy. &lt;/p&gt;
&lt;h2 id="a-new-service-for-fedorahostedorg"&gt;A new service for fedorahosted.org&lt;/h2&gt;
&lt;p&gt;After the packaging is done, the next big thing is the deployment process on 
&lt;a href="http://fedorahosted.org"&gt;Fedora Hosted&lt;/a&gt; as a new service. Quoting Dan Allen's &lt;a href="https://lists.fedoraproject.org/pipermail/infrastructure/2013-March/012680.html"&gt;thought&lt;/a&gt;: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One of the key reasons I've been pushing for GitLab is because I see the
potential it has for drastically improving the discoverability of the
Fedora code base and encourage participation. I've been involved with a lot
of projects on GitHub and I'm amazed by how simple it is to submit changes
(to both code and documentation). In fact, it's often easier to send a
patch with a description of the change than to create an issue...flipping
the normal bug submitting process on its head.&lt;/p&gt;
&lt;p&gt;GitHub also works because it enables collaboration over coordination. You
don't have to ask for permission on GitHub. You just do it. Then you can
easily track when they get pulled in or changes are requested. (the same is
true of GitLab).&lt;/p&gt;
&lt;p&gt;With GitLab, we can bring that experience to the Fedora community. It's a
large enough community (esp in terms of repositories), that I'm positive
we'd see that collaboration kindle within the Fedora instance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So yeah, this is a big deal from this point of view :)&lt;/p&gt;
&lt;h1 id="next-steps-and-things-to-overcome"&gt;Next steps and things to overcome&lt;/h1&gt;
&lt;p&gt;There is certainly a lot more to do. For starters, as a Fedora newbie, 
I have to run through the &lt;a href="https://fedoraproject.org/wiki/Packaging:Ruby"&gt;Ruby guidelines&lt;/a&gt; and learn 
about the philosophy of rpm. Luckily, I am not a linux newbie (I've been 
using Archlinux for 5 years) and I am adopting rapidly.
Then, I need to learn some Ruby. I have already printed &lt;em&gt;&lt;a href="http://mislav.uniqpath.com/poignant-guide"&gt;why's (poignant) Guide to Ruby&lt;/a&gt;&lt;/em&gt;
which is considered a must read, and believe me it is! (download the pdf from &lt;a href="https://github.com/downloads/mislav/poignant-guide/whys-poignant-guide-to-ruby.pdf"&gt;here&lt;/a&gt;). 
&lt;a href="http://ruby.learncodethehardway.org/book/"&gt;Learn Ruby the hard way&lt;/a&gt; is also a good starting point. Ι think I'm on the right track.&lt;/p&gt;
&lt;p&gt;Now, as far as the packaging process is concerned, here is what more needs to be done:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MariaDB support. Since MariaDB will be the &lt;a href="https://lists.fedoraproject.org/pipermail/devel/2013-January/176584.html" title="Proposed F19 Feature: Replace MySQL with MariaDB"&gt;default&lt;/a&gt; &lt;a href="https://fedoraproject.org/wiki/Features/ReplaceMySQLwithMariaDB" title="Features/ReplaceMySQLwithMariaDB"&gt;implementation&lt;/a&gt; of MySQL in Fedora 19, GitLab will need to support it.&lt;/li&gt;
&lt;li&gt;Write systemd service files. I had made an &lt;a href="https://github.com/axilleas/gitlab-recipes/tree/master/systemd"&gt;attempt&lt;/a&gt; two months ago when I was trying to set up GitLab on Archlinux, but it is far from perfect.&lt;/li&gt;
&lt;li&gt;Packages to be EPEL compatible. A great advantage if GitLab gets packaged for Fedora, is that it would make it as easy as pie to install on a server running Red Hat, Centos, or some other rpm based distro.&lt;/li&gt;
&lt;li&gt;Ruby 2.0 compatibility. I don't think that'll be much of a stopper since GitLab is in the &lt;a href="https://github.com/gitlabhq/gitlabhq/commit/52cd655f71c6a5393b71640c13cd95e35e8d2624"&gt;process&lt;/a&gt; of supporting it, but I put it here just in case.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's all for now. If you read through here you should have a good understanding
of this project's goal. More posts to come!&lt;/p&gt;
&lt;!--Load the AJAX API--&gt;

&lt;script type="text/javascript" src="https://www.google.com/jsapi"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;

  // Load the Visualization API and the piechart package.
  google.load('visualization', '1.0', {'packages':['corechart']});

  // Set a callback to run when the Google Visualization API is loaded.
  google.setOnLoadCallback(drawChart);

  // Callback that creates and populates a data table,  
  // instantiates the pie chart, passes in the data and
  // draws it.
  function drawChart() {

  // Create the data table.
  var data = new google.visualization.DataTable();
  data.addColumn('string', '');
  data.addColumn('number', 'rubygems');
  data.addRows([
    ['GitLab', 203],
    ['Fedora', 385],
    ['Common', 97],
    ['To be packaged', 106],
    ['Total after packaging', 482]
    ]);

  // Set chart options
  var options = {'title':'Numbers calculated on 08-04-2013', 'width':600, 'height':500};

  // Instantiate and draw our chart, passing in some options.
  var chart = new google.visualization.BarChart(document.getElementById('rubygems_chart'));
  chart.draw(data, options);
  }
&lt;/script&gt;

&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:python-script"&gt;
&lt;p&gt;I should write it in ruby, I know :p&amp;#160;&lt;a class="footnote-backref" href="#fnref:python-script" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:draft_numbers"&gt;
&lt;p&gt;I say draft, mainly because that is a raw calculation of GitLab's dependencies. One has to take into account the different/old versions that may exist between Fedora and GtiLab. There are also some packages GitLab pulls from git and not rubygems.org. &amp;#160;&lt;a class="footnote-backref" href="#fnref:draft_numbers" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:isitfedruby"&gt;
&lt;p&gt;&lt;a href="http://isitfedoraruby.com"&gt;isitfedoraruby.com&lt;/a&gt; is a cool web app that was the result of &lt;a href="https://fedoraproject.org/wiki/GSOC_2012/Student_Application_Zuhao/IsItFedoraRuby"&gt;last year's GSoC&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:isitfedruby" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="fedora"></category><category term="gitlab"></category><category term="gscoc"></category><category term="ruby"></category><category term="rails"></category></entry></feed>