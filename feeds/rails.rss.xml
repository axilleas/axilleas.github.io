<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Over the line</title><link>http://axilleas.me/</link><description></description><atom:link href="http://axilleas.me/feeds/rails.rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 09 Jun 2014 00:00:00 +0300</lastBuildDate><item><title>GSoC-2014 isitfedoraruby - Week 3</title><link>http://axilleas.me/en/blog/2014/gsoc2014-week-three</link><description>&lt;p&gt;Testing, testing, testing.
Diving into BDD for the first time can be a little tedious but you sure learn
a lot. In the ruby/rails world there is a ton of excellent tools to help you
test your app. Some more popular than the others. I'm no exception so I
picked what the majority of the community dictated.&lt;/p&gt;
&lt;h1 id="testing-tools"&gt;Testing tools&lt;/h1&gt;
&lt;h2 id="rspec"&gt;Rspec&lt;/h2&gt;
&lt;p&gt;The Rspec test suite is well established among ruby developers and has a big
community to support it. You can also find many good books about it. One that
I highly recommend is &lt;a href="https://leanpub.com/everydayrailsrspec" title="Everyday Rails Testing with RSpec"&gt;Everyday Rails Testing with RSpec&lt;/a&gt;. It
basically includes all the tools I'll be using, I'm a little biased I admit it
but it is really worth it.&lt;/p&gt;
&lt;p&gt;Here are the specs that will be populated with tests over time.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;bug_spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rb&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;build_spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rb&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;dependency_spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rb&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;fedora_rpm_spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rb&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;rpm_version_spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rb&lt;/span&gt;
&lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;ruby_gem_spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rb&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Currently, I have worked only on &lt;code&gt;bug_spec.rb&lt;/code&gt; which is finished for the time
being.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# app/spec/models/bug_spec.rb&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# == Schema Information&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Table name: bugs&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;#  id            :integer          not null, primary key&lt;/span&gt;
&lt;span class="c1"&gt;#  name          :string(255)&lt;/span&gt;
&lt;span class="c1"&gt;#  bz_id         :string(255)&lt;/span&gt;
&lt;span class="c1"&gt;#  fedora_rpm_id :integer&lt;/span&gt;
&lt;span class="c1"&gt;#  is_review     :boolean&lt;/span&gt;
&lt;span class="c1"&gt;#  created_at    :datetime&lt;/span&gt;
&lt;span class="c1"&gt;#  updated_at    :datetime&lt;/span&gt;
&lt;span class="c1"&gt;#  last_updated  :string(255)&lt;/span&gt;
&lt;span class="c1"&gt;#  is_open       :boolean&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rails_helper&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;Bug&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;has valid factory&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:bug&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_valid&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:all&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="vi"&gt;@bug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:bug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@bugzilla_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://bugzilla.redhat.com/show_bug.cgi?id=&amp;#39;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;has valid bugzilla url&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@bug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;Regexp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@bugzilla_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;\d+/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;is a Review Request&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@bug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_review&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;is open&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@bug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_open&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;is closed&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="vi"&gt;@bug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_open&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@bug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_open&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here I'm using the new rspec method &lt;code&gt;expect(object).to&lt;/code&gt; instead of the old one
&lt;code&gt;object.should&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;In the validation of the bugzilla url I wanted to test against a regular
expression that would return the bug url and bug number. At first I used
&lt;code&gt;/#{@bugzilla_url}\d+/&lt;/code&gt; but that was interpreted into
&lt;code&gt;/https:\/\/bugzilla.redhat.com\/show_bug.cgi?id=\d+/&lt;/code&gt;. So, the slashes where
treated as regexp wildcards. The trick I &lt;a href="http://stackoverflow.com/a/150598/2137281" title="Interpolating a string into a regex"&gt;learned&lt;/a&gt; is to enclose
the string into &lt;code&gt;Regexp.quote(str)&lt;/code&gt;. This method escapes any characters that
would otherwise have special meaning&lt;sup id="fnref:ruby-doc"&gt;&lt;a class="footnote-ref" href="#fn:ruby-doc" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h2 id="factorygirl"&gt;FactoryGirl&lt;/h2&gt;
&lt;p&gt;FactoryGirl is a replacement for fixtures, Rails' default way of creating test
data. In my first attempt I used it to create a Bug object.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# app/spec/factories/bugs.rb&lt;/span&gt;

&lt;span class="no"&gt;FactoryGirl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;factory&lt;/span&gt; &lt;span class="ss"&gt;:bug&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bz_id&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;12345&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_review&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_open&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt; 
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, when I call &lt;code&gt;create(:bug)&lt;/code&gt; in my &lt;code&gt;bug_spec.rb&lt;/code&gt; it automatically creates
a new Bug object in the database with the predefined attributes I gave it
in the factory file. I could probably use &lt;code&gt;build(:bug)&lt;/code&gt; instead of &lt;code&gt;create&lt;/code&gt;
and that would simply create the object but not save it in the database.
This could get a lot better since it takes 2.2 seconds to just run 5 tests.
Refactoring will come later, I'll primarily focus on making enough tests to
cover as many edge cases as I can find.&lt;/p&gt;
&lt;h2 id="cucumbercapybara"&gt;Cucumber/capybara&lt;/h2&gt;
&lt;p&gt;So far I talked about unit testing. When it comes to integration testing,
that is how the application as a whole behaves, there is &lt;code&gt;cucumber&lt;/code&gt; and &lt;code&gt;capybara&lt;/code&gt;.
I haven't actually used any of these two yet. Cucumber is known for its
descriptive language and better used when one works with a non-programmer
product owner that doesn't want to look at a lot of code&lt;sup id="fnref:quote"&gt;&lt;a class="footnote-ref" href="#fn:quote" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;. I'll probably
just go with capybara.&lt;/p&gt;
&lt;h1 id="setting-a-rails-development-environment"&gt;Setting a Rails development environment&lt;/h1&gt;
&lt;p&gt;I spent quite a lot of time to find the proper gems and configuration to
have a nice setup. This will do for an article of its own so I won't go into
details.&lt;/p&gt;
&lt;h1 id="todos"&gt;TODOs&lt;/h1&gt;
&lt;p&gt;Except for preparing the test suite, I'm also into cleaning the code where
possible and necessary. There are some functions that need removing, but I
have to do it carefully, don't want to break anything and without tests I
cannot be 100% sure. So far I have used the &lt;a href="https://github.com/bbatsov/rubocop" title="A Ruby static code analyzer, based on the community Ruby style guide"&gt;rubocop&lt;/a&gt; gem with some
interesting findings (exactly 666 warnings/errors). I will talk about it next week.
Now go and watch the &lt;a href="https://www.youtube.com/watch?v=CamAhPeYoC8" title="Six six six"&gt;Number of the beast&lt;/a&gt;.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:ruby-doc"&gt;
&lt;p&gt;&lt;a href="http://ruby-doc.org/core-2.1.2/Regexp.html#method-c-quote"&gt;http://ruby-doc.org/core-2.1.2/Regexp.html#method-c-quote&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:ruby-doc" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:quote"&gt;
&lt;p&gt;Quote taken from Everyday Rails Testing with RSpec&amp;#160;&lt;a class="footnote-backref" href="#fnref:quote" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">axil</dc:creator><pubDate>Mon, 09 Jun 2014 00:00:00 +0300</pubDate><guid>tag:axilleas.me,2014-06-09:en/blog/2014/gsoc2014-week-three</guid><category>fedora</category><category>isitfedoraruby</category><category>gsoc</category><category>ruby</category><category>rails</category><category>webdev</category></item><item><title>GSoC-2014 isitfedoraruby - Week 2</title><link>http://axilleas.me/en/blog/2014/gsoc2014-week-two</link><description>&lt;p&gt;Here's what I've been doing last week.&lt;/p&gt;
&lt;h1 id="previous-week"&gt;Previous week&lt;/h1&gt;
&lt;h2 id="architecture-analysis"&gt;Architecture analysis&lt;/h2&gt;
&lt;p&gt;Getting to know an app from the ground up takes some time, especially if that's
a framework you are not too familiar with. Luckilly, I found the &lt;a href="http://railroady.prestonlee.com/" title="railroady home page"&gt;railroady&lt;/a&gt; gem
that helped me visualize how the app is structured, you can find the results
&lt;a href="https://gitlab.com/fedora-ruby/isitfedoraruby/tree/deploy/doc" title="Models/Controllers visualization"&gt;here&lt;/a&gt; (click on one of them and see them as raw).&lt;/p&gt;
&lt;h2 id="deploy-to-a-testing-server"&gt;Deploy to a testing server&lt;/h2&gt;
&lt;p&gt;Heroku might be a nice option, but their plans were limiting the database rows.
Instead, I spawned a Fedora 20 droplet in digitalocean and &lt;a href="http://fedoraruby.axilleas.me" title="Testing instance of isitfedoraruby app"&gt;deployed&lt;/a&gt; it there.
I used postgres as a database backend, unicorn serving the app and nginx as
a reverse proxy.&lt;/p&gt;
&lt;p&gt;First of all, I had to &lt;a href="https://docs.fedoraproject.org/en-US/Fedora/13/html/Security-Enhanced_Linux/sect-Security-Enhanced_Linux-Working_with_SELinux-Enabling_and_Disabling_SELinux.html" title="Enabling and Disabling SELinux"&gt;enable SELinux&lt;/a&gt;, I &lt;a href="http://stopdisablingselinux.com/" title="Seriously, stop disabling SELinux"&gt;had&lt;/a&gt; to,
it was off by default. Then I changed a boolean to make nginx work:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;setsebool&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt; &lt;span class="n"&gt;httpd_can_network_connect&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="started-fixing-bugs"&gt;Started fixing bugs&lt;/h2&gt;
&lt;p&gt;I keep finding small bugs that I currently keep track in my &lt;a href="https://trello.com/b/4aOmUpEC/fedora-ruby" title="trello board for my progress"&gt;trello&lt;/a&gt; board.
There is currently a &lt;a href="https://github.com/zuhao/isitfedoraruby/issues/50" title="GitHub discussion: Move repo to general namespace"&gt;discussion&lt;/a&gt; to move isitfedoraruby to a more general
namespace, so until then I'm working on my fork and the trello board.&lt;/p&gt;
&lt;h1 id="this-week"&gt;This week&lt;/h1&gt;
&lt;h2 id="setting-up-rspec"&gt;Setting up rspec&lt;/h2&gt;
&lt;p&gt;As this is the primary testing tool, I have started writing the first scenarios
and along the way I'll be adding the actual tests.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">axil</dc:creator><pubDate>Tue, 03 Jun 2014 00:00:00 +0300</pubDate><guid>tag:axilleas.me,2014-06-03:en/blog/2014/gsoc2014-week-two</guid><category>fedora</category><category>isitfedoraruby</category><category>gsoc</category><category>ruby</category><category>rails</category><category>webdev</category></item><item><title>GSoC-2014 isitfedoraruby - Week 1</title><link>http://axilleas.me/en/blog/2014/gsoc2014-week-one</link><description>&lt;p&gt;In case you haven't heard, I have been accepted again this year
for Google Summer of Code :) This time I will be working on enhancing
a Rails app that provides information about the state of rubygem
packaging in Fedora.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://isitfedoraruby.com" title="Rubygem packaging state in Fedora"&gt;isitfedoraruby&lt;/a&gt; is a project that was crafted in GSoC 2012 by
&lt;a href="https://github.com/zuhao" title="zuhao's github profile"&gt;Zuhao Wan&lt;/a&gt;. I will pick it where he left off and add some
new features that will hopefully make us packagers' life easier.&lt;/p&gt;
&lt;p&gt;You can read my proposal &lt;a href="https://fedoraproject.org/wiki/GSOC_2014/Student_Application_Axilleas/Isitfedoraruby" title="GSoC 2014 proposal"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#why-i-got-involved-in-this-project"&gt;Why I got involved in this project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#project-details"&gt;Project details&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-we-have-so-far"&gt;What we have so far&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#general-info-pages"&gt;General info pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#single-rubygem-page"&gt;Single rubygem page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#singe-fedorarpm-page"&gt;Singe fedorarpm page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#features-to-be-added-and-bugs-fixed"&gt;Features to be added and bugs fixed&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#test-suite"&gt;Test suite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#enhance-the-gemfile-tool"&gt;Enhance the gemfile tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#show-the-packaging-progress-of-a-gem"&gt;Show the packaging progress of a gem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#enhance-dependency-checker"&gt;Enhance dependency checker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#uiux-enhancements"&gt;UI/UX enhancements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#add-pages-providing-more-general-info"&gt;Add pages providing more general info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#documentation-on-contributing"&gt;Documentation on contributing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#progress-of-previous-week"&gt;Progress of previous week&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#deploy-on-staging-server"&gt;Deploy on staging server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#note-bugs-that-need-fixing"&gt;Note bugs that need fixing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#whats-on-this-week"&gt;What's on this week&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#architecture-analysis"&gt;Architecture analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setup-a-proper-devtest-environment"&gt;Setup a proper dev/test environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fix-bugs-found-in-first-week"&gt;Fix bugs found in first week&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-end-for-now"&gt;The end (for now)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="why-i-got-involved-in-this-project"&gt;Why I got involved in this project&lt;/h1&gt;
&lt;p&gt;Last year was the first time I took part in GSoC, first time I got involved in
Fedora, first time I started contributing to GitLab. I am now a packager, still
trying to &lt;a href="https://fedoraproject.org/wiki/GitLab" title="GitLab on Fedora wiki"&gt;package GitLab&lt;/a&gt; for Fedora/RHEL (help needed!) and a member
of GitLab's community &lt;a href="https://www.gitlab.com/core-team/" title="GitLab core team"&gt;core-team&lt;/a&gt;. I even became an apprentice to Fedora's
infra team (although I haven't dedicated much time admittedly).&lt;/p&gt;
&lt;p&gt;So, having packaged a bunch of rubygems already, I have stumbled upon many
cases where my packager's life would be easier if I had some tools to work
with. And this is where isitfedoraruby comes in. As a rails app, it looked like
the perfect opportunity to learn about the framework and make something that
the Fedora Ruby community could use on a daily basis when packaging.&lt;/p&gt;
&lt;h1 id="project-details"&gt;Project details&lt;/h1&gt;
&lt;p&gt;As I wrote earlier &lt;a href="http://isitfedoraruby.com" title="Rubygem packaging state in Fedora"&gt;isitfedoraruby&lt;/a&gt; is a rails app used mostly internally
in Fedora by ruby packagers. The source code is hosted on &lt;a href="https://github.com/zuhao/isitfedoraruby" title="isitfedoraruby on github"&gt;github&lt;/a&gt;,
deployed on &lt;a href="https://www.openshift.com/" title="Openshift PaaS"&gt;Openshift&lt;/a&gt; and all the info is imported using a &lt;a href="https://github.com/zuhao/isitfedoraruby/blob/master/lib/tasks/database.rake" title="Import gems rake task"&gt;rake task&lt;/a&gt;
using a &lt;a href="https://github.com/zuhao/isitfedoraruby/tree/master/.openshift/cron" title="Cron job to import gems"&gt;cron job&lt;/a&gt; every hour.&lt;/p&gt;
&lt;p&gt;What you see in production is using Rails 3 and ruby 1.9.3. Zuhao has already
worked in porting it to &lt;a href="https://github.com/zuhao/isitfedoraruby/tree/rails4" title="Rails 4 branch"&gt;Rails 4&lt;/a&gt; so I'll be working on that branch.&lt;/p&gt;
&lt;p&gt;The same project was also picked by some high school students during Google's Code In
program in 2012. You can read more in Mo Morsi's &lt;a href="http://mo.morsi.org/blog/node/378" title="Google Code In additions to isitfedoraruby"&gt;blog post&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="what-we-have-so-far"&gt;What we have so far&lt;/h2&gt;
&lt;p&gt;Here is a brief list of the pages there are so far.&lt;/p&gt;
&lt;h3 id="general-info-pages"&gt;General info pages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Home page&lt;/li&gt;
&lt;li&gt;All rubygems&lt;/li&gt;
&lt;li&gt;All fedorarpms&lt;/li&gt;
&lt;li&gt;Contribute&lt;/li&gt;
&lt;li&gt;About&lt;/li&gt;
&lt;li&gt;Gemfile Tool&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="single-rubygem-page"&gt;Single rubygem page&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Link to fedorarpm&lt;/li&gt;
&lt;li&gt;Homepage url&lt;/li&gt;
&lt;li&gt;Source code url&lt;/li&gt;
&lt;li&gt;Version&lt;/li&gt;
&lt;li&gt;Total downloads&lt;/li&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;li&gt;Dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="singe-fedorarpm-page"&gt;Singe fedorarpm page&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Header links&lt;ul&gt;
&lt;li&gt;Dependency Tree (using D3 js library)&lt;/li&gt;
&lt;li&gt;Timeline (chronological visualization of the bugs &amp;amp; version releases)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Link to rubygem&lt;/li&gt;
&lt;li&gt;Link to source code url on &lt;a href="http://pkgs.fedoraproject.org/cgit"&gt;http://pkgs.fedoraproject.org/cgit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Number of git commits&lt;/li&gt;
&lt;li&gt;Up to date (yes/no)&lt;/li&gt;
&lt;li&gt;Link to maintainer&lt;ul&gt;
&lt;li&gt;link_to bubble chart page showing the packages a user owns&lt;/li&gt;
&lt;li&gt;Table of rpms owned by user&lt;ul&gt;
&lt;li&gt;link_to rpm&lt;/li&gt;
&lt;li&gt;Upstream version&lt;/li&gt;
&lt;li&gt;Rawhide version&lt;/li&gt;
&lt;li&gt;Number of git commits&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;li&gt;Versions table&lt;ul&gt;
&lt;li&gt;rawhide&lt;/li&gt;
&lt;li&gt;fedora 20&lt;/li&gt;
&lt;li&gt;fedora 19&lt;/li&gt;
&lt;li&gt;gem version&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dependencies table&lt;ul&gt;
&lt;li&gt;package name (link_to fedorarpm)&lt;/li&gt;
&lt;li&gt;rawhide version&lt;/li&gt;
&lt;li&gt;f20 version&lt;/li&gt;
&lt;li&gt;f19 version&lt;/li&gt;
&lt;li&gt;upstream version&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dependents table&lt;ul&gt;
&lt;li&gt;package name (link_to fedorarpm)&lt;/li&gt;
&lt;li&gt;rawhide version&lt;/li&gt;
&lt;li&gt;f20 version&lt;/li&gt;
&lt;li&gt;f19 version&lt;/li&gt;
&lt;li&gt;upstream version&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bugs table&lt;ul&gt;
&lt;li&gt;ID (link_to bugzilla, striked if resolved)&lt;/li&gt;
&lt;li&gt;Bug title&lt;/li&gt;
&lt;li&gt;Review status&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Builds table&lt;ul&gt;
&lt;li&gt;Build ID (link_to koji url)&lt;/li&gt;
&lt;li&gt;Title (package name)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="features-to-be-added-and-bugs-fixed"&gt;Features to be added and bugs fixed&lt;/h2&gt;
&lt;h3 id="test-suite"&gt;Test suite&lt;/h3&gt;
&lt;p&gt;The current test suite is non-existent. Some of the tools I plan to use are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rspec&lt;/code&gt; for testing models and controllers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;factory_girl&lt;/code&gt; for feeding tests&lt;/li&gt;
&lt;li&gt;&lt;code&gt;capybara&lt;/code&gt; to simulate user interaction with the app&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For views I will use feature specs. Existing minitest tests will be replaced
with rspec ones.&lt;/p&gt;
&lt;h3 id="enhance-the-gemfile-tool"&gt;Enhance the gemfile tool&lt;/h3&gt;
&lt;p&gt;The &lt;a href="http://www.isitfedoraruby.com/stats/gemfile_tool" title=" Test your Gemfile or Gemfile.lock against Fedora"&gt;Gemfile tool&lt;/a&gt; checks against a Gemfile or Gemfile.lock and shows if
the gems are packaged for Fedora. In its current implementation, it basically
dumps all the information in the screen, which is not too handy if you need to
somehow extract this information.&lt;/p&gt;
&lt;p&gt;The functionality I want to add is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;provide a better view of the output (prettier table view)&lt;/li&gt;
&lt;li&gt;ability to provide a Gemfile url and have the output on a &lt;em&gt;static&lt;/em&gt; page like:
    &lt;code&gt;http://isitfedoraruby/stats/gemfile?url=www.example.com/Gemfile.lock&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this we could calculate how many of the gems are in Fedora repos, which
brings me to another cool feature.&lt;/p&gt;
&lt;h3 id="show-the-packaging-progress-of-a-gem"&gt;Show the packaging progress of a gem&lt;/h3&gt;
&lt;p&gt;There are times where a gem depends on other gems not yet packaged for Fedora.
A cool feature would be to able to see the packaging progress of a gem.&lt;/p&gt;
&lt;p&gt;The plan is to either implement one of the two options below (or both):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Query &lt;a href="https://rubygems.org"&gt;https://rubygems.org&lt;/a&gt; and extract information on the dependencies.&lt;/li&gt;
&lt;li&gt;Provide a yaml file with info on the gem's review request bugzilla issue,
    then query koji for rawhide builds and bugzilla for any Blocks issues.
    If we have those two values we can calculate how many dependents gems
    there are not yet or already packaged.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I prefer the first option as with that one could see what dependencies
needed prior to submitting a package for a review request.&lt;/p&gt;
&lt;p&gt;A nice progress bar with the percentage of gem packaging completion will
be provided as well. For each gem that gets in rawhide, the progress bar
gets a little further. There can also be a number of other cool info in
the page, like links to bugzilla requests so that someone could lend a hand, etc.&lt;/p&gt;
&lt;p&gt;At first I will focus on implementing this for a single gem but later it
can be extended to track the progress of a rails app.&lt;/p&gt;
&lt;p&gt;That functionality will mainly come from the next feature in the list.
Enter dependency checker.&lt;/p&gt;
&lt;h3 id="enhance-dependency-checker"&gt;Enhance dependency checker&lt;/h3&gt;
&lt;p&gt;The &lt;a href="http://www.isitfedoraruby.com/fedorarpms/rubygem-rspec/full_deps" title="Dependencies represantation"&gt;current&lt;/a&gt; representation of a gem's dependencies is in a tree format,
not very handy if you want to extract information.&lt;/p&gt;
&lt;p&gt;Influenced by &lt;a href="https://www.gemlou.pe"&gt;https://www.gemlou.pe&lt;/a&gt;, I plan to implement a similar
representation and show the dependencies in a more elaborate way.&lt;/p&gt;
&lt;h3 id="uiux-enhancements"&gt;UI/UX enhancements&lt;/h3&gt;
&lt;p&gt;The app uses bootstrap as a frontend framework, as you could tell.
The idea is to make it more user friendly and prettier. If it were me
I would have used &lt;a href="http://foundation.zurb.com/" title="The most advanced responsive front-end framework in the world."&gt;foundation&lt;/a&gt; in the first place. Upstream provides
even a gem for immediate use in rails apps. In my opinion it's targeting
more to developers that don't want to get too messy with css. For the time
being I don't consider changing frameworks, but it's a food for thought.&lt;/p&gt;
&lt;h3 id="add-pages-providing-more-general-info"&gt;Add pages providing more general info&lt;/h3&gt;
&lt;p&gt;Pages that would help the user experience are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;list of gems pending review&lt;/li&gt;
&lt;li&gt;list of gems already assigned but stagnated for too long&lt;/li&gt;
&lt;li&gt;list of gems pending review and marked as NEEDSPONSOR&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All these can be queried from bugzilla through the ruby-bugzilla gem.&lt;/p&gt;
&lt;h3 id="documentation-on-contributing"&gt;Documentation on contributing&lt;/h3&gt;
&lt;p&gt;Last but certainly not least, I will document the development contribution
process should anyone want to provide any fixes/features.&lt;/p&gt;
&lt;p&gt;Apart from developing the app, I will provide a page with comprehensive
steps on packaging a rubygem. A draft article can be found &lt;a href="https://gitlab.com/fedora-ruby/gitlab-rpm/wikis/rubygem-packaging" title="Fedora Rubygem Packaging"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="progress-of-previous-week"&gt;Progress of previous week&lt;/h1&gt;
&lt;p&gt;I have been reading the codebase to get familiar with it and then done
a few minor things.&lt;/p&gt;
&lt;h2 id="deploy-on-staging-server"&gt;Deploy on staging server&lt;/h2&gt;
&lt;p&gt;Currently I run it on &lt;a href="http://fedoraruby.herokuapp.com" title="isitfeedoraruby on heroku"&gt;heroku&lt;/a&gt;, but the database exceeded the free plan they
provide so I'll have to move it elsewhere. I haven't yet imported the gems
as the rake tasks pull in all gems from rubygems.org and the database gets huge.
This is noted to be fixed in the rake task. Also, what you see is the next version
of the app using Rails 4 :)&lt;/p&gt;
&lt;h2 id="note-bugs-that-need-fixing"&gt;Note bugs that need fixing&lt;/h2&gt;
&lt;p&gt;Like last year, I will be documenting any progress in a &lt;a href="https://trello.com/b/4aOmUpEC/fedora-ruby" title="isitfedoraruby trello board progress"&gt;trello board&lt;/a&gt;.
In the code clean up list you can see what is marked as to be fixed.
If you have any comments please do leave them on the cards.&lt;/p&gt;
&lt;h1 id="whats-on-this-week"&gt;What's on this week&lt;/h1&gt;
&lt;p&gt;We are already in the middle of the second week, so here's a preview of
what I'm working on.&lt;/p&gt;
&lt;h2 id="architecture-analysis"&gt;Architecture analysis&lt;/h2&gt;
&lt;p&gt;The code needs a clean up and the only way to do this is to do an analysis
of the app's architecture. That will give me an overview of the changes need
to be done like merging the rubygem page view into fedorarpm.&lt;/p&gt;
&lt;h2 id="setup-a-proper-devtest-environment"&gt;Setup a proper dev/test environment&lt;/h2&gt;
&lt;p&gt;Right now, if anyone wanted to play with the app, apart from db migration
you would have to run the rake tasks that import all the info needed in
order to have a functional app. Rather than importing each gem (which can be
done in batches), I would like to create some fake data to begin with.&lt;/p&gt;
&lt;p&gt;This would help me afterwards with the tests.&lt;/p&gt;
&lt;h2 id="fix-bugs-found-in-first-week"&gt;Fix bugs found in first week&lt;/h2&gt;
&lt;p&gt;I'll try to apply fixes to as many bugs as possible I found previous week.&lt;/p&gt;
&lt;h1 id="the-end-for-now"&gt;The end (for now)&lt;/h1&gt;
&lt;p&gt;Soo, that's it for now! Hope you made it this far :)
Cheers to an interesting summer!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">axil</dc:creator><pubDate>Tue, 27 May 2014 00:00:00 +0300</pubDate><guid>tag:axilleas.me,2014-05-27:en/blog/2014/gsoc2014-week-one</guid><category>fedora</category><category>isitfedoraruby</category><category>gsoc</category><category>ruby</category><category>rails</category><category>webdev</category></item><item><title>Bringing GitLab to Fedora</title><link>http://axilleas.me/en/blog/2013/bringing-gitlab-in-fedora</link><description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Update&lt;/em&gt;&lt;/strong&gt;: I just got a confirmation mail that my proposal got accepted! &lt;a href="http://axilleas.me/en/blog/2013/accepted-for-gsoc-2013"&gt;Read here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, I decided to write some info regarding my involvement for this year's
&lt;a href="http://www.google-melange.com/gsoc/homepage/google/gsoc2013" title="Google Summer of Code 2013"&gt;Google Summer of Code&lt;/a&gt;. I have been using/testing GitLab since
version 2.0 (almost a year now) and I am thrilled to see how much it has
growed since. This year I got a little more involved into this and
I made &lt;a href="https://github.com/gitlabhq/gitlabhq/commits/master/doc/install/installation.md?author=axilleas"&gt;two&lt;/a&gt; &lt;a href="https://github.com/gitlabhq/gitlabhq/commits/master/lib/tasks/gitlab/check.rake?author=axilleas"&gt;commits&lt;/a&gt; upstream. Nothing fancy, but I hope to
contribute more as time passes by.&lt;/p&gt;
&lt;p&gt;In the rest of this article I will try to explain what GitLab is,
how Fedora is involved into all this and what are the benefits of this involvement.
This is the first of many follow-up posts I intend to write, so keep tight!&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-gitlab"&gt;What is GitLab?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fedoras-involvement-so-far"&gt;Fedora's involvement so far&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-are-the-benefits"&gt;What are the benefits&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#get-more-ruby-packages-in-the-repos"&gt;Get more ruby packages in the repos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-new-service-for-fedorahostedorg"&gt;A new service for fedorahosted.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#next-steps-and-things-to-overcome"&gt;Next steps and things to overcome&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="what-is-gitlab"&gt;What is GitLab?&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://blog.gitlab.com" title="GitLab home page"&gt;GitLab&lt;/a&gt; is an &lt;a href="https://github.com/gitlabhq/gitlabhq" title="GitLab on Github :p"&gt;open source&lt;/a&gt; MIT licenced &lt;a href="http://git-scm.com" title="git home page"&gt;git&lt;/a&gt; repository
management application. It is built on &lt;a href="http://rubyonrails.org/" title="Ruby on Rails"&gt;Ruby on Rails&lt;/a&gt; and is
one of the most &lt;a href="https://github.com/popular/starred" title="GitLab featured in Github's most popular repos"&gt;popular&lt;/a&gt; projects featured on Github.
It is used by many companies as their internal git management repository.
The reason it gained so much popularity is that it bares a strong resemblance
to github's &lt;a href="http://gitlab.org/screenshots/" title="GitLab screenshots"&gt;looks&lt;/a&gt; and &lt;a href="http://blog.gitlab.com/features/" title="GitLab features"&gt;feels&lt;/a&gt;.
It is a project with great potential, under heavy development with a release
cycle every month. That makes it possible to apply bug fixes quite regularly
and test new features. And since a picture is worth a thousand words, here is
a &lt;a href="http://demo.gitlab.com/users/sign_in" title="GitLab demo site"&gt;demo site&lt;/a&gt; where you can test all the latest features.&lt;/p&gt;
&lt;h1 id="fedoras-involvement-so-far"&gt;Fedora's involvement so far&lt;/h1&gt;
&lt;p&gt;The thought of GitLab being packaged and deployed for &lt;a href="http://fedorahosted.org"&gt;Fedora Hosted&lt;/a&gt; isn't new.
It all started last March when &lt;a href="https://fedoraproject.org/wiki/User:Mojavelinux"&gt;Dan Allen&lt;/a&gt; &lt;a href="https://lists.fedoraproject.org/pipermail/infrastructure/2012-March/011463.html"&gt;proposed&lt;/a&gt; GitLab
to be used as a service for Fedora Hosted. If you follow the conversation
it summarizes to some key points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Projects pages should be ideally hosted as &lt;code&gt;$projectname.fedorahosted.org&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;GitLab and its dependencies should be packaged for Fedora and EPEL 6.&lt;/li&gt;
&lt;li&gt;Puppetize the whole thing up. &lt;a href="https://forge.puppetlabs.com/sbadia/gitlab"&gt;There&lt;/a&gt; are &lt;a href="https://forge.puppetlabs.com/lboynton/gitlab"&gt;some&lt;/a&gt; configs, but they'll sure need some adjustment.&lt;/li&gt;
&lt;li&gt;We need to form a team of maintainers for longterm support even after GSoC is over.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There was even a &lt;a href="https://groups.google.com/forum/?fromgroups=#!topic/gitlabhq/SQMDi-yyXmU"&gt;post&lt;/a&gt; in GitLab's list, also by Dan Allen,
bringing the project to the attention of the GitLab community.
The most interesting thing was that the &lt;a href="https://github.com/randx"&gt;lead developer&lt;/a&gt; of GitLab
was more than willing to help. In the end, there was an &lt;a href="https://fedoraproject.org/wiki/GSOC_2012/Student_Application_babakb/GitlabSetup" title="Student application for GitLab at GSoC 2012"&gt;application&lt;/a&gt; but
unfortunately that was the last anyone heard about the project.&lt;/p&gt;
&lt;p&gt;So, here we are a year after with me applying for the project. To be exact
there is &lt;a href="https://lists.fedoraproject.org/pipermail/summer-coding/2013-March/000286.html"&gt;another&lt;/a&gt; sudent interested in this as well, so that makes it two of us.
I have already expressed my interest in &lt;a href="https://lists.fedoraproject.org/pipermail/ruby-sig/2013-March/001270.html"&gt;RubySIG&lt;/a&gt; and in the &lt;a href="https://lists.fedoraproject.org/pipermail/infrastructure/2013-March/012631.html"&gt;infrastructure&lt;/a&gt; mailing list.
I was glad to see that there was a positive response from Dan Allen,
as well as some valuable advice from user &lt;a href="https://fedoraproject.org/wiki/User:Ktdreyer"&gt;Ken Dreyer&lt;/a&gt; who currently
tries to deal with &lt;a href="https://fedoraproject.org/wiki/User:Ktdreyer/Gitorious"&gt;Gitorious&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="what-are-the-benefits"&gt;What are the benefits&lt;/h1&gt;
&lt;p&gt;There are two major benefits for Fedora.&lt;/p&gt;
&lt;h2 id="get-more-ruby-packages-in-the-repos"&gt;Get more ruby packages in the repos&lt;/h2&gt;
&lt;p&gt;Prior to addressing my interest in the mailing lists, I approached &lt;a href="https://fedoraproject.org/wiki/User:Vondruch"&gt;Vít Ondruch&lt;/a&gt; to get some feedback about this task.
He was very helpful and pointed me to what should be done as a first step.
That is&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;identify which gems are missing in Fedora and package them,&lt;/li&gt;
&lt;li&gt;compile a list of gems GitLab is using, including all their dependencies (and possibly bundled dependencies).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For the first task, I used a hackish bash script which first accumulates
all rubygems in a file and then removes the duplicate packages and the ones
that are documentation.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;file_raw&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/axil/tools/fedora-gitlab/rubygems_fedora_raw&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;file_new&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/axil/tools/fedora-gitlab/rubygems_fedora&amp;#39;&lt;/span&gt;

yum search all rubygem | awk &lt;span class="s1"&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt; &amp;gt; &lt;span class="nv"&gt;$file_raw&lt;/span&gt;

sed -e &lt;span class="s1"&gt;&amp;#39;s/rubygem-//g&amp;#39;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;s/.noarch//g&amp;#39;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;s/.x86_64//g&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
-e &lt;span class="s1"&gt;&amp;#39;/i686/d&amp;#39;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;/==/d&amp;#39;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;/:/d&amp;#39;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;/-doc/d&amp;#39;&lt;/span&gt; &amp;lt; &lt;span class="nv"&gt;$file_raw&lt;/span&gt; &amp;gt; &lt;span class="nv"&gt;$file_new&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In order to find what gems GitLab depends on, I used the &lt;a href="https://github.com/gitlabhq/gitlabhq/blob/master/Gemfile.lock"&gt;Gemfile.lock&lt;/a&gt;
and wrote a simple python &lt;a href="https://github.com/axilleas/gsoc/blob/master/gemfile.py"&gt;script&lt;/a&gt;&lt;sup id="fnref:python-script"&gt;&lt;a class="footnote-ref" href="#fn:python-script" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; that computes how many and which gems
Fedora and GitLab have in common. Below are some draft&lt;sup id="fnref:draft_numbers"&gt;&lt;a class="footnote-ref" href="#fn:draft_numbers" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; numbers and a bar chart.&lt;/p&gt;
&lt;div id="rubygems_chart"&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Gitlab uses: &lt;strong&gt;203&lt;/strong&gt; gems.&lt;/p&gt;
&lt;p&gt;Fedora has packaged: &lt;strong&gt;385&lt;/strong&gt; gems.&lt;/p&gt;
&lt;p&gt;There are &lt;strong&gt;97&lt;/strong&gt; common gems.&lt;/p&gt;
&lt;p&gt;There should be packaged: &lt;strong&gt;106&lt;/strong&gt; gems.&lt;/p&gt;
&lt;p&gt;Fedora will have &lt;strong&gt;27.53 %&lt;/strong&gt; more ruby packages, that is &lt;strong&gt;482&lt;/strong&gt; gems in total.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Not bad, &lt;strong&gt;106&lt;/strong&gt; more ruby packages! That is a plus now that Fedora is considered
one of &lt;a href="https://bugs.ruby-lang.org/projects/ruby-trunk/wiki/20SupportedPlatforms"&gt;Ruby's supported platforms&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; I just found out about the &lt;a href="http://isitfedoraruby.com/stats/gemfile_tool"&gt;gemfile tool&lt;/a&gt; that isitfedoraruby.com&lt;sup id="fnref:isitfedruby"&gt;&lt;a class="footnote-ref" href="#fn:isitfedruby" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;
is using. This will come in handy.&lt;/p&gt;
&lt;h2 id="a-new-service-for-fedorahostedorg"&gt;A new service for fedorahosted.org&lt;/h2&gt;
&lt;p&gt;After the packaging is done, the next big thing is the deployment process on
&lt;a href="http://fedorahosted.org"&gt;Fedora Hosted&lt;/a&gt; as a new service. Quoting Dan Allen's &lt;a href="https://lists.fedoraproject.org/pipermail/infrastructure/2013-March/012680.html"&gt;thought&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One of the key reasons I've been pushing for GitLab is because I see the
potential it has for drastically improving the discoverability of the
Fedora code base and encourage participation. I've been involved with a lot
of projects on GitHub and I'm amazed by how simple it is to submit changes
(to both code and documentation). In fact, it's often easier to send a
patch with a description of the change than to create an issue...flipping
the normal bug submitting process on its head.&lt;/p&gt;
&lt;p&gt;GitHub also works because it enables collaboration over coordination. You
don't have to ask for permission on GitHub. You just do it. Then you can
easily track when they get pulled in or changes are requested. (the same is
true of GitLab).&lt;/p&gt;
&lt;p&gt;With GitLab, we can bring that experience to the Fedora community. It's a
large enough community (esp in terms of repositories), that I'm positive
we'd see that collaboration kindle within the Fedora instance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So yeah, this is a big deal from this point of view :)&lt;/p&gt;
&lt;h1 id="next-steps-and-things-to-overcome"&gt;Next steps and things to overcome&lt;/h1&gt;
&lt;p&gt;There is certainly a lot more to do. For starters, as a Fedora newbie,
I have to run through the &lt;a href="https://fedoraproject.org/wiki/Packaging:Ruby"&gt;Ruby guidelines&lt;/a&gt; and learn
about the philosophy of rpm. Luckily, I am not a linux newbie (I've been
using Archlinux for 5 years) and I am adopting rapidly.
Then, I need to learn some Ruby. I have already printed &lt;em&gt;&lt;a href="http://mislav.uniqpath.com/poignant-guide"&gt;why's (poignant) Guide to Ruby&lt;/a&gt;&lt;/em&gt;
which is considered a must read, and believe me it is! (download the pdf from &lt;a href="https://github.com/downloads/mislav/poignant-guide/whys-poignant-guide-to-ruby.pdf"&gt;here&lt;/a&gt;).
&lt;a href="http://ruby.learncodethehardway.org/book/"&gt;Learn Ruby the hard way&lt;/a&gt; is also a good starting point. Ι think I'm on the right track.&lt;/p&gt;
&lt;p&gt;Now, as far as the packaging process is concerned, here is what more needs to be done:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MariaDB support. Since MariaDB will be the &lt;a href="https://lists.fedoraproject.org/pipermail/devel/2013-January/176584.html" title="Proposed F19 Feature: Replace MySQL with MariaDB"&gt;default&lt;/a&gt; &lt;a href="https://fedoraproject.org/wiki/Features/ReplaceMySQLwithMariaDB" title="Features/ReplaceMySQLwithMariaDB"&gt;implementation&lt;/a&gt; of MySQL in Fedora 19, GitLab will need to support it.&lt;/li&gt;
&lt;li&gt;Write systemd service files. I had made an &lt;a href="https://github.com/axilleas/gitlab-recipes/tree/master/systemd"&gt;attempt&lt;/a&gt; two months ago when I was trying to set up GitLab on Archlinux, but it is far from perfect.&lt;/li&gt;
&lt;li&gt;Packages to be EPEL compatible. A great advantage if GitLab gets packaged for Fedora, is that it would make it as easy as pie to install on a server running Red Hat, Centos, or some other rpm based distro.&lt;/li&gt;
&lt;li&gt;Ruby 2.0 compatibility. I don't think that'll be much of a stopper since GitLab is in the &lt;a href="https://github.com/gitlabhq/gitlabhq/commit/52cd655f71c6a5393b71640c13cd95e35e8d2624"&gt;process&lt;/a&gt; of supporting it, but I put it here just in case.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's all for now. If you read through here you should have a good understanding
of this project's goal. More posts to come!&lt;/p&gt;
&lt;!--Load the AJAX API--&gt;

&lt;script type="text/javascript" src="https://www.google.com/jsapi"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;

  // Load the Visualization API and the piechart package.
  google.load('visualization', '1.0', {'packages':['corechart']});

  // Set a callback to run when the Google Visualization API is loaded.
  google.setOnLoadCallback(drawChart);

  // Callback that creates and populates a data table,
  // instantiates the pie chart, passes in the data and
  // draws it.
  function drawChart() {

  // Create the data table.
  var data = new google.visualization.DataTable();
  data.addColumn('string', '');
  data.addColumn('number', 'rubygems');
  data.addRows([
    ['GitLab', 203],
    ['Fedora', 385],
    ['Common', 97],
    ['To be packaged', 106],
    ['Total after packaging', 482]
    ]);

  // Set chart options
  var options = {'title':'Numbers calculated on 08-04-2013', 'width':600, 'height':500};

  // Instantiate and draw our chart, passing in some options.
  var chart = new google.visualization.BarChart(document.getElementById('rubygems_chart'));
  chart.draw(data, options);
  }
&lt;/script&gt;

&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:python-script"&gt;
&lt;p&gt;I should write it in ruby, I know :p&amp;#160;&lt;a class="footnote-backref" href="#fnref:python-script" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:draft_numbers"&gt;
&lt;p&gt;I say draft, mainly because that is a raw calculation of GitLab's dependencies. One has to take into account the different/old versions that may exist between Fedora and GtiLab. There are also some packages GitLab pulls from git and not rubygems.org.&amp;#160;&lt;a class="footnote-backref" href="#fnref:draft_numbers" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:isitfedruby"&gt;
&lt;p&gt;&lt;a href="http://isitfedoraruby.com"&gt;isitfedoraruby.com&lt;/a&gt; is a cool web app that was the result of &lt;a href="https://fedoraproject.org/wiki/GSOC_2012/Student_Application_Zuhao/IsItFedoraRuby"&gt;last year's GSoC&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:isitfedruby" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">axil</dc:creator><pubDate>Sun, 07 Apr 2013 00:00:00 +0300</pubDate><guid>tag:axilleas.me,2013-04-07:en/blog/2013/bringing-gitlab-in-fedora</guid><category>fedora</category><category>gitlab</category><category>gsoc</category><category>ruby</category><category>rails</category></item></channel></rss>