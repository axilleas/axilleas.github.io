<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Over the line</title><link href="http://axilleas.me/" rel="alternate"></link><link href="http://axilleas.me/feeds/all.atom.xml" rel="self"></link><id>http://axilleas.me/</id><updated>2014-12-04T00:00:00+02:00</updated><entry><title>Redesigning the looks of this blog</title><link href="http://axilleas.me/en/blog/2014/pelican-new-theme-redesign" rel="alternate"></link><updated>2014-12-04T00:00:00+02:00</updated><author><name>axil</name></author><id>tag:axilleas.me,2014-12-04:en/blog/2014/pelican-new-theme-redesign</id><summary type="html">&lt;p&gt;It's been a long time since last I showed some love for the UI of this blog,
and after a day of modifications I'm pretty excited about the outcome :w00t:&lt;/p&gt;
&lt;p&gt;So, what has changed?&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#ui-redesign"&gt;UI redesign&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#new-plugins-used"&gt;New plugins used&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#search"&gt;search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#neighboring-articles"&gt;neighboring articles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#post-statistics"&gt;post statistics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#source-code"&gt;Source code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="ui-redesign"&gt;UI redesign&lt;/h2&gt;
&lt;p&gt;I like simple things and I always wanted the same thing for my blog. Few years
ago, I had come across a static site built with &lt;a href="http://jekyllrb.com/" title="Jekyll - Static blog generator"&gt;jekyll&lt;/a&gt; and loved its
simplicity. My new theme is heavilly inspired by &lt;a href="http://uberspot.github.io"&gt;http://uberspot.github.io&lt;/a&gt;,
hence the name I decided to give it. This nice feature of rotating pictures
with every new visit isn't implemented yet for pelican, but it's in my plans.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://vincent.bernat.im/en/" title="Disruptive ninja - Vincent Bernat"&gt;Vincent Bernat's blog&lt;/a&gt; has also been an inspiration and you'll see
many css styles taken from there, for example the table of contents. Apart
from design patterns, he is writing some very cool stuff so I urge you to
follow him.&lt;/p&gt;
&lt;p&gt;I prefer the light themes over the darks ones, but not too bright. The
background is taken from &lt;a href="http://subtlepatterns.com/" title="Free to use tilable textured patterns"&gt;subtle patterns&lt;/a&gt;, an awesome site that has many
patterns to choose from. I went with &lt;a href="http://subtlepatterns.com/paper-fibers/"&gt;paper fibers&lt;/a&gt; and I like the outcome so
far.&lt;/p&gt;
&lt;p&gt;The main font used is &lt;a href="https://www.google.com/fonts" title="Google webfonts"&gt;Merriweather&lt;/a&gt; from Google's webfonts and was inspired
to use by Vincent's blog.&lt;/p&gt;
&lt;p&gt;Code blocks are styled after Mozilla's Developer Network, here is a sample
taken form &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Dynamic_typing"&gt;here&lt;/a&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// foo is a Number now&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// foo is a String now&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// foo is a Boolean now&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://pygments.org/" title="Python syntax highlighter"&gt;pygments&lt;/a&gt; is used underneath and I picked the &lt;a href="http://pygments.org/demo/218030/?style=friendly" title="friendly pygments style"&gt;friendly&lt;/a&gt; style.&lt;/p&gt;
&lt;p&gt;Blockquotes are restyled to use sharp edges and a light orange color:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Look, let me explain something. I'm not Mr. Lebowski. You're Mr. Lebowski.
I'm the Dude. So that's what you call me. That, or Duder, or His Dudeness, or
El Duderino, if you're not into the whole brevity thing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="new-plugins-used"&gt;New plugins used&lt;/h2&gt;
&lt;p&gt;Pelican has a very active community and its powerful structure make it dead
easy to add a plugin or even write your own. Head over the &lt;a href="https://github.com/getpelican/pelican-plugins" title="Pelican plugins GitHub repo"&gt;pelican-plugins&lt;/a&gt;
repo and see your options.&lt;/p&gt;
&lt;p&gt;For the time being I chose to use three plugins that add some pretty nice
functionality to the UI and UX.&lt;/p&gt;
&lt;h3 id="search"&gt;search&lt;/h3&gt;
&lt;p&gt;Being a static site, the only way to add some search functionality is
by using javascript. Thankfully, there is a jquery plugin that does exactly
that and is named &lt;a href="http://www.tipue.com/search/docs/" title="A site search engine jQuery plugin"&gt;tipue search&lt;/a&gt;. Some nice guy provided a pelican plugin
so I took a shot and used it.&lt;/p&gt;
&lt;p&gt;There isn't much information in the docs how to set it up, but after a little
search, I found some articles that explained it in depth.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://moparx.com/2014/04/adding-search-capabilities-within-your-pelican-powered-site-using-tipue-search/"&gt;http://moparx.com/2014/04/adding-search-capabilities-within-your-pelican-powered-site-using-tipue-search/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.futurile.net/2014/04/19/sitesearch-for-pelican-blog-with-tipue/"&gt;http://www.futurile.net/2014/04/19/sitesearch-for-pelican-blog-with-tipue/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="neighboring-articles"&gt;neighboring articles&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/neighbors" title="Pelican neighbors plugin"&gt;neighbors plugin&lt;/a&gt; adds &lt;code&gt;next_article&lt;/code&gt; (newer) and &lt;code&gt;prev_article&lt;/code&gt; (older)
variables to the article's context.&lt;/p&gt;
&lt;p&gt;As you'll see I added some nice bowling pins icons to show you the way :)&lt;/p&gt;
&lt;h3 id="post-statistics"&gt;post statistics&lt;/h3&gt;
&lt;p&gt;A really nice plugin is the &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/post_stats" title="post stats pelican plugin"&gt;post_stats&lt;/a&gt; which calculates various statistics
about a post and stores them in an &lt;code&gt;article.stats&lt;/code&gt; dictionary.&lt;/p&gt;
&lt;p&gt;Now you get the average time to read a post, and if you hover over it, you also
see the total words written.&lt;/p&gt;
&lt;h2 id="source-code"&gt;Source code&lt;/h2&gt;
&lt;p&gt;As always, the &lt;a href="https://github.com/axilleas/pelican-uberspot" title="Pelican uberspot theme"&gt;source code&lt;/a&gt; is available to take a look and hack on.
I haven't yet submitted it to the pelican-themes repo as I need to sort some
things and clean it up a bit.&lt;/p&gt;</summary><category term="pelican"></category><category term="python"></category><category term="css"></category><category term="jinja"></category><category term="fedoraplanet"></category></entry><entry><title>IsItFedoraRuby new design</title><link href="http://axilleas.me/en/blog/2014/isitfedoraruby-new-design" rel="alternate"></link><updated>2014-07-30T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.me,2014-07-30:en/blog/2014/isitfedoraruby-new-design</id><summary type="html">&lt;p&gt;The past week I tried to do something about the looks of isitfedoraruby.
It was fun using bootstrap (my first time) and I think the outcome is cool.
I tried to use Fedora like colors and the font is &lt;em&gt;Liberation Sans&lt;/em&gt;,
same as &lt;a href="https://admin.fedoraproject.org/pkgdb," title="Fedora Package Database"&gt;Fedora pkgdb&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can check the overall changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Before: &lt;a href="http://www.isitfedoraruby.com/"&gt;http://www.isitfedoraruby.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;After:  &lt;a href="http://fedoraruby.axilleas.me/"&gt;http://fedoraruby.axilleas.me/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#tables"&gt;Tables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fedorarpms"&gt;fedorarpms&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#index-page"&gt;index page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#show-page"&gt;show page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubygems-show-page"&gt;rubygems show page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#owner-page"&gt;owner page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#navigation-bar"&gt;Navigation bar&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#active-links"&gt;Active links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#navbar-header"&gt;Navbar header&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dropdown-menu"&gt;Dropdown menu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#search-field"&gt;Search field&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#responsive-design"&gt;Responsive design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="tables"&gt;Tables&lt;/h2&gt;
&lt;p&gt;They are now borderless, with highlighted headings. They are also responsive
which means if the table is bigger than the page it gets its own sidebar
without breaking the rest of the site.&lt;/p&gt;
&lt;h2 id="fedorarpms"&gt;fedorarpms&lt;/h2&gt;
&lt;h3 id="index-page"&gt;index page&lt;/h3&gt;
&lt;p&gt;The index page show all packaged rubygems along with some interesting info.
You can see if a package is out of date if is highlighted with a red color.
On the other hand green means is up to date with latest upstream.&lt;/p&gt;
&lt;p&gt;The code that does that is pretty simple. Bootstrap provides some css classes
for coloring. So I wanted to use &lt;code&gt;warning&lt;/code&gt; for outdated and &lt;code&gt;success&lt;/code&gt; for up to
date packages. I highlighted the whole table row so I used:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;%tr&lt;span class="o"&gt;{&lt;/span&gt;class: rpm.up_to_date? ? &lt;span class="s1"&gt;&amp;#39;success&amp;#39;&lt;/span&gt; : &lt;span class="s1"&gt;&amp;#39;danger&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In particular check &lt;a href="https://github.com/axilleas/isitfedoraruby/blob/master/app/views/fedorarpms/index.html.haml#L19"&gt;line 19&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="show-page"&gt;show page&lt;/h3&gt;
&lt;p&gt;Previously there was a ton of information all in one page. Now, the info is
still there but I have devided it into tab sections.&lt;/p&gt;
&lt;p&gt;Currently there are 5 tabs.&lt;/p&gt;
&lt;p&gt;The main tab has a gem's basic info:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Up to date badge (green yes or red no)&lt;/li&gt;
&lt;li&gt;Gitweb repository url&lt;/li&gt;
&lt;li&gt;SPEC file url&lt;/li&gt;
&lt;li&gt;Upstream url&lt;/li&gt;
&lt;li&gt;Maintainer FAS name&lt;/li&gt;
&lt;li&gt;Number of git commits&lt;/li&gt;
&lt;li&gt;Last packager (in case a package is co-maintained)&lt;/li&gt;
&lt;li&gt;Last commit message&lt;/li&gt;
&lt;li&gt;Last commit date&lt;/li&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Basic Info" src="http://axilleas.me/images/isitfedoraruby-fedorarpm-basic-info.png" /&gt;&lt;/p&gt;
&lt;p&gt;Then there is a tab about version information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Table with gem versions across supported Fedora versions (rawhide, 21, 20)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Versions" src="http://axilleas.me/images/isitfedoraruby-fedorarpm-versions.png" /&gt;&lt;/p&gt;
&lt;p&gt;Another important tab is a list with a packages's dependencies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One table with dependencies with column whether they are runtime/development deps&lt;/li&gt;
&lt;li&gt;One table with dependents packages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Dependencies" src="http://axilleas.me/images/isitfedoraruby-fedorarpm-deps.png" /&gt;&lt;/p&gt;
&lt;p&gt;The bugs tab depicts all of package's open bugs for Fedora in a table.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bugs" src="http://axilleas.me/images/isitfedoraruby-fedorarpm-bugs.png" /&gt;&lt;/p&gt;
&lt;p&gt;And lastly koji builds for only the supported Fedora versions.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Builds" src="http://axilleas.me/images/isitfedoraruby-fedorarpm-builds.png" /&gt;&lt;/p&gt;
&lt;h2 id="rubygems-show-page"&gt;rubygems show page&lt;/h2&gt;
&lt;p&gt;The description is now on top of the page. Instead of one column, the new look
has two columns, one for basic info and one for the depdendencies table.&lt;/p&gt;
&lt;p&gt;Compare rake:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Before  : &lt;a href="http://www.isitfedoraruby.com/rubygems/rake"&gt;http://www.isitfedoraruby.com/rubygems/rake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;After   : &lt;a href="http://fedoraruby.axilleas.me/rubygems/rake"&gt;http://fedoraruby.axilleas.me/rubygems/rake&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="owner-page"&gt;owner page&lt;/h2&gt;
&lt;p&gt;I added some info on top of the page about the number of the packages a user owns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Total&lt;/li&gt;
&lt;li&gt;Up to date&lt;/li&gt;
&lt;li&gt;Outdated&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The table that has an owner's packages is also highlighted to depict outdated
and up to date packages.&lt;/p&gt;
&lt;p&gt;Here's an embarassing screenshot which reminds me I have to update my packages...&lt;/p&gt;
&lt;p&gt;&lt;img alt="Owner page" src="http://axilleas.me/images/isitfedoraruby-owner-page.png" /&gt;&lt;/p&gt;
&lt;h2 id="navigation-bar"&gt;Navigation bar&lt;/h2&gt;
&lt;p&gt;The navigation bar was a PITA to configure and make as responsive as possible.
There were a lot of bits and pieces needed to fit together, here are some of
them.&lt;/p&gt;
&lt;h3 id="active-links"&gt;Active links&lt;/h3&gt;
&lt;p&gt;I used a helper method which I found in this &lt;a href="http://stackoverflow.com/a/17482101/2137281" title="Dynamically add active class to bootstrap li in Rails"&gt;so answer&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/axilleas/isitfedoraruby/blob/master/app/helpers/application_helper.rb#L8"&gt;Helper method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/axilleas/isitfedoraruby/blob/master/app/views/layouts/_header.html.haml#L14"&gt;View implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="navbar-header"&gt;Navbar header&lt;/h3&gt;
&lt;p&gt;I used the same colors of &lt;a href="https://admin.fedoraproject.org/pkgdb," title="Fedora Package Database"&gt;Fedora pkgdb&lt;/a&gt;. With the help of a firefox
extension named &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/colorpicker/" title="Colorpicker firefox extension"&gt;colorpicker&lt;/a&gt; and &lt;a href="http://twbscolor.smarchal.com/"&gt;http://twbscolor.smarchal.com/&lt;/a&gt; I gave
the navbar the color it has now. twbscolor is a cool site that extracts your
chosen color even in scss, &lt;a href="https://github.com/axilleas/isitfedoraruby/blob/master/app/assets/stylesheets/custom.css.scss#L33"&gt;which I used&lt;/a&gt; along with some minor
tweaks.&lt;/p&gt;
&lt;h3 id="dropdown-menu"&gt;Dropdown menu&lt;/h3&gt;
&lt;p&gt;In responsive mode there is a dropdown menu. That requires some javascript and
the steps are:&lt;/p&gt;
&lt;p&gt;1.Add &lt;code&gt;*= require bootstrap&lt;/code&gt; in &lt;code&gt;app/assets/stylesheets/application.css&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2.Add &lt;code&gt;//= require bootstrap&lt;/code&gt; in &lt;code&gt;app/assets/javascripts/application.js&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3.Add in &lt;code&gt;app/assets/javascripts/application.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#header-collapse&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;.collapse&lt;span class="o"&gt;({&lt;/span&gt;
  toggle: &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="o"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4.Add bootstrap classes to header view:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nf"&gt;%header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;navbar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;navbar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;navbar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;fixed&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;navbar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt;
      &lt;span class="nf"&gt;%button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;navbar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;collapse&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;#header&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;collapse&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="nf"&gt;%span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Toggle&lt;/span&gt; &lt;span class="n"&gt;navigation&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="nf"&gt;%span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;
        &lt;span class="nf"&gt;%span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;
        &lt;span class="nf"&gt;%span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;
        &lt;span class="nf"&gt;%span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;
      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;FedoraRuby&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;navbar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;brand&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

    &lt;span class="nf"&gt;%nav&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collapse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;navbar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;collapse&lt;/span&gt;&lt;span class="cp"&gt;#header&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;collapse&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;navigation&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nf"&gt;%ul&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;navbar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;nav&lt;/span&gt;
        &lt;span class="nf"&gt;%li&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;is_active&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root_path&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Home&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;root_path&lt;/span&gt;
        &lt;span class="nf"&gt;%li&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;is_active&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rubygems_path&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Ruby&lt;/span&gt; &lt;span class="n"&gt;Gems&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;rubygems_path&lt;/span&gt;
        &lt;span class="nf"&gt;%li&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;is_active&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fedorarpms_path&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Fedora&lt;/span&gt; &lt;span class="n"&gt;Rpms&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;fedorarpms_path&lt;/span&gt;
        &lt;span class="nf"&gt;%li&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;is_active&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;about_path&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;About&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;about_path&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="search-field"&gt;Search field&lt;/h3&gt;
&lt;p&gt;I wanted the search field to be together with the search button. In bootstrap
this is accomplished with &lt;a href="http://getbootstrap.com/components/#input-groups-buttons"&gt;input-group-buttons&lt;/a&gt;. The final code was:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;%ul.nav.navbar-nav.navbar-right
  %li
    &lt;span class="o"&gt;=&lt;/span&gt; form_tag&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; :controller &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="s1"&gt;&amp;#39;searches&amp;#39;&lt;/span&gt;, :action &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="s1"&gt;&amp;#39;redirect&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;,
    :class &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="s1"&gt;&amp;#39;navbar-form&amp;#39;&lt;/span&gt;, :method &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="s1"&gt;&amp;#39;post&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      .input-group
        &lt;span class="o"&gt;=&lt;/span&gt; text_field_tag :search, params&lt;span class="o"&gt;[&lt;/span&gt;:search&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
            class: &lt;span class="s1"&gt;&amp;#39;search-query form-control&amp;#39;&lt;/span&gt;,
            placeholder: &lt;span class="s1"&gt;&amp;#39;Search&amp;#39;&lt;/span&gt;
        %span.input-group-btn
          &lt;span class="o"&gt;=&lt;/span&gt; button_tag raw&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;span class=&amp;quot;glyphicon glyphicon-search&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, name: nil, class: &lt;span class="s1"&gt;&amp;#39;btn btn-default&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Instead for a search button with text, I used an icon.&lt;/p&gt;
&lt;p&gt;There was also another problem regarding responsiveness. In different page sizes
the header looked ugly and the search bar was getting under the menu.&lt;/p&gt;
&lt;p&gt;I fixed it by adding a media query in &lt;code&gt;custom.css.scss&lt;/code&gt; that disappears the
logo in certain widths.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;@media (min-width: 768px) and (max-width: 993px) {
  .navbar-brand {
    display: none
  }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here are before/after screenshots to better understand it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Before" src="http://axilleas.me/images/isitfedoraruby-search-before.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="After" src="http://axilleas.me/images/isitfedoraruby-search-after.png" /&gt;&lt;/p&gt;
&lt;h2 id="responsive-design"&gt;Responsive design&lt;/h2&gt;
&lt;p&gt;Bootstrap comes with responsiveness by default. In order to activate it you have
to add a viewport meta tag in the head of your html, so in
&lt;code&gt;app/views/layouts/application.html.haml&lt;/code&gt; add:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;%meta&lt;span class="o"&gt;{&lt;/span&gt; :content &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="s2"&gt;&amp;quot;width=device-width, initial-scale=1, maximum-scale=1&amp;quot;&lt;/span&gt;, :name &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="s2"&gt;&amp;quot;viewport&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See full &lt;a href="https://github.com/axilleas/isitfedoraruby/blob/master/app/views/layouts/application.html.haml"&gt;application.html.haml&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;It sure was fun and I learned a lot during the process of searching and fixing
stuff :)&lt;/p&gt;</summary><category term="fedora"></category><category term="gsoc"></category><category term="ruby"></category><category term="rails"></category><category term="webdev"></category><category term="isitfedoraruby"></category></entry><entry><title>Custom GitLab login page</title><link href="http://axilleas.me/en/blog/2014/custom-gitlab-login-page" rel="alternate"></link><updated>2014-07-28T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.me,2014-07-28:en/blog/2014/custom-gitlab-login-page</id><summary type="html">&lt;p&gt;With the &lt;a href="https://about.gitlab.com/2014/07/22/gitlab-7-dot-1-released/" title="Blog post: GitLab 7.1 released"&gt;release of GitLab 7.1&lt;/a&gt;, the login page now looks like the
default Enterprise Edition. Although in EE customizing the page should be
easier to configure, we can do the same with Community Edition following
some simple steps. If you are familiar with &lt;a href="http://haml.info/docs/yardoc/file.REFERENCE.html" title="haml yardoc files"&gt;haml&lt;/a&gt; and &lt;a href="http://getbootstrap.com" title="Bootstrap framework"&gt;bootstrap&lt;/a&gt;
this should be fairly easy for you. Again, prerequisite is to have at least
GitLab 7.1. You can see the final changes in this &lt;a href="https://github.com/axilleas/gitlabhq/commit/953a8bc25f1cb5366026e6489c2716d0db69265c"&gt;commit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is a before/after screenshot that we will gradually change.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Before" src="http://axilleas.me/images/gitlab_custom_login_before.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="After" src="http://axilleas.me/images/gitlab_custom_login_after.png" /&gt;&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#introductory-steps"&gt;Introductory steps&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#haml-identation"&gt;haml identation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#git-branch"&gt;git branch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#change-brand-logo"&gt;Change brand logo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#change-text"&gt;Change text&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#brand-title"&gt;Brand title&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#body-description"&gt;Body description&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#change-footer-links"&gt;Change footer links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#change-font"&gt;Change font&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#commit-changes"&gt;Commit changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#updating-gitlab"&gt;Updating GitLab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reverting-changes"&gt;Reverting changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-about-omnibus"&gt;What about omnibus?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="introductory-steps"&gt;Introductory steps&lt;/h2&gt;
&lt;h3 id="haml-identation"&gt;haml identation&lt;/h3&gt;
&lt;p&gt;It is important to use an editor that has set a tab to two spaces.
Haml depends on indentation so any mistake will yield errors. If you see
any 500 errors, it means something went wrong. Either check the unicorn logs
or better, run &lt;code&gt;git diff&lt;/code&gt; to see if there are any indentation errors.&lt;/p&gt;
&lt;p&gt;If you are using vim, create/open &lt;code&gt;/home/git/.vimrc&lt;/code&gt; and place the following
lines:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;set tabstop=2
set shiftwidth=2
set expandtab
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That will ensure proper indentation handling.&lt;/p&gt;
&lt;h3 id="git-branch"&gt;git branch&lt;/h3&gt;
&lt;p&gt;In order to have more seamless future updates, let's create a separate git
branch:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;su - git
&lt;span class="nb"&gt;cd&lt;/span&gt; /home/git/gitlab/
git checkout -b custom_login_page
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All changes we make from now on, will be on that branch without creating
any mess in future updates. Read below on how to update.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The main file we need to change is &lt;code&gt;app/views/layouts/devise.html.haml&lt;/code&gt;,
relative to where GitLab is installed.&lt;/p&gt;
&lt;h2 id="change-brand-logo"&gt;Change brand logo&lt;/h2&gt;
&lt;p&gt;Choose the image you want to appear in the login page and place it in
&lt;code&gt;/home/git/gitlab/app/assets/images/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, open &lt;code&gt;app/views/layouts/devise.html.haml&lt;/code&gt; with an editor and change
&lt;a href="https://gitlab.com/gitlab-org/gitlab-ce/blob/master/app/views/layouts/devise.html.haml#L22"&gt;line 22&lt;/a&gt; replacing &lt;code&gt;brand_logo.png&lt;/code&gt; with your image name including
its extension.&lt;/p&gt;
&lt;p&gt;Since we alter the production server, remember to recompile the assets so
that the &lt;a href="http://guides.rubyonrails.org/asset_pipeline.html" title="Rails asset pipeline"&gt;Rails asset pipeline&lt;/a&gt; picks the new image (do that every
time you put a new file or change something in &lt;code&gt;app/assets/&lt;/code&gt;):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /home/git/gitlab/
sudo -u git &lt;span class="nv"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rake assets:precompile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, restart the GitLab service to see the changes.&lt;/p&gt;
&lt;h2 id="change-text"&gt;Change text&lt;/h2&gt;
&lt;p&gt;Apart from the logo, there is a lot more we can change. Let's try changing
the text.&lt;/p&gt;
&lt;h3 id="brand-title"&gt;Brand title&lt;/h3&gt;
&lt;p&gt;In order to change the text reading &lt;em&gt;GitLab Community Edition&lt;/em&gt;, open
&lt;code&gt;devise.html.haml&lt;/code&gt; and change &lt;code&gt;%h1= brand_title&lt;/code&gt; in line 9 into
&lt;code&gt;%h1 My custom brand title&lt;/code&gt;. Here, we removed the equal sign because it
is used by haml to evaluate and print ruby code (&lt;code&gt;brand_title&lt;/code&gt; is a helper
method).&lt;/p&gt;
&lt;p&gt;If you want an image instead, you can replace &lt;code&gt;%h1= brand_title&lt;/code&gt; with
&lt;code&gt;= image_tag 'my_banner.png'&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="body-description"&gt;Body description&lt;/h3&gt;
&lt;p&gt;As you'd imagine, changing the body headline would require to replace
&lt;code&gt;%h2 Open source software to collaborate on code&lt;/code&gt; with our own text, or
even remove it completely.&lt;/p&gt;
&lt;p&gt;The main body can be changed by altering the text that lies below &lt;code&gt;%p.lead&lt;/code&gt;.
Remember to indent correctly.&lt;/p&gt;
&lt;p&gt;The text can also contain links. Place each link in its own line.&lt;/p&gt;
&lt;p&gt;An example would be:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;Accounts are temporarily created manually, you can ask one in our
= link_to &amp;quot;forum discussion&amp;quot;, &amp;quot;https://forum.example.com/gitlab-reg&amp;quot;
You can find more info in the
= link_to &amp;quot;Wiki.&amp;quot;, &amp;quot;https://example.com/wiki/index.php/GitLab&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A link can also have a &lt;code&gt;target = "_blank"&lt;/code&gt; to open in a new window.
The &lt;a href="http://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html#method-i-link_to" title="link_to definition"&gt;format&lt;/a&gt; is:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;= link_to &amp;quot;text&amp;quot;, &amp;quot;http://example.com&amp;quot;, target: &amp;quot;blank&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="change-footer-links"&gt;Change footer links&lt;/h2&gt;
&lt;p&gt;Footer links are in &lt;a href="https://gitlab.com/gitlab-org/gitlab-ce/blob/master/app/views/layouts/devise.html.haml#L35"&gt;line 35&lt;/a&gt;. Just change their content or add new
ones like we talked above.&lt;/p&gt;
&lt;h2 id="change-font"&gt;Change font&lt;/h2&gt;
&lt;p&gt;The text I used was in Greek, so it looked aweful since the default font
is &lt;em&gt;Helvetica Neue&lt;/em&gt;. I decided to change it and use a webfont that supports
my language. I went with &lt;em&gt;Open Sans&lt;/em&gt; from &lt;a href="https://www.google.com/fonts"&gt;https://www.google.com/fonts&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, there are 3 changes we need to do:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create our custom css file which imports the font and sets the classes&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;devise.html.haml&lt;/code&gt; and include the new css classes.&lt;/li&gt;
&lt;li&gt;Include our custom css in &lt;code&gt;application.scss&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For the first step I created &lt;code&gt;app/assets/stylesheets/custom_login.scss&lt;/code&gt;
with contents:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@import&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;googleapis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="n"&gt;family&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;Sans&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;latin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;greek&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Open Sans&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sans&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here I used &lt;a href="http://sass-lang.com/guide"&gt;sass&lt;/a&gt;. These are nested values that will be picked by html.&lt;/p&gt;
&lt;p&gt;The second step is to change &lt;code&gt;devise.html.haml&lt;/code&gt; and include the new
&lt;code&gt;custom-login&lt;/code&gt; css class. There were 2 places where I needed to do that:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;- .brand_text.hidden-xs
+ .brand_text.hidden-xs.custom-login

- %p.lead
+ %p.lead.custom-login
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Third step is to include the custom css in &lt;code&gt;application.scss&lt;/code&gt;. I opened
&lt;code&gt;app/assets/stylesheets/application.scss&lt;/code&gt; and appended at the very end of
the file the following:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;* Styles for custom login page&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="cp"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;custom_login.scss&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, in order for the new css to get included in the asset pipeline I
precompiled the assets one more time:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /home/git/gitlab/
sudo -u git &lt;span class="nv"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rake assets:precompile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And while I was trying to precompile the assets after adding my custom css,
it failed to do so because of a missing semicolon in &lt;code&gt;application.scss&lt;/code&gt;.
I immediately opened a &lt;a href="https://gitlab.com/gitlab-org/gitlab-ce/merge_requests/157"&gt;Merge Request&lt;/a&gt;, so either wait for it to get
merged or add it yourself for now. You got to love open source :)&lt;/p&gt;
&lt;p&gt;Screenshots of before/after font change. You can see that before the changes
Greek and English words are using different fonts.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Before font change" src="http://axilleas.me/images/gitlab_custom_login_prefont.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="After font change" src="http://axilleas.me/images/gitlab_custom_login_afterfont.png" /&gt;&lt;/p&gt;
&lt;h2 id="commit-changes"&gt;Commit changes&lt;/h2&gt;
&lt;p&gt;The login page should now work correctly providing all the needed info for
our users. It's time to commit our changes. Check the diff with &lt;code&gt;git diff&lt;/code&gt;
one more time, and make sure you are on the right branch with &lt;code&gt;git branch&lt;/code&gt;.
It should show &lt;code&gt;* custom_login_page&lt;/code&gt;. Add and commit the changed files:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;git add app/
git commit -m &amp;#39;Custom login page.&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="updating-gitlab"&gt;Updating GitLab&lt;/h2&gt;
&lt;p&gt;The trickiest part is to maintain the code through the updates and avoid as
many confilcts as possible.&lt;/p&gt;
&lt;p&gt;Before each update, these are the basic steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Stop gitlab service&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;git fetch --all&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;git branch 7-1-stable origin/7-1-stable&lt;/code&gt; (replace with appropriate version)&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;git rebase 7-1-stable custom_login&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Follow the rest of instructions (db:migrate, assets:precompile, etc.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The trick here is rebase. This git command will replay our changes over the
new branch we fetched from upstream. If there are no conflicts, the custom
login changes will remain. Otherwise, git will inform you and then you'd
have to first resolve any issues before rebasing.&lt;/p&gt;
&lt;h2 id="reverting-changes"&gt;Reverting changes&lt;/h2&gt;
&lt;p&gt;In order to revert to the original login page, it's as simple as changing
branches and restarting the GitLab service.&lt;/p&gt;
&lt;h2 id="what-about-omnibus"&gt;What about omnibus?&lt;/h2&gt;
&lt;p&gt;If you have installed GitLab through the omnibus packages, the GitLab root
path will be &lt;code&gt;/opt/gitlab/embedded/service/gitlab-rails/&lt;/code&gt; so make any
changes relative to that path. I haven't tested it yet though, so I don't
know whether any changes get rewritten with package updates (probably that
is the case).&lt;/p&gt;
&lt;p&gt;On the other hand, if you work at a company that uses omnibus, consider
going for the Enterprise Edition where this process would be more easier
and at the same time you support the future development of GitLab :)&lt;/p&gt;</summary><category term="ruby"></category><category term="rails"></category><category term="webdev"></category><category term="gitlab"></category><category term="haml"></category></entry><entry><title>isitfedoraruby gsoc midterm sum up</title><link href="http://axilleas.me/en/blog/2014/isitfedoraruby-gsoc-midterm-sum-up" rel="alternate"></link><updated>2014-07-13T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.me,2014-07-13:en/blog/2014/isitfedoraruby-gsoc-midterm-sum-up</id><summary type="html">&lt;p&gt;This sums up my past month involvement with the project. A lot of reading in
between...&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#changelog"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#railsruby-style-guide"&gt;Rails/Ruby style guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tests"&gt;Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bugs-fixed"&gt;Bugs fixed&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#wrong-owners"&gt;wrong owners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dependencies-shown-twice"&gt;dependencies shown twice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#duplicate-homepage-and-source-uri"&gt;duplicate homepage and source uri&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#enhancements"&gt;Enhancements&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#show-more-info-in-fedorarpm-show-page"&gt;Show more info in fedorarpm show page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rake-tasks"&gt;Rake tasks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="changelog"&gt;Changelog&lt;/h2&gt;
&lt;p&gt;I added a changelog so that the changes are easily seen, so here it is (this week is v 0.9.1):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Refactor&lt;/span&gt; &lt;span class="n"&gt;rake&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Source&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fedorarpms&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;gitweb&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;integration&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Retrieve&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="n"&gt;Pkgwat&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Show&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="n"&gt;packager&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fedorarpms&lt;/span&gt;&lt;span class="c"&gt;#show&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Show&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fedorarpms&lt;/span&gt;&lt;span class="c"&gt;#show&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Show&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fedorarpms&lt;/span&gt;&lt;span class="c"&gt;#show&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt; &lt;span class="n"&gt;rawhide&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="n"&gt;instead&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;scrapping&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Retrieve&lt;/span&gt; &lt;span class="n"&gt;homepage&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="n"&gt;Pkgwat&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Fix&lt;/span&gt; &lt;span class="n"&gt;duplication&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fedorarpms&lt;/span&gt;&lt;span class="c"&gt;#show&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Do&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;rubygems&lt;/span&gt;&lt;span class="c"&gt;#show if it is the same as the homepage&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Do&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fedorarpms&lt;/span&gt;&lt;span class="c"&gt;#show if it is the same as the homepage&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;versions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fedorarpm&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;New&lt;/span&gt; &lt;span class="n"&gt;rake&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;versions&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;dependencies&lt;/span&gt; &lt;span class="nn"&gt;and&lt;/span&gt; &lt;span class="nn"&gt;commits&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Show&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="n"&gt;packager&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fedorarpms&lt;/span&gt;&lt;span class="c"&gt;#show&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Show&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fedorarpms&lt;/span&gt;&lt;span class="c"&gt;#show&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Show&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fedorarpms&lt;/span&gt;&lt;span class="c"&gt;#show&lt;/span&gt;

&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Remove&lt;/span&gt; &lt;span class="n"&gt;unused&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Remove&lt;/span&gt; &lt;span class="n"&gt;HistoricalGems&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Remove&lt;/span&gt; &lt;span class="n"&gt;Build&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Remove&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt; &lt;span class="n"&gt;related&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="n"&gt;downloading&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Remove&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="n"&gt;helpers&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Cleaned&lt;/span&gt; &lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;removed&lt;/span&gt; &lt;span class="n"&gt;unused&lt;/span&gt; &lt;span class="n"&gt;ones&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Conform&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="n"&gt;guide&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Maintainer&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;fas_name&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Automatically&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt; &lt;span class="n"&gt;versions&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;Fedora&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;querying&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;pkgdb&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Addded&lt;/span&gt; &lt;span class="n"&gt;rake&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt; &lt;span class="n"&gt;rawhide&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="n"&gt;locally&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Show&lt;/span&gt; &lt;span class="n"&gt;koji&lt;/span&gt; &lt;span class="n"&gt;builds&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;supported&lt;/span&gt; &lt;span class="nn"&gt;Fedora&lt;/span&gt; &lt;span class="nn"&gt;versions&lt;/span&gt; &lt;span class="nn"&gt;only&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Bugs&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Query&lt;/span&gt; &lt;span class="n"&gt;bugs&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;pkgwat&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Drop&lt;/span&gt; &lt;span class="n"&gt;is_open&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bugs&lt;/span&gt; &lt;span class="nn"&gt;table&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Show&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt; &lt;span class="n"&gt;Fedora&lt;/span&gt; &lt;span class="n"&gt;bugs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exclude&lt;/span&gt; &lt;span class="n"&gt;EPEL&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Hover&lt;/span&gt; &lt;span class="n"&gt;over&lt;/span&gt; &lt;span class="n"&gt;links&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;see&lt;/span&gt; &lt;span class="n"&gt;full&lt;/span&gt; &lt;span class="n"&gt;titles&lt;/span&gt; &lt;span class="n"&gt;when&lt;/span&gt; &lt;span class="n"&gt;truncated&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Rename&lt;/span&gt; &lt;span class="n"&gt;builds&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;koji_builds&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Added&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Unit&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Added&lt;/span&gt; &lt;span class="n"&gt;Github&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;travis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ci&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;hound&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ci&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;coveralls&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;gemnasium&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Development&lt;/span&gt; &lt;span class="n"&gt;tools&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;shoulda&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;matchers&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;rspec&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;capybara&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;rack&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mini&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;profiler&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;rubocop&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;factory_girl&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;annotate&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;railsroady&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should notice some version numbers. That's also a new addition and every
week I will deploy a new version, so eventually at some point in the end of the
summer, version 1.0.0 will be released.&lt;/p&gt;
&lt;p&gt;Here are some nice stats from git log.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/axilleas/isitfedoraruby/graphs/contributors"&gt;Git stats&lt;/a&gt;: 91 commits / 4,662 ++ / 2,874 --&lt;/p&gt;
&lt;h2 id="railsruby-style-guide"&gt;Rails/Ruby style guide&lt;/h2&gt;
&lt;p&gt;Fixed arround 500 warnings that rubocop yielded.&lt;/p&gt;
&lt;h2 id="tests"&gt;Tests&lt;/h2&gt;
&lt;p&gt;Added: unit tests for models.&lt;/p&gt;
&lt;p&gt;Missing:
A bunch of code still needs testing, rspec is not enough to properly test api
calls. I will use &lt;a href="https://github.com/vcr/vcr"&gt;vcr&lt;/a&gt; and &lt;a href="https://github.com/bblimke/webmock"&gt;webmock&lt;/a&gt; in the future to cover these tests.
Integration tests are also not complete yet.&lt;/p&gt;
&lt;h2 id="bugs-fixed"&gt;Bugs fixed&lt;/h2&gt;
&lt;h3 id="wrong-owners"&gt;wrong owners&lt;/h3&gt;
&lt;p&gt;Previously it parsed the spec file and checked the first email in the
changelog. Co-maintainers have also the ability to build a package and in
that case it shows wrong info. Another case is where a user changes their
email they are taken into account twice, so when hitting &lt;code&gt;/by_owner&lt;/code&gt; not all
packages are shown. I was hit by this bug.&lt;/p&gt;
&lt;p&gt;It now fetches the owner's fas name using &lt;a href="https://github.com/daviddavis/pkgwat"&gt;pkgwat&lt;/a&gt; which I use to sort
by owner.&lt;/p&gt;
&lt;h3 id="dependencies-shown-twice"&gt;dependencies shown twice&lt;/h3&gt;
&lt;p&gt;The current implementation scraps the SPEC file of a rubygem via the &lt;a href="http://pkgs.fedoraproject.org/cgit"&gt;gitweb&lt;/a&gt;
and then stores the dependencies. The problem is that when one uses gem2rpm,
&lt;code&gt;~&amp;gt;&lt;/code&gt; is expanded to &lt;code&gt;&amp;gt;=&lt;/code&gt; and &lt;code&gt;&amp;lt;=&lt;/code&gt;, which leads to list some dependencies twice.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Double dependencies" src="http://axilleas.me/images/fedoraruby_duplicate_entries.png" /&gt;&lt;/p&gt;
&lt;p&gt;The fix was quite easy. Here is the controller that is in charge for the show
action:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
    &lt;span class="vi"&gt;@name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="vi"&gt;@rpm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FedoraRpm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_by_name!&lt;/span&gt; &lt;span class="vi"&gt;@name&lt;/span&gt;
    &lt;span class="vi"&gt;@page_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@rpm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
    &lt;span class="vi"&gt;@dependencies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@rpm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dependency_packages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniq&lt;/span&gt;
    &lt;span class="vi"&gt;@dependents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@rpm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dependent_packages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniq&lt;/span&gt;
    &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;RecordNotFound&lt;/span&gt;
      &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="ss"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;not_found&amp;#39;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All I did was to add &lt;code&gt;uniq&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="duplicate-homepage-and-source-uri"&gt;duplicate homepage and source uri&lt;/h3&gt;
&lt;p&gt;In a gem page you could see this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Double homepage" src="http://axilleas.me/images/fedoraruby_duplicate_homepage_gem.png" /&gt;&lt;/p&gt;
&lt;p&gt;The information is taken from the &lt;a href="https://rubygems.org"&gt;https://rubygems.org&lt;/a&gt; api. Some have the
same page for both gem's homepage and source uri. The secret was lying in the
[view][].&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;
  &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;h3&lt;/span&gt; &lt;span class="no"&gt;Gem&lt;/span&gt; &lt;span class="no"&gt;Information&lt;/span&gt;
  &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nb"&gt;p&lt;/span&gt;
    &lt;span class="ss"&gt;Homepage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="vi"&gt;@gem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;homepage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@gem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;homepage&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="vi"&gt;@gem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source_uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blank?&lt;/span&gt;
    &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nb"&gt;p&lt;/span&gt;
      &lt;span class="no"&gt;Source&lt;/span&gt; &lt;span class="ss"&gt;Code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="vi"&gt;@gem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source_uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@gem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source_uri&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All I did was to change this from this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="vi"&gt;@gem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source_uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blank?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="vi"&gt;@gem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source_uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blank?&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="vi"&gt;@gem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source_uri&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="vi"&gt;@gem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;homepage&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So now it skips showing the homepage if it is the same as the source uri.&lt;/p&gt;
&lt;h2 id="enhancements"&gt;Enhancements&lt;/h2&gt;
&lt;h3 id="show-more-info-in-fedorarpm-show-page"&gt;Show more info in fedorarpm show page&lt;/h3&gt;
&lt;p&gt;I added some more information at the fedorarpm page. Now it shows, last packager,
last commit message and last commit date. Useful if something is broken with
the latest release and you want to blame someone :p&lt;/p&gt;
&lt;p&gt;And since many times a package has many co-maintainers you get to see the real
last packager.&lt;/p&gt;
&lt;p&gt;Here's a shot of the page as it is now:&lt;/p&gt;
&lt;p&gt;&lt;img alt="More info" src="http://axilleas.me/images/fedoraruby_moreinfo.png" /&gt;&lt;/p&gt;
&lt;h3 id="rake-tasks"&gt;Rake tasks&lt;/h3&gt;
&lt;p&gt;As I have made some &lt;a href="https://github.com/axilleas/isitfedoraruby/pull/54"&gt;major refactoring&lt;/a&gt; in the fedorarpms model, I split
many methods to their own namespace. For example, previously there was a single
method for importing the versions and dependencies, now they are two separate.&lt;/p&gt;
&lt;p&gt;As a consequense, I added rake tasks that could be invoked for a single package.
Also the namespace is now more descriptive.&lt;/p&gt;
&lt;p&gt;The tasks are for now the following:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;rake fedora:gem:import:all_names               # FEDORA | Import a list of names of ALL gems from rubygems.org
rake fedora:gem:import:metadata[number,delay]  # FEDORA | Import gems metadata from rubygems.org
rake fedora:gem:update:gems[age]               # FEDORA | Update gems metadata from rubygems.org
rake fedora:rawhide:create                     # FEDORA | Create file containing Fedora rawhide(development) version
rake fedora:rawhide:version                    # FEDORA | Get Fedora rawhide(development) version
rake fedora:rpm:import:all[number,delay]       # FEDORA | Import ALL rpm metadata (time consuming)
rake fedora:rpm:import:bugs[rpm_name]          # FEDORA | Import bugs of a given rubygem package
rake fedora:rpm:import:commits[rpm_name]       # FEDORA | Import commits of a given rubygem package
rake fedora:rpm:import:deps[rpm_name]          # FEDORA | Import dependencies of a given rubygem package
rake fedora:rpm:import:gem[rpm_name]           # FEDORA | Import respective gem of a given rubygem package
rake fedora:rpm:import:koji_builds[rpm_name]   # FEDORA | Import koji builds of a given rubygem package
rake fedora:rpm:import:names                   # FEDORA | Import a list of names of all rubygems from apps.fedoraproject.org
rake fedora:rpm:import:versions[rpm_name]      # FEDORA | Import versions of a given rubygem package
rake fedora:rpm:update:oldest_rpms[number]     # FEDORA | Update oldest &amp;lt;n&amp;gt; rpms
rake fedora:rpm:update:rpms[age]               # FEDORA | Update rpms metadata
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That was it for now. For any changes be sure to check out the changelog regularly!&lt;/p&gt;</summary><category term="fedora"></category><category term="gsoc"></category><category term="ruby"></category><category term="rails"></category><category term="webdev"></category><category term="isitfedoraruby"></category></entry><entry><title>Rails development tools</title><link href="http://axilleas.me/en/blog/2014/ruby-on-rails-development-tools" rel="alternate"></link><updated>2014-07-01T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.me,2014-07-01:en/blog/2014/ruby-on-rails-development-tools</id><summary type="html">&lt;p&gt;During the past two months I have been reading constantly about Rails and
how I could get more productive when writing code and testing my apps.
There is a ton of information about those matters on the web and I'll try
to include as many articles as I could find useful to my knowledge building.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Disclaimer:&lt;/em&gt; This article is heavily inspired by Thoughtbot's
&lt;a href="https://learn.thoughtbot.com/products/2-vim-for-rails-developers" title="Vim for Rails Developers"&gt;Vim for Rails Developers&lt;/a&gt; which I stumbled upon during browsing the
screencasts of &lt;a href="https://codeschool.com" title="codeschool homepage"&gt;codeschool&lt;/a&gt;.&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#editor-of-choice-vim"&gt;Editor of choice (vim)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#vim-plugins"&gt;vim plugins&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#railsvim"&gt;rails.vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vim-snipmate"&gt;vim-snipmate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fugitivevim"&gt;fugitive.vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#terminal-multiplexer-tmux"&gt;Terminal multiplexer (tmux)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#development-stack"&gt;Development stack&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#jazz_hands"&gt;jazz_hands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubocop"&gt;rubocop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#railroady"&gt;railroady&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#annotate"&gt;annotate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#testing-stack"&gt;Testing stack&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#rspec"&gt;rspec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#capybara"&gt;capybara&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#guard"&gt;guard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#other-super-useful-tools"&gt;Other super useful tools&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#ctags"&gt;ctags&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#configuration"&gt;Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#usage"&gt;Usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#secret-power"&gt;Secret power&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#ack"&gt;ack&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#alternative-ag"&gt;alternative (ag)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="editor-of-choice-vim"&gt;Editor of choice (vim)&lt;/h1&gt;
&lt;p&gt;When you work from the command line and you use linux, your editor
preference comes down to two choices: vim and emacs. I started with vim
some time ago so I'll stick with it.&lt;/p&gt;
&lt;p&gt;If you are new to vim read this &lt;a href="http://www.viemu.com/vi-vim-cheat-sheet.gif" title="vim cheatsheet"&gt;cheatsheet&lt;/a&gt; to learn the basical
commands.&lt;/p&gt;
&lt;h2 id="vim-plugins"&gt;vim plugins&lt;/h2&gt;
&lt;p&gt;Start by installing &lt;a href="https://github.com/tpope/vim-pathogen" title="pathogen vim plugin"&gt;pathogen.vim&lt;/a&gt;, a vim plugin manager:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;mkdir -p ~/.vim/autoload ~/.vim/bundle &amp;amp;&amp;amp; \
curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then add this to your vimrc:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;execute pathogen#infect()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From now on, every plugin that is compatible with pathogen can be simply
installed by cloning its repo at &lt;code&gt;~/.vim/bundle&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;An alternative for pathogen is &lt;a href="https://github.com/gmarik/Vundle.vim" title="vundle vim plugin"&gt;vundle&lt;/a&gt;. Haven't used it but it
behaves similarly.&lt;/p&gt;
&lt;h3 id="railsvim"&gt;rails.vim&lt;/h3&gt;
&lt;p&gt;Probably the one most useful plugin when dealing with Rails projects.&lt;/p&gt;
&lt;p&gt;Install it with:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;git clone git://github.com/tpope/vim-rails.git ~/.vim/bundle/vim-rails
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Browsing through the app&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can use &lt;code&gt;:RController foos&lt;/code&gt; and it will take you straight
to the &lt;code&gt;app/controllers/foos_controller.rb&lt;/code&gt;. As you might guess, same
happens with &lt;code&gt;:RModel foo&lt;/code&gt;, etc. There is also tab completion so that
you can toggle between all models/controllers, etc.&lt;/p&gt;
&lt;p&gt;Another useful command is &lt;code&gt;:find&lt;/code&gt;. Invoking it with a name foo, it first
searches for a model named foo. Tab completion is also your friend.&lt;/p&gt;
&lt;p&gt;One other really cool feature is the go to file. Supposedly we have the
following model:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Blog&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;

  &lt;span class="n"&gt;has_many&lt;/span&gt; &lt;span class="ss"&gt;:articles&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Placing the cursor on the articles word and pressing &lt;code&gt;gf&lt;/code&gt; vim opens
the article model. After saving your changes you can go back to the blog
model by pressing &lt;code&gt;Ctrl-o&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Run your tests through vim&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Running test is also a matter of a command. Say you are editing a specific
spec/test file. All you have to do is run &lt;code&gt;:Rake&lt;/code&gt; and the tests for that
particular file will be ran, without leaving your favorite editor :)&lt;/p&gt;
&lt;p&gt;The supported commands are a lot and your best bet is to invoke
&lt;code&gt;:help rails&lt;/code&gt; in vim and learn about them.&lt;/p&gt;
&lt;p&gt;Be sure to also check &lt;a href="https://github.com/tpope/vim-rails" title="vim-rails on github"&gt;vim-rails&lt;/a&gt; on github.&lt;/p&gt;
&lt;h3 id="vim-snipmate"&gt;vim-snipmate&lt;/h3&gt;
&lt;p&gt;SnipMate implements snippet features in Vim. A snippet is like a template,
reducing repetitive insertion of pieces of text. Snippets can contain
placeholders for modifying the text if necessary or interpolated code for
evaluation.&lt;/p&gt;
&lt;p&gt;Install it:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;cd ~/.vim/bundle
git clone https://github.com/tomtom/tlib_vim.git
git clone https://github.com/MarcWeber/vim-addon-mw-utils.git
git clone https://github.com/garbas/vim-snipmate.git
git clone https://github.com/honza/vim-snippets.git
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/honza/vim-snippets/blob/master/snippets/ruby.snippets" title="Ruby supported snippets"&gt;List of supported Ruby snippets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/honza/vim-snippets/blob/master/snippets/ruby.snippets#L598" title="Rails supported snippets"&gt;List of supported Rails snippets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Writing a method&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Reading the source code of snippets above let's see how we can create a
method. The snippet reads:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;snippet def
        def &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;method_name&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
                &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
        end
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, the snippet is named &lt;code&gt;def&lt;/code&gt; and in order to invoke it we must write
def and hit Tab. It then expands, placing the cursor in the highlited
&lt;code&gt;method_name&lt;/code&gt;. This is what it looks like:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;def method_name

end
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once you start typing, method_name gets replaced with what you type. When
you finish, hit Tab again to go to the method body.&lt;/p&gt;
&lt;p&gt;Now all you have to do is read the &lt;code&gt;ruby.snippet&lt;/code&gt; and find out what
snippets are supported.&lt;/p&gt;
&lt;h3 id="fugitivevim"&gt;fugitive.vim&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/tpope/vim-fugitive" title="vim-fugitive on github"&gt;vim-fugitive&lt;/a&gt; brings the power of git commands inside vim.&lt;/p&gt;
&lt;p&gt;Install it with:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;git clone git://github.com/tpope/vim-fugitive.git ~/.vim/bundle/vim-fugitive
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Check out the github page for a list of commands and some interesting
screencasts.&lt;/p&gt;
&lt;h1 id="terminal-multiplexer-tmux"&gt;Terminal multiplexer (tmux)&lt;/h1&gt;
&lt;p&gt;Again, here you have two options. &lt;code&gt;screen&lt;/code&gt; or &lt;code&gt;tmux&lt;/code&gt;. My first contact was
with screen but recently I decided to try tmux.&lt;/p&gt;
&lt;p&gt;I won't go into any details but I highly reccomend watching Chris Hunt's
presentation &lt;a href="https://www.youtube.com/watch?v=9jzWDr24UHQ" title="Chris Hunt - Impressive Ruby Productivity with Vim and Tmux - Ancient City Ruby 2013 "&gt;Impressive Ruby Productivity with Vim and Tmux&lt;/a&gt;.
It's an awesome talk.&lt;/p&gt;
&lt;h1 id="development-stack"&gt;Development stack&lt;/h1&gt;
&lt;p&gt;There is a great &lt;a href="http://www.codebeerstartups.com/2013/04/must-have-gems-for-development-machine-in-ruby-on-rails"&gt;article&lt;/a&gt; I stumbled upon yesterday about some must have gems
for development, some of which I haven't tested. Here is what I got so far.&lt;/p&gt;
&lt;h2 id="jazz_hands"&gt;jazz_hands&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/nixme/jazz_hands" title="jazz_hands on github"&gt;jazz_hands&lt;/a&gt; is basically a collection of gems that you get for free with
just one gem. It focuses on enhancing the rails console. It provides:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;- Pry for a powerful shell alternative to IRB.
- Awesome Print for stylish pretty print.
- Hirb for tabular collection output.
- Pry Rails for additional commands (show-routes, show-models, show-middleware) in the Rails console.
- Pry Doc to browse Ruby source, including C, directly from the console.
- Pry Git to teach the console about git. Diffs, blames, and commits on methods and classes, not just files.
- Pry Remote to connect remotely to a Pry console.
- Pry Debugger to turn the console into a simple debugger.
- Pry Stack Explorer to navigate the call stack and frames.
- Coolline and Coderay for syntax highlighting as you type. Optional. MRI 1.9.3/2.0.0 only
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again, visiting the github page, you will get all the info you want.
There is an open &lt;a href="https://github.com/nixme/jazz_hands/pull/26"&gt;issue&lt;/a&gt; and installation on ruby 2.1.2 is failing for now.
For the time being you can put the following in your Gemfile:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;gem &amp;#39;jazz_hands&amp;#39;, github: &amp;#39;nixme/jazz_hands&amp;#39;, branch: &amp;#39;bring-your-own-debugger&amp;#39;
gem &amp;#39;pry-byebug&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="rubocop"&gt;rubocop&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/bbatsov/rubocop"&gt;rubocop&lt;/a&gt; is a tool which checks if your code conforms to the
&lt;a href="https://github.com/bbatsov/ruby-style-guide" title="Ruby style guide"&gt;ruby&lt;/a&gt;/&lt;a href="https://github.com/bbatsov/rails-style-guide" title="Rails style guide"&gt;rails&lt;/a&gt; community guidelines.&lt;/p&gt;
&lt;p&gt;You can check the article I &lt;a href="http://axilleas.me/en/blog/2014/rubocop-to-the-rescue"&gt;wrote&lt;/a&gt;
where I explain how to set it up and running.&lt;/p&gt;
&lt;h2 id="railroady"&gt;railroady&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/preston/railroady" title="railroady gem"&gt;railroady&lt;/a&gt; is a tool that lets you visualize how the models and the
controllers of your app are structured. Instructions on how to install it are
on the github page. You can &lt;a href="https://gitlab.com/fedora-ruby/isitfedoraruby/raw/master/doc/models_complete.svg"&gt;check&lt;/a&gt; how it looks like on the
fedoraruby project I'm currently working on.&lt;/p&gt;
&lt;h2 id="annotate"&gt;annotate&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/ctran/annotate_models" title="annotate on github"&gt;annotate&lt;/a&gt; generates a schema of the model and places it on top of the model.
It can also place it on top of your rspec files and the factories. It looks
like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;# == Schema Information
#
# Table name: bugs
#
#  id            :integer          not null, primary key
#  name          :string(255)
#  bz_id         :string(255)
#  fedora_rpm_id :integer
#  is_review     :boolean
#  created_at    :datetime
#  updated_at    :datetime
#  last_updated  :string(255)
#  is_open       :boolean
#
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="testing-stack"&gt;Testing stack&lt;/h1&gt;
&lt;p&gt;There is a ton of useful tools out there and if you are new to rails
development you can easilly get lost. &lt;a href="http://words.steveklabnik.com/rails-has-two-default-stacks" title="Rails has Two Default Stacks"&gt;Rails has Two Default Stacks&lt;/a&gt; is
a nice read that sums it up. I will try to update this post as I find more
useful tools in my way.&lt;/p&gt;
&lt;h2 id="rspec"&gt;rspec&lt;/h2&gt;
&lt;p&gt;I am mostly in favor of rspec because of its descriptive language and the great
support by other complement testing tools.&lt;/p&gt;
&lt;h2 id="capybara"&gt;capybara&lt;/h2&gt;
&lt;p&gt;So, why capybara and not cucumber? I'm not an expert on neither of these tools
but from my understanding capybara is more focused on developers whereas
cucumber's human language mostly targets aplications where one talks to a
non-technical customer.&lt;/p&gt;
&lt;h2 id="guard"&gt;guard&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Guard watches files and runs a command after a file is modified. This allows
you to automatically run tests in the background, restart your development
server, reload the browser, and more.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It has nearly 200 plugins which provide different options as guard is not only
used for testing. The particular plugin for rspec is &lt;a href="https://github.com/guard/guard-rspec" title="guard-rspec on github"&gt;guard-rspec&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When you make the smallest change to a test and you hit save, &lt;a href="https://github.com/guard/guard" title="guard on github"&gt;guard&lt;/a&gt; will
run that particular test group again to see if it still passes.&lt;/p&gt;
&lt;p&gt;I tend to invoke guard with &lt;code&gt;guard -c&lt;/code&gt; which runs the tests in a clear console
every time.&lt;/p&gt;
&lt;p&gt;Read the &lt;a href="https://github.com/guard/guard/wiki" title="guard wiki page"&gt;guard wiki page&lt;/a&gt; which is comprehensive and also watch the
[guard railscast][] to better understand it.&lt;/p&gt;
&lt;h1 id="other-super-useful-tools"&gt;Other super useful tools&lt;/h1&gt;
&lt;h2 id="ctags"&gt;ctags&lt;/h2&gt;
&lt;p&gt;Quoting from &lt;a href="http://ctags.sourceforge.net/whatis.html" title="What is ctags?"&gt;What is ctags?&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ctags generates an index (or tag) file of language objects found in
source files that allows these items to be quickly and easily located
by a text editor or other utility.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are a bunch of different tools to create a tags file, but the most
common implementation is &lt;a href="http://ctags.sourceforge.net/" title="Exuberant ctags homepage"&gt;exuberant ctags&lt;/a&gt; which we will use.&lt;/p&gt;
&lt;p&gt;It supports 41 programming languages and a handful of editors.
directories&lt;/p&gt;
&lt;h3 id="installation"&gt;Installation&lt;/h3&gt;
&lt;p&gt;Install ctags via your package manager. It should be supported in all
major ditributions.&lt;/p&gt;
&lt;h3 id="configuration"&gt;Configuration&lt;/h3&gt;
&lt;p&gt;For a rails project, in your application root directory you can run:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;ctags -R --exclude=.git --exclude=log *
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This searches recursively all files in the current directory, excludes
the &lt;code&gt;.git&lt;/code&gt; and &lt;code&gt;log&lt;/code&gt; directories and creates a &lt;code&gt;tags&lt;/code&gt; file under current
dir. You may want to add it to &lt;code&gt;.gitignore&lt;/code&gt; by the way.&lt;/p&gt;
&lt;p&gt;Next, adding the following line to &lt;code&gt;~/.vimrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;set tags=./tags;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;sets the location of the tags file, which is relative to the current
directory.&lt;/p&gt;
&lt;p&gt;You can move the above options in &lt;code&gt;~/.ctags&lt;/code&gt;, so in our case this will
be:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;--recurse=yes
--tag-relative=yes
--exclude=.git
--exclude=log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So in future runs of ctags all you need to do is &lt;code&gt;ctags *&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;ctags doesn't autogenerate, so each time you write code that is tagable,
you have to run the command again. If you are working in a git repository
be sure to checkout Tim Pope's &lt;a href="http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html" title="Effortless Ctags with Git"&gt;Effortless Ctags with Git&lt;/a&gt;.
What this does is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Any new repositories you create or clone will be immediately indexed
with Ctags and set up to re-index every time you check out, commit,
merge, or rebase. Basically, you’ll never have to manually run Ctags
on a Git repository again.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="usage"&gt;Usage&lt;/h3&gt;
&lt;p&gt;Say we have a file containing hundrends of lines. Inside a method you
see the below definition:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;contain_multiple_methods&lt;/span&gt;
  &lt;span class="n"&gt;method_one&lt;/span&gt;
  &lt;span class="n"&gt;method_two&lt;/span&gt;
  &lt;span class="n"&gt;method_three&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While you could search for these methods, you can save a few keystrokes
by simply getting the cursor on the line of the method to search and in
vim normal mode press &lt;code&gt;Ctrl + ]&lt;/code&gt; (control and right square bracket).
This should get you where the method is. Go back to where you were by
pressing &lt;code&gt;Ctrl + t&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The usage of ctags isn't restricted only in the current file.
If a method in your file is inherited by another class, then searching
for it will jump in this particular file.&lt;/p&gt;
&lt;h3 id="secret-power"&gt;Secret power&lt;/h3&gt;
&lt;p&gt;Wouldn't it be cool if we could search for methods in the Rails source
code? Here is where the power of ctags really excels. All you have to do
is tell ctags to also tag the rails source code.&lt;/p&gt;
&lt;p&gt;First I cloned the rails repository into &lt;code&gt;vendor/rails&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;git clone https://github.com/rails/rails.git vendor/rails
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It should take less than a minute to download. You wouldn't want
the rails source code to be included in your git tree, so you simply
exclude &lt;code&gt;vendor/rails&lt;/code&gt; by adding it to &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Lastly, create again the tags with &lt;code&gt;ctags *&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now navigate with vim to one of your models that has for example the
association &lt;code&gt;has_many&lt;/code&gt;, place the cursor on it (or just on the same line)
and hit &lt;code&gt;Ctrl + ]&lt;/code&gt;. Pretty cool huh? In case you forgot, go back to where
you were with &lt;code&gt;Ctrl + t&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="ack"&gt;ack&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://beyondgrep.com/" title="ack homepage"&gt;ack&lt;/a&gt; is like grep but on steroids.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Designed for programmers with large heterogeneous trees of source code,
ack is written purely in portable Perl 5 and takes advantage of the
power of Perl's regular expressions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It supports multiple types which you can see by typong &lt;code&gt;ack --help-types&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Of course there is a &lt;a href="https://github.com/mileszs/ack.vim" title="ack vim plugin"&gt;vim plugin&lt;/a&gt;!&lt;/p&gt;
&lt;h3 id="alternative-ag"&gt;alternative (ag)&lt;/h3&gt;
&lt;p&gt;While reading the &lt;a href="http://beyondgrep.com/more-tools/" title="ack: more tools"&gt;more-tools&lt;/a&gt; page of ack I found out about &lt;a href="https://github.com/ggreer/the_silver_searcher" title="ag at github"&gt;ag&lt;/a&gt;,
also called the_silver_searcher. It is said to search code about 3–5×
faster than ack, is written in C and have some more enhancements than ack.
You may want to give this a try to. And as you have guessed there is also
an &lt;a href="https://github.com/rking/ag.vim" title="ag vim plugin"&gt;ag vim plugin&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;The editor of choice and the tools you use in web development play a great role
in one's productivity, so you have to choose wisely and spend some time to get
to know it. Personally, I learned a lot more these past days I was crafting
this post and I hope you got something out of it too :)&lt;/p&gt;</summary><category term="fedora"></category><category term="gsoc"></category><category term="ruby"></category><category term="rails"></category><category term="webdev"></category></entry><entry><title>Rubocop to the rescue!</title><link href="http://axilleas.me/en/blog/2014/rubocop-to-the-rescue" rel="alternate"></link><updated>2014-06-16T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.me,2014-06-16:en/blog/2014/rubocop-to-the-rescue</id><summary type="html">&lt;p&gt;&lt;em&gt;I decided to drop the GSoC related titles and focus on the things
that I work during the week. That means I'll probably blog more often :p&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This week I mostly focused on cleaning the code of &lt;a href="https://github.com/axilleas/isitfedoraruby" title="isitfedoraruby at github"&gt;fedoraruby&lt;/a&gt; and
conforming to the &lt;a href="https://github.com/bbatsov/ruby-style-guide" title="Ruby style guide"&gt;ruby&lt;/a&gt;/&lt;a href="https://github.com/bbatsov/rails-style-guide" title="Rails style guide"&gt;rails&lt;/a&gt; community
guidelines.&lt;/p&gt;
&lt;p&gt;The gem that helps you do that is &lt;a href="https://github.com/bbatsov/rubocop" title="rubocop at github"&gt;rubocop&lt;/a&gt; and is kind of the standard
method in the ruby world.&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubocop"&gt;RuboCop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#houndci"&gt;HoundCI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="rubocop"&gt;RuboCop&lt;/h1&gt;
&lt;p&gt;Rubocop refers to each check as a cop. There are a bunch and you can see
the supported ones by reading these [files][rubo-enabled].&lt;/p&gt;
&lt;p&gt;After installing rubocop, call it with the &lt;code&gt;rubocop&lt;/code&gt; command and it
will check all Ruby source files in the current directory.&lt;/p&gt;
&lt;p&gt;If working on a Rails project, you have to invoke it with the &lt;code&gt;-R&lt;/code&gt; flag.&lt;/p&gt;
&lt;p&gt;The first time I ran rubocop I was presented with no more or less
&lt;strong&gt;666&lt;/strong&gt; violations. Which meant if I wanted to clean up the code I'd had to
manually edit all 666 of them. Luckily, as you may have imagined, rubocop
provides the &lt;code&gt;-a/--auto-correct&lt;/code&gt; flag which does what it says. In the
documentation there is a note: &lt;em&gt;Experimental - use with caution&lt;/em&gt;. What the
heck, I had nothing to lose, I am under version control so I could go back
any time. It worked like a charm and this brought the violations to about
&lt;strong&gt;150&lt;/strong&gt;. Not bad at all.&lt;/p&gt;
&lt;p&gt;So what about the rest? Well, you have to do it manually and so I began.
If you run rubocop without any flags, it uses the &lt;a href="https://github.com/bbatsov/rubocop/tree/master/config" title="Default configuration files for rubocop"&gt;default config&lt;/a&gt; that
ships with the gem. If you want to use your config you can do so by defining
it with the &lt;code&gt;-c&lt;/code&gt; flag.&lt;/p&gt;
&lt;p&gt;Now, there is another cool feature rubocop provides. It can create a config
file for you containing all the violations found so far. Run rubocop with
the &lt;code&gt;--auto-gen-config&lt;/code&gt; flag and that will create &lt;code&gt;.rubocop_todo_yml&lt;/code&gt; in
the current dir. Then you can check against that file with
&lt;code&gt;rubocop -R -c .rubocop_todo_yml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;All cops in this yaml file are set to false, which means they won't be taken
into account, not unless you explicitly set them to true. That way you can
work your way up in fixing all violations by enabling one cop at a time.
Basically what is included in this file, overrides the default values.&lt;/p&gt;
&lt;p&gt;If you want to omit calling on &lt;code&gt;.rubocop_todo_yml&lt;/code&gt; every single time, place
this in &lt;code&gt;.rubocop.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;inherit_from: .rubocop_todo.yml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Form now on you can just call it with &lt;code&gt;rubocop -R&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To sum up, run &lt;code&gt;rubocop -R&lt;/code&gt; see that there is no violation, edit
&lt;code&gt;.rubocop_todo_yml&lt;/code&gt;, set one of the cops to true, run rubocop again, fix
the errors and work your way up until there is no violation.&lt;/p&gt;
&lt;p&gt;Of course all of these are optional steps. Ruby's interpreter doesn't care
about identation, it won't complain if you run a method 20 lines long and
it won't throw an error if you have chain 16 methods spanning to 300 chars.
All these are conventions among the Ruby community and you are not compelled
to follow them. BUT, it provides much cleaner code and when you find yourself
contributing to a project, all these will probably matter.&lt;/p&gt;
&lt;p&gt;In my case, you can see through &lt;a href="https://github.com/axilleas/isitfedoraruby/commit/0a39c2b1a3d3aa47433c52147fe9ecb443e3ea98" title="Commit fixing most of rubocops errors"&gt;this commit&lt;/a&gt; what changed and in
this &lt;a href="https://gist.github.com/axilleas/b65a909a5d0b73fcb2a8" title="gist with before/after violations"&gt;gist&lt;/a&gt; you can see the difference from before/after running rubocop.
Dropped to 73 violations from 666.&lt;/p&gt;
&lt;p&gt;I've skipped some of them as I didn't see fit, like commenting above every
class what it does. I'm not saying this isn't good to have it's just it
also includes migrations and I'd like to avoid that. Also some code will
be deprecated/rewritten any time soon so it doesn't make sense to fix the
violations if I'm to remove the code afterwards.&lt;/p&gt;
&lt;h1 id="houndci"&gt;HoundCI&lt;/h1&gt;
&lt;p&gt;Rubocop is good to test locally, but what about the code you host remotely?
Enter &lt;a href="https://houndci.com/" title="HoundCI website"&gt;Houndci&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Houndci is a web app written in Rails by &lt;a href="http://robots.thoughtbot.com/" title="Thoughtbot website"&gt;Thoughtbot&lt;/a&gt; that integrates with
your github account. It checks for violations every time a Pull Request is
submited against your repository. It relies on the rubocop gem, but it
may follow &lt;a href="https://github.com/thoughtbot/guides/tree/master/style" title="Thoughtbot style guide"&gt;different&lt;/a&gt; approaches than rubocop.&lt;/p&gt;
&lt;p&gt;I almost spent a day to find this out. I'll tell you what I mean since there
was a particular error that made me search for many hours.&lt;/p&gt;
&lt;p&gt;Let's start by saying that it is common practice to not have lines spanning
on more that 80 characters. &lt;a href="http://legacy.python.org/dev/peps/pep-0008/#maximum-line-length" title="Python PEP8 maximum line length"&gt;Python&lt;/a&gt; has it pinned to 79.&lt;/p&gt;
&lt;p&gt;In rubocop, there is a cop that checks for method chaining. When the line
is too long you should break it down, so this cop checks whether the 
dot(&lt;strong&gt;.&lt;/strong&gt;) that chains two methods is placed before or after the methods.
Here's an example to better visualize it:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_with_arguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argument_one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argument_two&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;a_really_long_line_that_is_broken_up_over_multiple_lines_and&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
  &lt;span class="n"&gt;subsequent_lines_are_indented_and&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
  &lt;span class="n"&gt;each_method_lives_on_its_own_line&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When I ran rubocop locally it complained with &lt;em&gt;Place the . on the next line, together with the method name.&lt;/em&gt;
Ok I did that and pushed. Then why was houndci told me &lt;a href="https://github.com/axilleas/isitfedoraruby/pull/1#discussion-diff-13786984" title="HoundCI complaining on dot"&gt;otherwise&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;Digging in rubocop's default &lt;a href="https://github.com/bbatsov/rubocop/blob/master/config/default.yml#L187" title="Default configuration about the dot position cop"&gt;config&lt;/a&gt; file I found that this particular
cop was invoking an additional parameter: &lt;code&gt;EnforcedStyle: leading&lt;/code&gt;.
Interesting, so why houndci was telling me the opposite? Digging some more,
this time in rubocop's source code, I found the responsible &lt;a href="https://github.com/bbatsov/rubocop/blob/master/lib/rubocop/cop/style/dot_position.rb#L22" title="cop that checks the . position in multi-line method calls."&gt;method&lt;/a&gt;.
It seems rubocop gives you the option to decide which style fits you better
and from what I've seen so far, houndci prefered the trailing dot. Ok let's
fix that.&lt;/p&gt;
&lt;p&gt;Reading the &lt;a href="https://houndci.com/configuration" title="Hound configuration"&gt;configuration&lt;/a&gt; guide, and since houndci uses rubocop, I
copied &lt;code&gt;.rubocop_todo_yml&lt;/code&gt; to &lt;code&gt;.hound.yml&lt;/code&gt;. There, following the &lt;a href="https://github.com/bbatsov/rubocop/blob/master/config/default.yml#L187" title="Default configuration about the dot position cop"&gt;config&lt;/a&gt;
file I appended&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;Style/DotPosition:
  EnforcedStyle: leading
  Enabled: true
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in &lt;code&gt;.hound.yml&lt;/code&gt;, pushed the change to my repo and created a test pull request
to check if it worked. No... but whyyyy??&lt;/p&gt;
&lt;p&gt;After some more more digging, this time at the issue tracker of houndci,
I finally found the &lt;a href="https://github.com/thoughtbot/hound/issues/288" title="Hound not picking up changes in .hound.yml"&gt;culprit&lt;/a&gt;. The latest version of rubocop &lt;a href="https://github.com/bbatsov/rubocop/blob/master/relnotes/v0.23.0.md" title="Rubocop 0.23.0 release notes"&gt;changed&lt;/a&gt;
the way cops are presented and that broke compatibility with houndci.
Back to &lt;code&gt;.hound.yml&lt;/code&gt; I removed &lt;code&gt;Style/&lt;/code&gt; and pushed to github. Finally,
this time it was fixed.&lt;/p&gt;
&lt;p&gt;Not much of a story, probably you already got bored or didn't make it this
far, but anyway. Onto more interesting stuff, until next time it is.&lt;/p&gt;</summary><category term="fedora"></category><category term="isitfedoraruby"></category><category term="gsoc"></category><category term="ruby"></category><category term="rails"></category><category term="webdev"></category><category term="rubocop"></category></entry><entry><title>GSoC-2014 isitfedoraruby - Week 3</title><link href="http://axilleas.me/en/blog/2014/gsoc2014-week-three" rel="alternate"></link><updated>2014-06-09T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.me,2014-06-09:en/blog/2014/gsoc2014-week-three</id><summary type="html">&lt;p&gt;Testing, testing, testing.
Diving into BDD for the first time can be a little tedious but you sure learn
a lot. In the ruby/rails world there is a ton of excellent tools to help you
test your app. Some more popular than the others. I'm no exception so I
picked what the majority of the community dictated.&lt;/p&gt;
&lt;h1 id="testing-tools"&gt;Testing tools&lt;/h1&gt;
&lt;h2 id="rspec"&gt;Rspec&lt;/h2&gt;
&lt;p&gt;The Rspec test suite is well established among ruby developers and has a big
community to support it. You can also find many good books about it. One that
I highly recommend is &lt;a href="https://leanpub.com/everydayrailsrspec" title="Everyday Rails Testing with RSpec"&gt;Everyday Rails Testing with RSpec&lt;/a&gt;. It
basically includes all the tools I'll be using, I'm a little biased I admit it
but it is really worth it.&lt;/p&gt;
&lt;p&gt;Here are the specs that will be populated with tests over time.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;models
├── bug_spec.rb
├── build_spec.rb
├── dependency_spec.rb
├── fedora_rpm_spec.rb
├── rpm_version_spec.rb
└── ruby_gem_spec.rb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Currently, I have worked only on &lt;code&gt;bug_spec.rb&lt;/code&gt; which is finished for the time
being.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# app/spec/models/bug_spec.rb&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# == Schema Information&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Table name: bugs&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;#  id            :integer          not null, primary key&lt;/span&gt;
&lt;span class="c1"&gt;#  name          :string(255)&lt;/span&gt;
&lt;span class="c1"&gt;#  bz_id         :string(255)&lt;/span&gt;
&lt;span class="c1"&gt;#  fedora_rpm_id :integer&lt;/span&gt;
&lt;span class="c1"&gt;#  is_review     :boolean&lt;/span&gt;
&lt;span class="c1"&gt;#  created_at    :datetime&lt;/span&gt;
&lt;span class="c1"&gt;#  updated_at    :datetime&lt;/span&gt;
&lt;span class="c1"&gt;#  last_updated  :string(255)&lt;/span&gt;
&lt;span class="c1"&gt;#  is_open       :boolean&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rails_helper&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;Bug&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;has valid factory&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:bug&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_valid&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:all&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="vi"&gt;@bug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:bug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@bugzilla_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://bugzilla.redhat.com/show_bug.cgi?id=&amp;#39;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;has valid bugzilla url&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@bug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;Regexp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@bugzilla_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;\d+/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;is a Review Request&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@bug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_review&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;is open&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@bug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_open&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;is closed&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="vi"&gt;@bug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_open&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@bug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_open&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here I'm using the new rspec method &lt;code&gt;expect(object).to&lt;/code&gt; instead of the old one
&lt;code&gt;object.should&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;In the validation of the bugzilla url I wanted to test against a regular
expression that would return the bug url and bug number. At first I used
&lt;code&gt;/#{@bugzilla_url}\d+/&lt;/code&gt; but that was interpreted into
&lt;code&gt;/https:\/\/bugzilla.redhat.com\/show_bug.cgi?id=\d+/&lt;/code&gt;. So, the slashes where
treated as regexp wildcards. The trick I &lt;a href="http://stackoverflow.com/a/150598/2137281" title="Interpolating a string into a regex"&gt;learned&lt;/a&gt; is to enclose
the string into &lt;code&gt;Regexp.quote(str)&lt;/code&gt;. This method escapes any characters that
would otherwise have special meaning&lt;sup id="fnref:ruby-doc"&gt;&lt;a class="footnote-ref" href="#fn:ruby-doc" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h2 id="factorygirl"&gt;FactoryGirl&lt;/h2&gt;
&lt;p&gt;FactoryGirl is a replacement for fixtures, Rails' default way of creating test
data. In my first attempt I used it to create a Bug object.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# app/spec/factories/bugs.rb&lt;/span&gt;

&lt;span class="no"&gt;FactoryGirl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;factory&lt;/span&gt; &lt;span class="ss"&gt;:bug&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bz_id&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;12345&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_review&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_open&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt; 
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, when I call &lt;code&gt;create(:bug)&lt;/code&gt; in my &lt;code&gt;bug_spec.rb&lt;/code&gt; it automatically creates
a new Bug object in the database with the predefined attributes I gave it
in the factory file. I could probably use &lt;code&gt;build(:bug)&lt;/code&gt; instead of &lt;code&gt;create&lt;/code&gt;
and that would simply create the object but not save it in the database.
This could get a lot better since it takes 2.2 seconds to just run 5 tests.
Refactoring will come later, I'll primarily focus on making enough tests to
cover as many edge cases as I can find.&lt;/p&gt;
&lt;h2 id="cucumbercapybara"&gt;Cucumber/capybara&lt;/h2&gt;
&lt;p&gt;So far I talked about unit testing. When it comes to integration testing,
that is how the application as a whole behaves, there is &lt;code&gt;cucumber&lt;/code&gt; and &lt;code&gt;capybara&lt;/code&gt;.
I haven't actually used any of these two yet. Cucumber is known for its
descriptive language and better used when one works with a non-programmer
product owner that doesn't want to look at a lot of code&lt;sup id="fnref:quote"&gt;&lt;a class="footnote-ref" href="#fn:quote" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;. I'll probably
just go with capybara.&lt;/p&gt;
&lt;h1 id="setting-a-rails-development-environment"&gt;Setting a Rails development environment&lt;/h1&gt;
&lt;p&gt;I spent quite a lot of time to find the proper gems and configuration to
have a nice setup. This will do for an article of its own so I won't go into
details.&lt;/p&gt;
&lt;h1 id="todos"&gt;TODOs&lt;/h1&gt;
&lt;p&gt;Except for preparing the test suite, I'm also into cleaning the code where
possible and necessary. There are some functions that need removing, but I
have to do it carefully, don't want to break anything and without tests I
cannot be 100% sure. So far I have used the &lt;a href="https://github.com/bbatsov/rubocop" title="A Ruby static code analyzer, based on the community Ruby style guide"&gt;rubocop&lt;/a&gt; gem with some
interesting findings (exactly 666 warnings/errors). I will talk about it next week.
Now go and watch the &lt;a href="https://www.youtube.com/watch?v=CamAhPeYoC8" title="Six six six"&gt;Number of the beast&lt;/a&gt;.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:ruby-doc"&gt;
&lt;p&gt;&lt;a href="http://ruby-doc.org/core-2.1.2/Regexp.html#method-c-quote"&gt;http://ruby-doc.org/core-2.1.2/Regexp.html#method-c-quote&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:ruby-doc" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:quote"&gt;
&lt;p&gt;Quote taken from Everyday Rails Testing with RSpec&amp;#160;&lt;a class="footnote-backref" href="#fnref:quote" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="fedora"></category><category term="isitfedoraruby"></category><category term="gsoc"></category><category term="ruby"></category><category term="rails"></category><category term="webdev"></category></entry><entry><title>GSoC-2014 isitfedoraruby - Week 2</title><link href="http://axilleas.me/en/blog/2014/gsoc2014-week-two" rel="alternate"></link><updated>2014-06-03T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.me,2014-06-03:en/blog/2014/gsoc2014-week-two</id><summary type="html">&lt;p&gt;Here's what I've been doing last week.&lt;/p&gt;
&lt;h1 id="previous-week"&gt;Previous week&lt;/h1&gt;
&lt;h2 id="architecture-analysis"&gt;Architecture analysis&lt;/h2&gt;
&lt;p&gt;Getting to know an app from the ground up takes some time, especially if that's
a framework you are not too familiar with. Luckilly, I found the &lt;a href="http://railroady.prestonlee.com/" title="railroady home page"&gt;railroady&lt;/a&gt; gem
that helped me visualize how the app is structured, you can find the results
&lt;a href="https://gitlab.com/fedora-ruby/isitfedoraruby/tree/deploy/doc" title="Models/Controllers visualization"&gt;here&lt;/a&gt; (click on one of them and see them as raw).&lt;/p&gt;
&lt;h2 id="deploy-to-a-testing-server"&gt;Deploy to a testing server&lt;/h2&gt;
&lt;p&gt;Heroku might be a nice option, but their plans were limiting the database rows.
Instead, I spawned a Fedora 20 droplet in digitalocean and &lt;a href="http://fedoraruby.axilleas.me" title="Testing instance of isitfedoraruby app"&gt;deployed&lt;/a&gt; it there.
I used postgres as a database backend, unicorn serving the app and nginx as
a reverse proxy.&lt;/p&gt;
&lt;p&gt;First of all, I had to &lt;a href="https://docs.fedoraproject.org/en-US/Fedora/13/html/Security-Enhanced_Linux/sect-Security-Enhanced_Linux-Working_with_SELinux-Enabling_and_Disabling_SELinux.html" title="Enabling and Disabling SELinux"&gt;enable SELinux&lt;/a&gt;, I &lt;a href="http://stopdisablingselinux.com/" title="Seriously, stop disabling SELinux"&gt;had&lt;/a&gt; to,
it was off by default. Then I changed a boolean to make nginx work:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;setsebool -P httpd_can_network_connect on
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="started-fixing-bugs"&gt;Started fixing bugs&lt;/h2&gt;
&lt;p&gt;I keep finding small bugs that I currently keep track in my &lt;a href="https://trello.com/b/4aOmUpEC/fedora-ruby" title="trello board for my progress"&gt;trello&lt;/a&gt; board.
There is currently a &lt;a href="https://github.com/zuhao/isitfedoraruby/issues/50" title="GitHub discussion: Move repo to general namespace"&gt;discussion&lt;/a&gt; to move isitfedoraruby to a more general
namespace, so until then I'm working on my fork and the trello board.&lt;/p&gt;
&lt;h1 id="this-week"&gt;This week&lt;/h1&gt;
&lt;h2 id="setting-up-rspec"&gt;Setting up rspec&lt;/h2&gt;
&lt;p&gt;As this is the primary testing tool, I have started writing the first scenarios
and along the way I'll be adding the actual tests.&lt;/p&gt;</summary><category term="fedora"></category><category term="isitfedoraruby"></category><category term="gsoc"></category><category term="ruby"></category><category term="rails"></category><category term="webdev"></category></entry><entry><title>GSoC-2014 isitfedoraruby - Week 1</title><link href="http://axilleas.me/en/blog/2014/gsoc2014-week-one" rel="alternate"></link><updated>2014-05-27T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.me,2014-05-27:en/blog/2014/gsoc2014-week-one</id><summary type="html">&lt;p&gt;In case you haven't heard, I have been accepted again this year
for Google Summer of Code :) This time I will be working on enhancing
a Rails app that provides information about the state of rubygem
packaging in Fedora.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://isitfedoraruby.com" title="Rubygem packaging state in Fedora"&gt;isitfedoraruby&lt;/a&gt; is a project that was crafted in GSoC 2012 by
&lt;a href="https://github.com/zuhao" title="zuhao's github profile"&gt;Zuhao Wan&lt;/a&gt;. I will pick it where he left off and add some
new features that will hopefully make us packagers' life easier.&lt;/p&gt;
&lt;p&gt;You can read my proposal &lt;a href="https://fedoraproject.org/wiki/GSOC_2014/Student_Application_Axilleas/Isitfedoraruby" title="GSoC 2014 proposal"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#why-i-got-involved-in-this-project"&gt;Why I got involved in this project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#project-details"&gt;Project details&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-we-have-so-far"&gt;What we have so far&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#general-info-pages"&gt;General info pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#single-rubygem-page"&gt;Single rubygem page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#singe-fedorarpm-page"&gt;Singe fedorarpm page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#features-to-be-added-and-bugs-fixed"&gt;Features to be added and bugs fixed&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#test-suite"&gt;Test suite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#enhance-the-gemfile-tool"&gt;Enhance the gemfile tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#show-the-packaging-progress-of-a-gem"&gt;Show the packaging progress of a gem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#enhance-dependency-checker"&gt;Enhance dependency checker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#uiux-enhancements"&gt;UI/UX enhancements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#add-pages-providing-more-general-info"&gt;Add pages providing more general info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#documentation-on-contributing"&gt;Documentation on contributing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#progress-of-previous-week"&gt;Progress of previous week&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#deploy-on-staging-server"&gt;Deploy on staging server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#note-bugs-that-need-fixing"&gt;Note bugs that need fixing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#whats-on-this-week"&gt;What's on this week&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#architecture-analysis"&gt;Architecture analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setup-a-proper-devtest-environment"&gt;Setup a proper dev/test environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fix-bugs-found-in-first-week"&gt;Fix bugs found in first week&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-end-for-now"&gt;The end (for now)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="why-i-got-involved-in-this-project"&gt;Why I got involved in this project&lt;/h1&gt;
&lt;p&gt;Last year was the first time I took part in GSoC, first time I got involved in
Fedora, first time I started contributing to GitLab. I am now a packager, still
trying to &lt;a href="https://fedoraproject.org/wiki/GitLab" title="GitLab on Fedora wiki"&gt;package GitLab&lt;/a&gt; for Fedora/RHEL (help needed!) and a member
of GitLab's community &lt;a href="https://www.gitlab.com/core-team/" title="GitLab core team"&gt;core-team&lt;/a&gt;. I even became an apprentice to Fedora's
infra team (although I haven't dedicated much time admittedly).&lt;/p&gt;
&lt;p&gt;So, having packaged a bunch of rubygems already, I have stumbled upon many
cases where my packager's life would be easier if I had some tools to work
with. And this is where isitfedoraruby comes in. As a rails app, it looked like
the perfect opportunity to learn about the framework and make something that
the Fedora Ruby community could use on a daily basis when packaging.&lt;/p&gt;
&lt;h1 id="project-details"&gt;Project details&lt;/h1&gt;
&lt;p&gt;As I wrote earlier &lt;a href="http://isitfedoraruby.com" title="Rubygem packaging state in Fedora"&gt;isitfedoraruby&lt;/a&gt; is a rails app used mostly internally
in Fedora by ruby packagers. The source code is hosted on &lt;a href="https://github.com/zuhao/isitfedoraruby" title="isitfedoraruby on github"&gt;github&lt;/a&gt;,
deployed on &lt;a href="https://www.openshift.com/" title="Openshift PaaS"&gt;Openshift&lt;/a&gt; and all the info is imported using a &lt;a href="https://github.com/zuhao/isitfedoraruby/blob/master/lib/tasks/database.rake" title="Import gems rake task"&gt;rake task&lt;/a&gt;
using a &lt;a href="https://github.com/zuhao/isitfedoraruby/tree/master/.openshift/cron" title="Cron job to import gems"&gt;cron job&lt;/a&gt; every hour.&lt;/p&gt;
&lt;p&gt;What you see in production is using Rails 3 and ruby 1.9.3. Zuhao has already
worked in porting it to &lt;a href="https://github.com/zuhao/isitfedoraruby/tree/rails4" title="Rails 4 branch"&gt;Rails 4&lt;/a&gt; so I'll be working on that branch.&lt;/p&gt;
&lt;p&gt;The same project was also picked by some high school students during Google's Code In
program in 2012. You can read more in Mo Morsi's &lt;a href="http://mo.morsi.org/blog/node/378" title="Google Code In additions to isitfedoraruby"&gt;blog post&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="what-we-have-so-far"&gt;What we have so far&lt;/h2&gt;
&lt;p&gt;Here is a brief list of the pages there are so far.&lt;/p&gt;
&lt;h3 id="general-info-pages"&gt;General info pages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Home page&lt;/li&gt;
&lt;li&gt;All rubygems&lt;/li&gt;
&lt;li&gt;All fedorarpms&lt;/li&gt;
&lt;li&gt;Contribute&lt;/li&gt;
&lt;li&gt;About&lt;/li&gt;
&lt;li&gt;Gemfile Tool&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="single-rubygem-page"&gt;Single rubygem page&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Link to fedorarpm&lt;/li&gt;
&lt;li&gt;Homepage url&lt;/li&gt;
&lt;li&gt;Source code url&lt;/li&gt;
&lt;li&gt;Version&lt;/li&gt;
&lt;li&gt;Total downloads&lt;/li&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;li&gt;Dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="singe-fedorarpm-page"&gt;Singe fedorarpm page&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Header links&lt;ul&gt;
&lt;li&gt;Dependency Tree (using D3 js library)&lt;/li&gt;
&lt;li&gt;Timeline (chronological visualization of the bugs &amp;amp; version releases)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Link to rubygem&lt;/li&gt;
&lt;li&gt;Link to source code url on &lt;a href="http://pkgs.fedoraproject.org/cgit"&gt;http://pkgs.fedoraproject.org/cgit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Number of git commits&lt;/li&gt;
&lt;li&gt;Up to date (yes/no)&lt;/li&gt;
&lt;li&gt;Link to maintainer&lt;ul&gt;
&lt;li&gt;link_to bubble chart page showing the packages a user owns&lt;/li&gt;
&lt;li&gt;Table of rpms owned by user&lt;ul&gt;
&lt;li&gt;link_to rpm&lt;/li&gt;
&lt;li&gt;Upstream version&lt;/li&gt;
&lt;li&gt;Rawhide version&lt;/li&gt;
&lt;li&gt;Number of git commits&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;li&gt;Versions table&lt;ul&gt;
&lt;li&gt;rawhide&lt;/li&gt;
&lt;li&gt;fedora 20&lt;/li&gt;
&lt;li&gt;fedora 19&lt;/li&gt;
&lt;li&gt;gem version&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dependencies table&lt;ul&gt;
&lt;li&gt;package name (link_to fedorarpm)&lt;/li&gt;
&lt;li&gt;rawhide version&lt;/li&gt;
&lt;li&gt;f20 version&lt;/li&gt;
&lt;li&gt;f19 version&lt;/li&gt;
&lt;li&gt;upstream version&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dependents table&lt;ul&gt;
&lt;li&gt;package name (link_to fedorarpm)&lt;/li&gt;
&lt;li&gt;rawhide version&lt;/li&gt;
&lt;li&gt;f20 version&lt;/li&gt;
&lt;li&gt;f19 version&lt;/li&gt;
&lt;li&gt;upstream version&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bugs table&lt;ul&gt;
&lt;li&gt;ID (link_to bugzilla, striked if resolved)&lt;/li&gt;
&lt;li&gt;Bug title&lt;/li&gt;
&lt;li&gt;Review status&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Builds table&lt;ul&gt;
&lt;li&gt;Build ID (link_to koji url)&lt;/li&gt;
&lt;li&gt;Title (package name)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="features-to-be-added-and-bugs-fixed"&gt;Features to be added and bugs fixed&lt;/h2&gt;
&lt;h3 id="test-suite"&gt;Test suite&lt;/h3&gt;
&lt;p&gt;The current test suite is non-existent. Some of the tools I plan to use are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rspec&lt;/code&gt; for testing models and controllers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;factory_girl&lt;/code&gt; for feeding tests&lt;/li&gt;
&lt;li&gt;&lt;code&gt;capybara&lt;/code&gt; to simulate user interaction with the app&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For views I will use feature specs. Existing minitest tests will be replaced
with rspec ones.&lt;/p&gt;
&lt;h3 id="enhance-the-gemfile-tool"&gt;Enhance the gemfile tool&lt;/h3&gt;
&lt;p&gt;The &lt;a href="http://www.isitfedoraruby.com/stats/gemfile_tool" title=" Test your Gemfile or Gemfile.lock against Fedora"&gt;Gemfile tool&lt;/a&gt; checks against a Gemfile or Gemfile.lock and shows if
the gems are packaged for Fedora. In its current implementation, it basically
dumps all the information in the screen, which is not too handy if you need to
somehow extract this information.&lt;/p&gt;
&lt;p&gt;The functionality I want to add is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;provide a better view of the output (prettier table view)&lt;/li&gt;
&lt;li&gt;ability to provide a Gemfile url and have the output on a &lt;em&gt;static&lt;/em&gt; page like:
    &lt;code&gt;http://isitfedoraruby/stats/gemfile?url=www.example.com/Gemfile.lock&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this we could calculate how many of the gems are in Fedora repos, which
brings me to another cool feature.&lt;/p&gt;
&lt;h3 id="show-the-packaging-progress-of-a-gem"&gt;Show the packaging progress of a gem&lt;/h3&gt;
&lt;p&gt;There are times where a gem depends on other gems not yet packaged for Fedora.
A cool feature would be to able to see the packaging progress of a gem.&lt;/p&gt;
&lt;p&gt;The plan is to either implement one of the two options below (or both):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Query &lt;a href="https://rubygems.org"&gt;https://rubygems.org&lt;/a&gt; and extract information on the dependencies.&lt;/li&gt;
&lt;li&gt;Provide a yaml file with info on the gem's review request bugzilla issue,
    then query koji for rawhide builds and bugzilla for any Blocks issues.
    If we have those two values we can calculate how many dependents gems
    there are not yet or already packaged.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I prefer the first option as with that one could see what dependencies
needed prior to submitting a package for a review request.&lt;/p&gt;
&lt;p&gt;A nice progress bar with the percentage of gem packaging completion will
be provided as well. For each gem that gets in rawhide, the progress bar
gets a little further. There can also be a number of other cool info in
the page, like links to bugzilla requests so that someone could lend a hand, etc.&lt;/p&gt;
&lt;p&gt;At first I will focus on implementing this for a single gem but later it
can be extended to track the progress of a rails app.&lt;/p&gt;
&lt;p&gt;That functionality will mainly come from the next feature in the list.
Enter dependency checker.&lt;/p&gt;
&lt;h3 id="enhance-dependency-checker"&gt;Enhance dependency checker&lt;/h3&gt;
&lt;p&gt;The &lt;a href="http://www.isitfedoraruby.com/fedorarpms/rubygem-rspec/full_deps" title="Dependencies represantation"&gt;current&lt;/a&gt; representation of a gem's dependencies is in a tree format,
not very handy if you want to extract information.&lt;/p&gt;
&lt;p&gt;Influenced by &lt;a href="https://www.gemlou.pe"&gt;https://www.gemlou.pe&lt;/a&gt;, I plan to implement a similar
representation and show the dependencies in a more elaborate way.&lt;/p&gt;
&lt;h3 id="uiux-enhancements"&gt;UI/UX enhancements&lt;/h3&gt;
&lt;p&gt;The app uses bootstrap as a frontend framework, as you could tell.
The idea is to make it more user friendly and prettier. If it were me
I would have used &lt;a href="http://foundation.zurb.com/" title="The most advanced responsive front-end framework in the world."&gt;foundation&lt;/a&gt; in the first place. Upstream provides
even a gem for immediate use in rails apps. In my opinion it's targeting
more to developers that don't want to get too messy with css. For the time
being I don't consider changing frameworks, but it's a food for thought.&lt;/p&gt;
&lt;h3 id="add-pages-providing-more-general-info"&gt;Add pages providing more general info&lt;/h3&gt;
&lt;p&gt;Pages that would help the user experience are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;list of gems pending review&lt;/li&gt;
&lt;li&gt;list of gems already assigned but stagnated for too long&lt;/li&gt;
&lt;li&gt;list of gems pending review and marked as NEEDSPONSOR&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All these can be queried from bugzilla through the ruby-bugzilla gem.&lt;/p&gt;
&lt;h3 id="documentation-on-contributing"&gt;Documentation on contributing&lt;/h3&gt;
&lt;p&gt;Last but certainly not least, I will document the development contribution
process should anyone want to provide any fixes/features.&lt;/p&gt;
&lt;p&gt;Apart from developing the app, I will provide a page with comprehensive
steps on packaging a rubygem. A draft article can be found &lt;a href="https://gitlab.com/fedora-ruby/gitlab-rpm/wikis/rubygem-packaging" title="Fedora Rubygem Packaging"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="progress-of-previous-week"&gt;Progress of previous week&lt;/h1&gt;
&lt;p&gt;I have been reading the codebase to get familiar with it and then done
a few minor things.&lt;/p&gt;
&lt;h2 id="deploy-on-staging-server"&gt;Deploy on staging server&lt;/h2&gt;
&lt;p&gt;Currently I run it on &lt;a href="http://fedoraruby.herokuapp.com" title="isitfeedoraruby on heroku"&gt;heroku&lt;/a&gt;, but the database exceeded the free plan they
provide so I'll have to move it elsewhere. I haven't yet imported the gems
as the rake tasks pull in all gems from rubygems.org and the database gets huge.
This is noted to be fixed in the rake task. Also, what you see is the next version
of the app using Rails 4 :)&lt;/p&gt;
&lt;h2 id="note-bugs-that-need-fixing"&gt;Note bugs that need fixing&lt;/h2&gt;
&lt;p&gt;Like last year, I will be documenting any progress in a &lt;a href="https://trello.com/b/4aOmUpEC/fedora-ruby" title="isitfedoraruby trello board progress"&gt;trello board&lt;/a&gt;.
In the code clean up list you can see what is marked as to be fixed.
If you have any comments please do leave them on the cards.&lt;/p&gt;
&lt;h1 id="whats-on-this-week"&gt;What's on this week&lt;/h1&gt;
&lt;p&gt;We are already in the middle of the second week, so here's a preview of
what I'm working on.&lt;/p&gt;
&lt;h2 id="architecture-analysis"&gt;Architecture analysis&lt;/h2&gt;
&lt;p&gt;The code needs a clean up and the only way to do this is to do an analysis
of the app's architecture. That will give me an overview of the changes need
to be done like merging the rubygem page view into fedorarpm.&lt;/p&gt;
&lt;h2 id="setup-a-proper-devtest-environment"&gt;Setup a proper dev/test environment&lt;/h2&gt;
&lt;p&gt;Right now, if anyone wanted to play with the app, apart from db migration
you would have to run the rake tasks that import all the info needed in
order to have a functional app. Rather than importing each gem (which can be
done in batches), I would like to create some fake data to begin with.&lt;/p&gt;
&lt;p&gt;This would help me afterwards with the tests.&lt;/p&gt;
&lt;h2 id="fix-bugs-found-in-first-week"&gt;Fix bugs found in first week&lt;/h2&gt;
&lt;p&gt;I'll try to apply fixes to as many bugs as possible I found previous week.&lt;/p&gt;
&lt;h1 id="the-end-for-now"&gt;The end (for now)&lt;/h1&gt;
&lt;p&gt;Soo, that's it for now! Hope you made it this far :)
Cheers to an interesting summer!&lt;/p&gt;</summary><category term="fedora"></category><category term="isitfedoraruby"></category><category term="gsoc"></category><category term="ruby"></category><category term="rails"></category><category term="webdev"></category></entry><entry><title>GitLab on CentOS asks for password when using git push via ssh</title><link href="http://axilleas.me/en/blog/2014/centos-gitlab-asks-for-password-on-git-push" rel="alternate"></link><updated>2014-04-22T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.me,2014-04-22:en/blog/2014/centos-gitlab-asks-for-password-on-git-push</id><summary type="html">&lt;p&gt;Seems there is an issue floating around when a user tries to push on their
GitLab CentOS installation. There are two ways one can push to a git repo.
Using their username:password through http and using their ssh key without
the need of a password. For example:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;git push http://centos.local/axil/git.git master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;will prompt for the GitLab username:password&lt;/p&gt;
&lt;p&gt;whereas&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;git push git@centos.local:axil/git.git master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;will push to the repo without the need of a password just using the ssh key
I &lt;a href="https://www.youtube.com/watch?v=54mxyLo3Mqk" title="Create and Add your SSH key to GitLab "&gt;uploaded&lt;/a&gt; using the GitLab interface.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Pushing via ssh usually requires that you have set up properly
your &lt;code&gt;.ssh/config&lt;/code&gt; for the user you are pushing from. Mine entry for example
looks like:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;Host centos.local
  User axil
  Hostname centos.local
  PreferredAuthentications publickey
  IdentityFile /home/axil/.ssh/id_rsa
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you have installed GitLab on CentOS/RHEL, you may not be able to push via ssh
and the reason is the restrictions SELinux has on &lt;code&gt;/home/git/.ssh/&lt;/code&gt; directory.
In order to fix this problem, simply run as root:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;restorecron -Rv /home/git/.ssh/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can read more &lt;a href="http://wiki.centos.org/HowTos/Network/SecuringSSH" title="Securing OpenSSH on CentOS"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The above fix has already taken its way upstream in the CentOS guide at the &lt;a href="https://gitlab.com/axil/gitlab-recipes/commit/ab3dd4b427b4b6e531eda5de0775ea1b56f577bb" title="Ensure the correct SELinux contexts are set on .ssh/"&gt;gitlab-recipes&lt;/a&gt; repo.
If you find any other issues you are welcome to submit them in the bug tracker.&lt;/p&gt;</summary><category term="centos"></category><category term="gitlab"></category><category term="selinux"></category></entry><entry><title>GitLab repository management book review</title><link href="http://axilleas.me/en/blog/2014/gitlab-repository-management-book-review" rel="alternate"></link><updated>2014-01-09T00:00:00+02:00</updated><author><name>axil</name></author><id>tag:axilleas.me,2014-01-09:en/blog/2014/gitlab-repository-management-book-review</id><summary type="html">&lt;p&gt;I remember when I was trying to install GitLab 2.0 with no prior knowledge 
of the rails framework and ruby in general, just copy pasting commands. It seemed fun
and when the login screen showed for the first time, it felt really great!
And then I remember searching for the default username/password. It wasn't documented,
rather than shown somewhere between the commands I was blindly copying. Since then 
a lot has changed, the documentation got a lot better, the community has grown big and 
GitLab took the way it deserved. In my last post I wrote that I would review the new book that &lt;a href="https://twitter.com/JonathanMH_com"&gt;Jonathan M. Hethey&lt;/a&gt; wrote about GitLab. Without further ado, let's have a look what this book offers, what not and what I would like to see included in its next version.&lt;/p&gt;
&lt;p&gt;&lt;img alt="GitLab Repository Management" src="http://www.packtpub.com/sites/default/files/1794OS.jpg" /&gt;&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#chapters"&gt;Chapters&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#kickstarting-with-gitlab"&gt;Kickstarting with GitLab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#configuring-gitlab"&gt;Configuring GitLab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#roles-and-permissions"&gt;Roles and permissions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#issues-and-wiki"&gt;Issues and wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#workflows"&gt;Workflows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#updating-gitlab"&gt;Updating GitLab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#help-and-community"&gt;Help and Community&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#to-sum-up"&gt;To sum up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="chapters"&gt;Chapters&lt;/h2&gt;
&lt;h3 id="kickstarting-with-gitlab"&gt;Kickstarting with GitLab&lt;/h3&gt;
&lt;p&gt;The first chapter describes the features of GitLab, points to the cloud-based solution offered by GitLab.com and refers to its competitors (open source or closed source).
If you have never heard about GitLab before, this will get you started.&lt;/p&gt;
&lt;h3 id="installation"&gt;Installation&lt;/h3&gt;
&lt;p&gt;As you'd have guessed, the installation guide is there to follow, sticking as possible  to the original one written by the GitLab devs. Unfortunately for the readers, since GitLab is evolving rapidly, it is only common for this chapter not to be completely up to date with the one upstream provides. My advice is, if you decide to install GitLab, you should follow the official guide and consult this book to better understand what ecah command does.&lt;/p&gt;
&lt;h3 id="configuring-gitlab"&gt;Configuring GitLab&lt;/h3&gt;
&lt;p&gt;Again, the configuration steps come mainly from the installation guide but are more coprehensive and better explained so you'll get a good understanding why you do what you do. You will be also introduced to the ssh protocol and learn how you can add more protection to your the server by changing the default port sshd listens to, as well as how to configure this to play well with GitLab. If you are new to the UNIX world and were blindly typing commands before, this chapter will help you grasp the reasoning behind each command. &lt;/p&gt;
&lt;h3 id="roles-and-permissions"&gt;Roles and permissions&lt;/h3&gt;
&lt;p&gt;As stated in the book, where GitLab excels is its intuitive web UI tied with Git and the different management user roles it provides. In this book you will learn in depth about this feature. Every role is explained extensively, with examples where possible. Also you will learn how to log in for the first time, how to create your personal ssh key, how to add new users manually through the administrative interface and how to enable sign up.&lt;/p&gt;
&lt;h3 id="issues-and-wiki"&gt;Issues and wiki&lt;/h3&gt;
&lt;p&gt;One other aspect of GitLab that makes it ideal for collaborating is its embedded issue  tracker and the wiki it provides. Being part of a team, you will want to make code reviews, exchange ideas and document your software. The "Issues and wiki" chapter will help you grasp those ideas and also learn some "hidden" functionalities like the ability to refer to other elements inside GitLab through shortcodes (issues, Merge Requests, snippets, milestones, commit messages, etc.). Beware that there is some extensive reference to teams, a feature deprecated in newer versions and superseded by groups.&lt;/p&gt;
&lt;h3 id="workflows"&gt;Workflows&lt;/h3&gt;
&lt;p&gt;In the sixth chapter you are introduced to the GitLab workflow, which if you have ever used Github, you have a pretty solid ground of understanding how it works. As I mentioned earlier, GitLab is primarily used for code review among developers and the workflow of feature branches works very well with the web UI GitLab provides, where you can create merge requests and fork projects to your own namespace. If you are not familiar with the merge request term, you will learn all about it through this chapter. The idea of Git hooks is also introduced and an example is provided for better understanding. Unfortunately there is no reference to web hooks, a feature that lacks documentation and used by many users. I would really like to see a section about web hooks in a future edition of this book.&lt;/p&gt;
&lt;h3 id="updating-gitlab"&gt;Updating GitLab&lt;/h3&gt;
&lt;p&gt;Since GitLab is a rapid developed project and a new version comes out each month, you will need to know how to update it. The 3-step golden rule, backup, backup and backup applies here as well, particularly if you are an administrator dealing with a corporate environment with many projects and users. In the "Updating GitLab" chapter you are presented with some common backup options like &lt;code&gt;tar&lt;/code&gt; and &lt;code&gt;mysqldump&lt;/code&gt;, and you will learn how to first ensure a proper backup is taken and then update you GitLab Installation. As the author states, when updating you should always watch out for the current update guides available at the official repository. A nice chapter overall that learns you the importance of, what else, backup.&lt;/p&gt;
&lt;h3 id="help-and-community"&gt;Help and Community&lt;/h3&gt;
&lt;p&gt;In the last chapter you will learn the various channels where you can get help. Basically it's a somewhat more detailed version of the &lt;a href="https://github.com/gitlabhq/gitlabhq/blob/master/README.md#getting-help"&gt;Getting Help&lt;/a&gt; section of the README file.&lt;/p&gt;
&lt;h2 id="to-sum-up"&gt;To sum up&lt;/h2&gt;
&lt;p&gt;Overall, this book is a great starting point for newcomers to the GitLab world that have little or no prior knowledge of the git workflow. For administrators that want to install and use GitLab in their organization, it's also a good starting point and a detailed reference for the main functionalities GitLab provides.&lt;/p&gt;
&lt;p&gt;Given its daily development, sections as "Installation" and "Update" should not be taken literally, as the upstream guides are more accurate and up to date.&lt;/p&gt;
&lt;p&gt;Personally, I expected it to have more information for administrators that already know their way in using the interface. Things like&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ldap configuration&lt;/li&gt;
&lt;li&gt;setup of other omniauth providers&lt;/li&gt;
&lt;li&gt;usage of webhooks&lt;/li&gt;
&lt;li&gt;communicating with the api&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;are some of the advanced functionalities I would like to have seen. Hopefully in a newer version these will be provided. &lt;/p&gt;
&lt;p&gt;If I were to grade this book I would give it a 7/10. Not at all bad, but not exceeding my expectations. I hope Jonathan will take these considerations into account and update the book sometime soon :) In the meantime go grab yourself a &lt;a href="http://bit.ly/1fTUYMy"&gt;copy&lt;/a&gt;!&lt;/p&gt;</summary><category term="gitlab"></category><category term="book"></category><category term="review"></category></entry><entry><title>Coming soon book review - GitLab repository management</title><link href="http://axilleas.me/en/blog/2013/coming-soon-book-review-gitlab-repository-management" rel="alternate"></link><updated>2013-12-31T00:00:00+02:00</updated><author><name>axil</name></author><id>tag:axilleas.me,2013-12-31:en/blog/2013/coming-soon-book-review-gitlab-repository-management</id><summary type="html">&lt;p&gt;&lt;img alt="GitLab Repository Management" src="http://www.packtpub.com/sites/default/files/1794OS.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;If you don't already know it, &lt;a href="https://twitter.com/JonathanMH_com"&gt;Jonathan M. Hethey&lt;/a&gt; has recently published a &lt;a href="http://bit.ly/1fTUYMy"&gt;book&lt;/a&gt; 
about GitLab on packtpub. I am in the process of reviewing it, so wait for a new post very soon :)&lt;/p&gt;
&lt;p&gt;I'll attach the preface so you can get a glimpse of what the book covers.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In this book, we will take a tour of the version control system GitLab, which is based
on Git. It's open source and has many great features that we will learn chapter wise
as listed here. First, we will take a look at what GitLab can do for us, and later we
will see how we can install it on a server and configure it to match our needs.
The next step is to take a close look at the web interface, and then we will learn
how to handle permissions and teams, document our code, track issues, and show
example workflows.
Lastly, we will learn how to perform maintenance for our installation, including the
creation of backups and upgrading to the most recent version. We will also cover
getting in touch with the community and developers on the respective channels.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Btw, there is a limited offer on packtpub untill this Friday 3rd January, so you can grab an e-book copy
for only $5.&lt;/p&gt;</summary><category term="gitlab"></category><category term="book"></category><category term="review"></category></entry><entry><title>GSoC - Weekly update 11 and 12</title><link href="http://axilleas.me/en/blog/2013/gsoc-weekly-update-11-and-12" rel="alternate"></link><updated>2013-09-12T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.me,2013-09-12:en/blog/2013/gsoc-weekly-update-11-and-12</id><summary type="html">&lt;p&gt;So far, I managed to &lt;a href="https://fedora.axilleas.me"&gt;deploy GitLab&lt;/a&gt; on a Fedora 19 machine using only packaged gems either from
the official repos or a &lt;a href="http://repos.fedorapeople.org/repos/axilleas/gitlab/fedora-19/"&gt;custom&lt;/a&gt; one I have created.&lt;/p&gt;
&lt;p&gt;Below you will find some more info as well as the url of the testing environment. 
You can use/test it and report any issues &lt;a href="https://github.com/axilleas/gsoc/issues"&gt;here&lt;/a&gt;. If anyone needs an admin account 
for further testing just let me know. Just bare in mind that you might see some 500 errors as I will be trying some things.&lt;/p&gt;
&lt;p&gt;More or less, here is the workflow I followed:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set up GitLab in a VM following the official installation guide and test everything works&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rm -rf /vendor/bundle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Test with &lt;code&gt;bundle install --local RAILS_ENV=production&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;See the dependency differences&lt;/li&gt;
&lt;li&gt;Install with &lt;code&gt;yum&lt;/code&gt; the gems in Gemfile&lt;/li&gt;
&lt;li&gt;Replace in Gemfile/Gemfile.lock with Fedora versions&lt;/li&gt;
&lt;li&gt;Repeat steps 3,4,5,6&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For details on what is replaced see this &lt;a href="https://github.com/axilleas/gsoc/blob/master/Gemfile.lock.diff"&gt;Gemfile.lock.diff&lt;/a&gt;.
The systemd services I used can be found &lt;a href="https://github.com/axilleas/gsoc/tree/master/systemd"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are a lot to be done yet until this reaches to the official repos but that's a start.&lt;/p&gt;
&lt;h2 id="todo"&gt;TODO&lt;/h2&gt;
&lt;h3 id="short-term"&gt;Short term&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Write the gitlab.spec that will glue all the dependencies together&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="long-term"&gt;Long term&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Commit as many specs as  possible to BZ.&lt;/li&gt;
&lt;li&gt;GitLab forks: one option is to patch upstream with GitLab's changes. Second but rather avoided is to to ask FPC for an exception and package the forks as they are.&lt;/li&gt;
&lt;li&gt;Coordinate efforts with Debian ruby team (&lt;a href="http://debian.2.n7.nabble.com/Regarding-gitlab-td2843993.html"&gt;related discussion&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Deploy on rawhide: when GitLab supports rails 4. That depends on many dependencies gems as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="longer-term"&gt;Longer term&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;port to EPEL&lt;/li&gt;
&lt;/ul&gt;</summary><category term="gsoc"></category><category term="fedora"></category><category term="gitlab"></category><category term="packaging"></category></entry><entry><title>GitLab gem install benchmarking with bundler 1.4</title><link href="http://axilleas.me/en/blog/2013/gitlab-gem-install-benchmarking-with-bundler-14" rel="alternate"></link><updated>2013-08-31T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.me,2013-08-31:en/blog/2013/gitlab-gem-install-benchmarking-with-bundler-14</id><summary type="html">&lt;p&gt;It appears that the new &lt;code&gt;bundler 1.4.0&lt;/code&gt; will &lt;a href="https://github.com/bundler/bundler/pull/2481"&gt;support&lt;/a&gt; parallel gem installation. Thanks to &lt;a href="http://robots.thoughtbot.com/post/59584648154/parallel-gem-installing-using-bundler"&gt;thoughtbot's post&lt;/a&gt;
that brought that to my attention :)&lt;/p&gt;
&lt;p&gt;Now, since I've been dealing daily with GitLab for the past four months, I thought it would be a good candidate for testing.&lt;/p&gt;
&lt;p&gt;I tried it on my production server which is a QEMU VM machine. Here are the specs&lt;sup id="fnref:cpuinfo"&gt;&lt;a class="footnote-ref" href="#fn:cpuinfo" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;Operating System  : Debian 7
Linux kernel      : 3.2.0-4-amd64
RAM               : 4GB
CPU               : 4-cores
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On to the installation of bundler's &lt;code&gt;pre&lt;/code&gt; version:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;gem install bundler --pre
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next step the actual benchmarking. Make sure you either perform a new GitLab installation or
remove the &lt;code&gt;vendor/bundle/&lt;/code&gt; directory. I used the same command the official installation suggests:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;RAILS_ENV=production bundle install --without postgres development test aws
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and I kept track of the output of four different numbers of jobs to run in parallel.
As you'll see, the recommended option is to use as many jobs as your cpu cores.&lt;/p&gt;
&lt;p&gt;Next table depicts the difference in gem installation time which is pretty impressive.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#jobs&lt;/th&gt;
&lt;th align="left"&gt;time&lt;/th&gt;
&lt;th align="center"&gt;% difference&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1 (default)&lt;/td&gt;
&lt;td align="left"&gt;281.91s user 47.21s system 39% cpu &lt;strong&gt;13:43.34&lt;/strong&gt; total&lt;/td&gt;
&lt;td align="center"&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td align="left"&gt;286.28s user 48.60s system 104% cpu &lt;strong&gt;5:20.65&lt;/strong&gt; total&lt;/td&gt;
&lt;td align="center"&gt;61 %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td align="left"&gt;267.65s user 43.41s system 128% cpu &lt;strong&gt;4:01.71&lt;/strong&gt; total&lt;/td&gt;
&lt;td align="center"&gt;71 %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td align="left"&gt;262.71s user 42.90s system 136% cpu &lt;strong&gt;3:43.31&lt;/strong&gt; total&lt;/td&gt;
&lt;td align="center"&gt;73 %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td align="left"&gt;256.37s user 41.47s system 139% cpu &lt;strong&gt;3:34.05&lt;/strong&gt; total&lt;/td&gt;
&lt;td align="center"&gt;74 %&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:cpuinfo"&gt;
&lt;p&gt;See full &lt;code&gt;/proc/cpuinfo&lt;/code&gt; in this &lt;a href="https://gist.github.com/axilleas/6399274"&gt;gist&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:cpuinfo" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary></entry><entry><title>GSoC - Weekly update 9 and 10</title><link href="http://axilleas.me/en/blog/2013/gsoc-weekly-update-9-and-10" rel="alternate"></link><updated>2013-08-29T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.me,2013-08-29:en/blog/2013/gsoc-weekly-update-9-and-10</id><summary type="html">&lt;p&gt;I've been busy the past two weeks with some personal stuff so I got a little behind.
Here's what happened in the GitLab front.&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#finish-packaging-remaining-gems"&gt;Finish packaging remaining gems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitlab-deploy"&gt;GitLab deploy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#coordinate-packaging-with-debian"&gt;Coordinate packaging with Debian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#todo"&gt;TODO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="finish-packaging-remaining-gems"&gt;Finish packaging remaining gems&lt;/h2&gt;
&lt;p&gt;Now, all (hopefully) runtime dependencies are packaged and pushed in my public &lt;a href="http://repos.fedorapeople.org/repos/axilleas/gitlab/fedora-19/"&gt;gitlab-repo&lt;/a&gt;.
The majority of them are not ready for official submission in Bugzilla, but I kept track
of those that pass the standards in order to be submitted. Unfortunately they are only 5...&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;escape_utils
http_parser.rb
modernizr
yajl-ruby (already submitted https://bugzilla.redhat.com/show_bug.cgi?id=823351)
settingslogic
stamp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For now I have also packaged the forks as they need some more work to be accepted in Fedora.
&lt;a href="https://github.com/axilleas/gsoc/blob/master/packaging.md#gem-packaging-on-gitlab-forks"&gt;Here&lt;/a&gt; I have pointed out their differences with original gems.&lt;/p&gt;
&lt;h2 id="gitlab-deploy"&gt;GitLab deploy&lt;/h2&gt;
&lt;p&gt;I deployed &lt;a href="https://fedora.axilleas.me"&gt;GitLab in Fedora 19&lt;/a&gt; on a VPS following the standard installation, meaning all gems
are bundled under &lt;code&gt;vendor/bundle/&lt;/code&gt;. You can visit it, but it may not be functional as I am now in the
process of replacing the bundled gems with the system ones. Expect more info on this in a following post.&lt;/p&gt;
&lt;h2 id="coordinate-packaging-with-debian"&gt;Coordinate packaging with Debian&lt;/h2&gt;
&lt;p&gt;In other news, I found out that Debian is also in the process of packaging GitLab, so I contacted them through
their &lt;a href="http://debian.2.n7.nabble.com/Regarding-gitlab-td2843993.html"&gt;Ruby ML&lt;/a&gt; regarding this. If you follow the discussion you will understand that the main
problem for them is also how to package the forked gems. Hopefully we will come to a solution.&lt;/p&gt;
&lt;h2 id="todo"&gt;TODO&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Build dummy &lt;code&gt;gitlab.spec&lt;/code&gt; with all runtime &lt;code&gt;Requires&lt;/code&gt; for easy test install&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;bundle install --local&lt;/code&gt; and progressively test the required gems&lt;/li&gt;
&lt;/ul&gt;</summary><category term="gsoc"></category><category term="fedora"></category><category term="gitlab"></category><category term="packaging"></category></entry><entry><title>SELinux policy for nginx and GitLab unix socket in Fedora 19</title><link href="http://axilleas.me/en/blog/2013/selinux-policy-for-nginx-and-gitlab-unix-socket-in-fedora-19" rel="alternate"></link><updated>2013-08-27T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.me,2013-08-27:en/blog/2013/selinux-policy-for-nginx-and-gitlab-unix-socket-in-fedora-19</id><summary type="html">&lt;p&gt;The installation of GitLab in Fedora 19 went fine. I followed the official installation
guide with some deviations where necessary, mostly taken from the CentOS guide in
&lt;a href="https://github.com/gitlabhq/gitlab-recipes"&gt;gitlab-recipes&lt;/a&gt;. I setup nginx using the ssl &lt;a href="https://github.com/gitlabhq/gitlab-recipes/blob/master/web-server/nginx/gitlab-ssl"&gt;config&lt;/a&gt;, and poked some holes
in &lt;a href="https://github.com/gitlabhq/gitlab-recipes/tree/master/install/centos#8-configure-the-firewall"&gt;iptables&lt;/a&gt;. For systemd services I used &lt;a href="https://github.com/gitlabhq/gitlab-recipes/tree/master/init/systemd"&gt;these files&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, everything is set, configuration tests pass, services are started, nginx is started
and I finally point firefox to my FQDN (which by the way is fedora.axilleas.me, no secret)
just to see a big fat &lt;strong&gt;502 Bad Gateway&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;As wikipedia &lt;a href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes#5xx_Server_Error"&gt;suggests&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;502 Bad Gateway&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The server was acting as a gateway or proxy and received an invalid response from the upstream server.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Spot on! The server (nginx) is acting as a proxy and received an invalid response from the upstream server (unicorn).
But what was that invalid response?&lt;/p&gt;
&lt;p&gt;I could reach &lt;code&gt;ip_addr:8080&lt;/code&gt; at which unicorn was listening, but not through my fqdn which
nginx was serving. So there clearly was something wrong with nginx.&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#error-hunting"&gt;Error hunting&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#nginx"&gt;Nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#selinux-you-crafty-little-blocker"&gt;SELinux you crafty little blocker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-a-custom-selinux-policy-module"&gt;Create a custom SELinux policy module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#add-nginx-to-git-group"&gt;Add nginx to git group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tldr"&gt;TL;DR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#integration-of-selinux-error-messages-with-journald"&gt;Integration of SELinux error messages with journald&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="error-hunting"&gt;Error hunting&lt;/h2&gt;
&lt;p&gt;So the first thing when such an error occurs is to look through the logs.&lt;/p&gt;
&lt;h3 id="nginx"&gt;Nginx&lt;/h3&gt;
&lt;p&gt;In &lt;code&gt;/var/log/nginx/gitlab_error.log&lt;/code&gt; I could see this error repeating:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;2013/08/26 21:43:01 [crit] 2597#0: *50 connect() to unix:/home/git/gitlab/tmp/sockets/gitlab.socket failed (13: Permission denied) while connecting to upstream, client 12.34.56.78, server: fedora.axilleas.me, request: &amp;quot;GET /users/sign_in HTTP/1.1&amp;quot;, upstream: &amp;quot;http://unix:/home/git/gitlab/tmp/sockets/gitlab.socket:/users/sign_in&amp;quot;, host: &amp;quot;fedora.axilleas.me&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So we got a permission denied while nginx is trying to connect to the unix socket of GitLab.
After some hours searching and reading answers in stackoverflow, it sroke to me to check
whether SELinux is to blame. I set it to permissive mode with &lt;code&gt;setenforce 0&lt;/code&gt; and voila,
nginx was suddenly recieving requests.&lt;/p&gt;
&lt;h3 id="selinux-you-crafty-little-blocker"&gt;SELinux you crafty little blocker&lt;/h3&gt;
&lt;p&gt;I remembered the awesome introductory guide of &lt;a href="http://wiki.centos.org/HowTos/SELinux"&gt;SELinux&lt;/a&gt; at CentOS wiki,
which I had used when rewriting the &lt;a href="https://github.com/gitlabhq/gitlab-recipes/blob/master/install/centos/README.md"&gt;CentOS installation guide&lt;/a&gt; for GitLab
and immediately started reading.&lt;/p&gt;
&lt;p&gt;By default, SELinux log messages are written to &lt;code&gt;/var/log/audit/audit.log&lt;/code&gt; via the Linux Auditing System &lt;code&gt;auditd&lt;/code&gt;.
If the &lt;code&gt;auditd&lt;/code&gt; daemon is not running, then messages are written to &lt;code&gt;/var/log/messages&lt;/code&gt;. 
SELinux log messages are labeled with the &lt;em&gt;AVC&lt;/em&gt; keyword so that they might be easily filtered from other messages, as with &lt;code&gt;grep&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;So, by greping nginx in &lt;code&gt;/var/log/audit/audit.log&lt;/code&gt; I found those relative AVC messages, which indicate indeed
a denial of nginx connection to &lt;code&gt;gitlab.socket&lt;/code&gt;.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;type=AVC msg=audit(1377542938.307:248364): avc:  denied  { write } for  pid=2597 comm=&amp;quot;nginx&amp;quot; name=&amp;quot;gitlab.socket&amp;quot; dev=&amp;quot;vda1&amp;quot; ino=1180273 scontext=system_u:system_r:httpd_t:s0 tcontext=system_u:object_r:httpd_sys_content_t:s0 tclass=sock_file
type=AVC msg=audit(1377542938.307:248364): avc:  denied  { connectto } for  pid=2597 comm=&amp;quot;nginx&amp;quot; path=&amp;quot;/home/git/gitlab/tmp/sockets/gitlab.socket&amp;quot; scontext=system_u:system_r:httpd_t:s0 tcontext=system_u:system_r:initrc_t:s0 tclass=unix_stream_socket
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using a tool called &lt;code&gt;audit2allow&lt;/code&gt; we are able to clear the AVC messages. If you haven't got it
installed, it is shipped with the &lt;code&gt;policycoreutils-devel&lt;/code&gt; package.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;grep nginx /var/log/audit/audit.log | audit2allow
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and the result is:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;=============&lt;/span&gt; &lt;span class="nt"&gt;httpd_t&lt;/span&gt; &lt;span class="o"&gt;==============&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;!!!!&lt;/span&gt; &lt;span class="nt"&gt;This&lt;/span&gt; &lt;span class="nt"&gt;avc&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;allowed&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;current&lt;/span&gt; &lt;span class="nt"&gt;policy&lt;/span&gt;
&lt;span class="nt"&gt;allow&lt;/span&gt; &lt;span class="nt"&gt;httpd_t&lt;/span&gt; &lt;span class="nt"&gt;http_cache_port_t&lt;/span&gt;&lt;span class="nd"&gt;:tcp_socket&lt;/span&gt; &lt;span class="nt"&gt;name_connect&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;!!!!&lt;/span&gt; &lt;span class="nt"&gt;This&lt;/span&gt; &lt;span class="nt"&gt;avc&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;allowed&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;current&lt;/span&gt; &lt;span class="nt"&gt;policy&lt;/span&gt;
&lt;span class="nt"&gt;allow&lt;/span&gt; &lt;span class="nt"&gt;httpd_t&lt;/span&gt; &lt;span class="nt"&gt;httpd_log_t&lt;/span&gt;&lt;span class="nd"&gt;:file&lt;/span&gt; &lt;span class="nt"&gt;setattr&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;!!!!&lt;/span&gt; &lt;span class="nt"&gt;This&lt;/span&gt; &lt;span class="nt"&gt;avc&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;allowed&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;current&lt;/span&gt; &lt;span class="nt"&gt;policy&lt;/span&gt;
&lt;span class="nt"&gt;allow&lt;/span&gt; &lt;span class="nt"&gt;httpd_t&lt;/span&gt; &lt;span class="nt"&gt;httpd_sys_content_t&lt;/span&gt;&lt;span class="nd"&gt;:sock_file&lt;/span&gt; &lt;span class="nt"&gt;write&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;!!!!&lt;/span&gt; &lt;span class="nt"&gt;This&lt;/span&gt; &lt;span class="nt"&gt;avc&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;allowed&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;current&lt;/span&gt; &lt;span class="nt"&gt;policy&lt;/span&gt;
&lt;span class="nt"&gt;allow&lt;/span&gt; &lt;span class="nt"&gt;httpd_t&lt;/span&gt; &lt;span class="nt"&gt;initrc_t&lt;/span&gt;&lt;span class="nd"&gt;:unix_stream_socket&lt;/span&gt; &lt;span class="nt"&gt;connectto&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;!!!!&lt;/span&gt; &lt;span class="nt"&gt;This&lt;/span&gt; &lt;span class="nt"&gt;avc&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;allowed&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;current&lt;/span&gt; &lt;span class="nt"&gt;policy&lt;/span&gt;
&lt;span class="nt"&gt;allow&lt;/span&gt; &lt;span class="nt"&gt;httpd_t&lt;/span&gt; &lt;span class="nt"&gt;user_home_dir_t&lt;/span&gt;&lt;span class="nd"&gt;:dir&lt;/span&gt; &lt;span class="nt"&gt;search&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;!!!!&lt;/span&gt; &lt;span class="nt"&gt;This&lt;/span&gt; &lt;span class="nt"&gt;avc&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;allowed&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;current&lt;/span&gt; &lt;span class="nt"&gt;policy&lt;/span&gt;
&lt;span class="nt"&gt;allow&lt;/span&gt; &lt;span class="nt"&gt;httpd_t&lt;/span&gt; &lt;span class="nt"&gt;user_home_t&lt;/span&gt;&lt;span class="nd"&gt;:dir&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="n"&gt;getattr&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;!!!!&lt;/span&gt; &lt;span class="nt"&gt;This&lt;/span&gt; &lt;span class="nt"&gt;avc&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;allowed&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;current&lt;/span&gt; &lt;span class="nt"&gt;policy&lt;/span&gt;
&lt;span class="nt"&gt;allow&lt;/span&gt; &lt;span class="nt"&gt;httpd_t&lt;/span&gt; &lt;span class="nt"&gt;user_home_t&lt;/span&gt;&lt;span class="nd"&gt;:sock_file&lt;/span&gt; &lt;span class="nt"&gt;write&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;!!!!&lt;/span&gt; &lt;span class="nt"&gt;This&lt;/span&gt; &lt;span class="nt"&gt;avc&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;allowed&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;current&lt;/span&gt; &lt;span class="nt"&gt;policy&lt;/span&gt;
&lt;span class="nt"&gt;allow&lt;/span&gt; &lt;span class="nt"&gt;httpd_t&lt;/span&gt; &lt;span class="nt"&gt;var_run_t&lt;/span&gt;&lt;span class="nd"&gt;:file&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;write&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These are the policies that should be used with SELinux. Notice that &lt;code&gt;user_home&lt;/code&gt; is essential
since GitLab's &lt;code&gt;APP_ROOT&lt;/code&gt; is in &lt;code&gt;/home/git/&lt;/code&gt;. Similarly, you notice a policy related to 
the denied socket connection: &lt;code&gt;unix_stream_socket connectto&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="create-a-custom-selinux-policy-module"&gt;Create a custom SELinux policy module&lt;/h2&gt;
&lt;p&gt;After all the investigation we are closer to the solution. All we have to do is use &lt;code&gt;audit2allow&lt;/code&gt;
to generate a set of policy rules that would allow the required actions. We can generate
a local nginx Type Enforcement policy file (nginx.te): &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nt"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;nginx&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;audit&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;audit&lt;/span&gt;&lt;span class="nc"&gt;.log&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;audit2allow&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="nt"&gt;nginx&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;nginx&lt;/span&gt;&lt;span class="nc"&gt;.te&lt;/span&gt;
&lt;span class="nt"&gt;cat&lt;/span&gt; &lt;span class="nt"&gt;nginx&lt;/span&gt;&lt;span class="nc"&gt;.te&lt;/span&gt;


&lt;span class="nt"&gt;module&lt;/span&gt; &lt;span class="nt"&gt;nginx&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="nc"&gt;.0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nt"&gt;require&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;var_run_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;user_home_dir_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;httpd_log_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;httpd_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;user_home_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;httpd_sys_content_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;initrc_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;http_cache_port_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;sock_file&lt;/span&gt; &lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;unix_stream_socket&lt;/span&gt; &lt;span class="n"&gt;connectto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="n"&gt;getattr&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;class&lt;/span&gt; &lt;span class="nt"&gt;file&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;write&lt;/span&gt; &lt;span class="n"&gt;setattr&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;class&lt;/span&gt; &lt;span class="nt"&gt;tcp_socket&lt;/span&gt; &lt;span class="nt"&gt;name_connect&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;=============&lt;/span&gt; &lt;span class="nt"&gt;httpd_t&lt;/span&gt; &lt;span class="o"&gt;==============&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;!!!!&lt;/span&gt; &lt;span class="nt"&gt;This&lt;/span&gt; &lt;span class="nt"&gt;avc&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;allowed&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;current&lt;/span&gt; &lt;span class="nt"&gt;policy&lt;/span&gt;
&lt;span class="nt"&gt;allow&lt;/span&gt; &lt;span class="nt"&gt;httpd_t&lt;/span&gt; &lt;span class="nt"&gt;http_cache_port_t&lt;/span&gt;&lt;span class="nd"&gt;:tcp_socket&lt;/span&gt; &lt;span class="nt"&gt;name_connect&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;allow&lt;/span&gt; &lt;span class="nt"&gt;httpd_t&lt;/span&gt; &lt;span class="nt"&gt;httpd_log_t&lt;/span&gt;&lt;span class="nd"&gt;:file&lt;/span&gt; &lt;span class="nt"&gt;setattr&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;allow&lt;/span&gt; &lt;span class="nt"&gt;httpd_t&lt;/span&gt; &lt;span class="nt"&gt;httpd_sys_content_t&lt;/span&gt;&lt;span class="nd"&gt;:sock_file&lt;/span&gt; &lt;span class="nt"&gt;write&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;allow&lt;/span&gt; &lt;span class="nt"&gt;httpd_t&lt;/span&gt; &lt;span class="nt"&gt;initrc_t&lt;/span&gt;&lt;span class="nd"&gt;:unix_stream_socket&lt;/span&gt; &lt;span class="nt"&gt;connectto&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;!!!!&lt;/span&gt; &lt;span class="nt"&gt;This&lt;/span&gt; &lt;span class="nt"&gt;avc&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;allowed&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;current&lt;/span&gt; &lt;span class="nt"&gt;policy&lt;/span&gt;
&lt;span class="nt"&gt;allow&lt;/span&gt; &lt;span class="nt"&gt;httpd_t&lt;/span&gt; &lt;span class="nt"&gt;user_home_dir_t&lt;/span&gt;&lt;span class="nd"&gt;:dir&lt;/span&gt; &lt;span class="nt"&gt;search&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;!!!!&lt;/span&gt; &lt;span class="nt"&gt;This&lt;/span&gt; &lt;span class="nt"&gt;avc&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;allowed&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;current&lt;/span&gt; &lt;span class="nt"&gt;policy&lt;/span&gt;
&lt;span class="nt"&gt;allow&lt;/span&gt; &lt;span class="nt"&gt;httpd_t&lt;/span&gt; &lt;span class="nt"&gt;user_home_t&lt;/span&gt;&lt;span class="nd"&gt;:dir&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="n"&gt;getattr&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;allow&lt;/span&gt; &lt;span class="nt"&gt;httpd_t&lt;/span&gt; &lt;span class="nt"&gt;user_home_t&lt;/span&gt;&lt;span class="nd"&gt;:sock_file&lt;/span&gt; &lt;span class="nt"&gt;write&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;allow&lt;/span&gt; &lt;span class="nt"&gt;httpd_t&lt;/span&gt; &lt;span class="nt"&gt;var_run_t&lt;/span&gt;&lt;span class="nd"&gt;:file&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;write&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We are not done yet, as this is a file for review only. We can then go ahead and use audit2allow 
to make a custom policy module to allow these actions: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;grep nginx /var/log/audit/audit.log | audit2allow -M nginx
semodule -i nginx.pp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can check the policy module loaded correctly by listing loaded modules with &lt;code&gt;semodule -l&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After that, remember to enable SELinux again with &lt;code&gt;setenforce 1&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="add-nginx-to-git-group"&gt;Add nginx to git group&lt;/h2&gt;
&lt;p&gt;Unrelated to this article, but it is also needed for nginx to access the unix socket.
First we add nginx to git group, and then we make sure the group that owns &lt;code&gt;/home/git/&lt;/code&gt;
has read and execute permissions:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;usermod -a -G git nginx
chmod g+rx /home/git/
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="tldr"&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;To fix all nginx 502 issues, as root run:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;yum install -y policycoreutils-{python,devel}
grep nginx /var/log/audit/audit.log | audit2allow -M nginx
semodule -i nginx.pp
usermod -a -G git nginx
chmod g+rx /home/git/
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="integration-of-selinux-error-messages-with-journald"&gt;Integration of SELinux error messages with journald&lt;/h2&gt;
&lt;p&gt;In a very &lt;a href="http://danwalsh.livejournal.com/65777.html"&gt;interesting article&lt;/a&gt;, Dan Walsh explains how this whole process of error
hunting will be much easier with Fedora 20. I urge you to read it.&lt;/p&gt;
&lt;p&gt;With the upcoming changes, the error would have appeared at systemd's status log:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;systemctl status nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and the possible solutions with:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;journalctl  -r -o verbose -u nginx.service
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pretty cool, huh?&lt;/p&gt;</summary><category term="selinux"></category><category term="fedora"></category><category term="gitlab"></category><category term="unixsocket"></category><category term="nginx"></category></entry><entry><title>GSoC - Weekly update 7 and 8</title><link href="http://axilleas.me/en/blog/2013/gsoc-weekly-update-7-and-8" rel="alternate"></link><updated>2013-08-13T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.me,2013-08-13:en/blog/2013/gsoc-weekly-update-7-and-8</id><summary type="html">&lt;p&gt;The past week or so, I have been trying to package every gem GitLab needs, in Fedora 19.
This is something I should have done from the start, but better late than never.
Now that I have quite learnt the rubygem packaging process, I follow a certain
workflow that gets the job done pretty quickly (described below).&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://repos.fedorapeople.org/repos/axilleas/gitlab/fedora-19/"&gt;repo&lt;/a&gt; I had setup, now includes the majority of the gems needed for a working
GitLab instance.&lt;/p&gt;
&lt;p&gt;Of course many of them do not pass the standards in order to submit to Bugzilla,
meaning there are some gems missing the license file, the tests are not shipped or
fail, etc. The only thing that is correct in all of them is the declaration of files
to be incuded in the final packaged gem, that is the &lt;code&gt;%files&lt;/code&gt; and &lt;code&gt;%files doc&lt;/code&gt; macros.&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#workflow-of-quick-packaging"&gt;Workflow of quick packaging&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#notes"&gt;Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#difficulties-in-gem-versions"&gt;Difficulties in gem versions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#todo"&gt;TODO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="workflow-of-quick-packaging"&gt;Workflow of quick packaging&lt;/h2&gt;
&lt;p&gt;For the whole time I've been packaging gems, I use a VPS running Fedora 19. Luckily it is
a pretty strong machine (4GB RAM, 4 cpu) and building a rubygem in mock takes 1-3 minutes&lt;sup id="fnref:cloud"&gt;&lt;a class="footnote-ref" href="#fn:cloud" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;In general, I first check in the &lt;a href="https://fedoraproject.org/wiki/User:Axilleas/GitLab#Packages"&gt;wiki table&lt;/a&gt; what's missing, and then build the next gem in line.
I have 2 screen windows open (among others): one pointing in &lt;code&gt;~/rpmbuild/SPECS/&lt;/code&gt;
and the other to &lt;code&gt;~/rpmbuild/SRPMS/&lt;/code&gt;. Here are the steps onwards.&lt;/p&gt;
&lt;p&gt;On the first screen I run a simple &lt;a href="https://github.com/axilleas/gsoc/blob/master/gemget"&gt;script&lt;/a&gt; that downloads the gem file 
in &lt;code&gt;~/rpmbuild/SOURCES/&lt;/code&gt; and then runs gem2rpm on it with the resulting spec 
saved in &lt;code&gt;~/rpmbuild/SPECS/&lt;/code&gt;. I then open the spec with vim, open the url and 
check if the license tag is filled. If not, I check in the url for the license file. &lt;/p&gt;
&lt;p&gt;Inside vim, I save the changes with &lt;code&gt;:w&lt;/code&gt; and run &lt;code&gt;:!rpmbuild -ba %&lt;/code&gt;. Normally,
this will fail, which is good. We need the info provided by the &lt;code&gt;error: Installed (but unpackaged) file(s) found:&lt;/code&gt;
I copy all these stuff in a temp file (I have geany open) and then I fix the
&lt;code&gt;%files&lt;/code&gt; and &lt;code&gt;%files doc&lt;/code&gt; macro accordingly. Save and run &lt;code&gt;:!rpmbuild -ba %&lt;/code&gt;
again to check everything is in order. If the build exits with no error, I try
to make the tests work. I give myself 10-15 minutes topfor each gem, as I am
targeting to test the GitLab installation and not submit them to Bugzilla.
Of course during the whole process, I keep track what fails and what not, so
that I can come back later. You can see &lt;a href="https://github.com/axilleas/gsoc/blob/master/packaging.md"&gt;here&lt;/a&gt; my progress.&lt;/p&gt;
&lt;p&gt;After the build runs fine, I use &lt;code&gt;mock&lt;/code&gt; to test that a package is not missing
from the BuildRequires. Exit the &lt;code&gt;rpmbuild&lt;/code&gt; screen, enter &lt;code&gt;mock&lt;/code&gt;, which is in
&lt;code&gt;~/rpmbuild/SRPMS/&lt;/code&gt;, so with a simple &lt;code&gt;mock rubygem-foo-1.0-1.src.rpm&lt;/code&gt; begins
the packaging process. If something breaks, back to &lt;code&gt;rpmbuild&lt;/code&gt; screen, adjust
the spec, save it, run &lt;code&gt;:!rpmbuild -bs %&lt;/code&gt; to just produce the srpm, exit screen,
enter &lt;code&gt;mock&lt;/code&gt; screen, run &lt;code&gt;mock rubygem-foo-1.0-1.src.rpm&lt;/code&gt; again. And the circle
goes on until I have a working rpm.&lt;/p&gt;
&lt;p&gt;When the package builds fine in mock, I copy the produced rpms in &lt;code&gt;~/repo/gitlab/fedora-19/&lt;/code&gt;
with &lt;code&gt;cp /var/lib/mock/fedora-19-x86_64/result/*rpm ~/repos/gitlab/fedora-19&lt;/code&gt;.
From there, I move each package to its destined folder and using a modified &lt;a href="https://github.com/axilleas/gsoc/blob/master/repo-update"&gt;script&lt;/a&gt;
of &lt;a href="https://fedoraproject.org/wiki/Fedorapeople_Repos#Script_for_easy_repo_update"&gt;repo_update&lt;/a&gt; I sync the packages to my repo hosted on fedorapeople.org.&lt;/p&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;Using of mock is of utter importance. Building in a clean chrooted environment,
you ensure that a package builds and installs cleanly without any dependencies missing,
on other machines as well.&lt;/p&gt;
&lt;p&gt;The use of the repository is two-fold. Other than the default nature of the repo 
where you could easily install and test GitLab, it also serves as a building point 
where you have packages needed by other packages and so on, that are not yet in Fedora. 
Sure you could use &lt;code&gt;mock --init&lt;/code&gt; as described &lt;a href="https://fedoraproject.org/wiki/Using_Mock_to_test_package_builds#Building_packages_that_depend_on_packages_not_in_a_repository"&gt;here&lt;/a&gt;, but that is quite
a burden when there is a multiple dependency issue. For that purpose I made my 
mock default config being a copy of the &lt;code&gt;fedora-19-x86_64.cfg&lt;/code&gt; plus the information of the
&lt;a href="http://repos.fedorapeople.org/repos/axilleas/gitlab/fedora-gitlab.repo"&gt;fedora-gitlab.repo&lt;/a&gt;. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sudo cp /etc/mock/fedora-19-x86_64 /etc/mock/gitlab-x86_64.cfg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo vim /etc/mock/gitlab-x86_64.cfg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Append the info of &lt;a href="http://repos.fedorapeople.org/repos/axilleas/gitlab/fedora-gitlab.repo"&gt;fedora-gitlab.repo&lt;/a&gt; (be carefull of the &lt;code&gt;"""&lt;/code&gt;, they must be last)&lt;/li&gt;
&lt;li&gt;Repeat 1-3 for a &lt;code&gt;i686&lt;/code&gt; config.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo ln -s /etc/mock/gitlab-x86_64 /etc/mock/default.cfg&lt;/code&gt; so that I don't have to
    repeatedly invoking the mock configs with the &lt;code&gt;-r&lt;/code&gt; flag.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ultimately, &lt;code&gt;gitlab-x86_64.cfg&lt;/code&gt; looks like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="x"&gt;config_opts[&amp;#39;root&amp;#39;] = &amp;#39;fedora-19-x86_64&amp;#39;&lt;/span&gt;
&lt;span class="x"&gt;config_opts[&amp;#39;target_arch&amp;#39;] = &amp;#39;x86_64&amp;#39;&lt;/span&gt;
&lt;span class="x"&gt;config_opts[&amp;#39;legal_host_arches&amp;#39;] = (&amp;#39;x86_64&amp;#39;,)&lt;/span&gt;
&lt;span class="x"&gt;config_opts[&amp;#39;chroot_setup_cmd&amp;#39;] = &amp;#39;groupinstall buildsys-build&amp;#39;&lt;/span&gt;
&lt;span class="x"&gt;config_opts[&amp;#39;dist&amp;#39;] = &amp;#39;fc19&amp;#39;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; only useful for --resultdir variable subst&lt;/span&gt;

&lt;span class="x"&gt;config_opts[&amp;#39;yum.conf&amp;#39;] = &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;[main]&lt;/span&gt;
&lt;span class="x"&gt;cachedir=/var/cache/yum&lt;/span&gt;
&lt;span class="x"&gt;debuglevel=1&lt;/span&gt;
&lt;span class="x"&gt;reposdir=/dev/null&lt;/span&gt;
&lt;span class="x"&gt;logfile=/var/log/yum.log&lt;/span&gt;
&lt;span class="x"&gt;retries=20&lt;/span&gt;
&lt;span class="x"&gt;obsoletes=1&lt;/span&gt;
&lt;span class="x"&gt;gpgcheck=0&lt;/span&gt;
&lt;span class="x"&gt;assumeyes=1&lt;/span&gt;
&lt;span class="x"&gt;syslog_ident=mock&lt;/span&gt;
&lt;span class="x"&gt;syslog_device=&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; repos&lt;/span&gt;

&lt;span class="x"&gt;[fedora]&lt;/span&gt;
&lt;span class="x"&gt;name=fedora&lt;/span&gt;
&lt;span class="x"&gt;mirrorlist=http://mirrors.fedoraproject.org/mirrorlist?repo=fedora-19&amp;amp;arch=x86_64&lt;/span&gt;
&lt;span class="x"&gt;failovermethod=priority&lt;/span&gt;

&lt;span class="x"&gt;[updates]&lt;/span&gt;
&lt;span class="x"&gt;name=updates&lt;/span&gt;
&lt;span class="x"&gt;mirrorlist=http://mirrors.fedoraproject.org/mirrorlist?repo=updates-released-f19&amp;amp;arch=x86_64&lt;/span&gt;
&lt;span class="x"&gt;failovermethod=priority&lt;/span&gt;

&lt;span class="x"&gt;[updates-testing]&lt;/span&gt;
&lt;span class="x"&gt;name=updates-testing&lt;/span&gt;
&lt;span class="x"&gt;mirrorlist=http://mirrors.fedoraproject.org/mirrorlist?repo=updates-testing-f19&amp;amp;arch=x86_64&lt;/span&gt;
&lt;span class="x"&gt;failovermethod=priority&lt;/span&gt;
&lt;span class="x"&gt;enabled=0&lt;/span&gt;

&lt;span class="x"&gt;[local]&lt;/span&gt;
&lt;span class="x"&gt;name=local&lt;/span&gt;
&lt;span class="x"&gt;baseurl=http://kojipkgs.fedoraproject.org/repos/f19-build/latest/x86_64/&lt;/span&gt;
&lt;span class="x"&gt;cost=2000&lt;/span&gt;
&lt;span class="x"&gt;enabled=0&lt;/span&gt;

&lt;span class="x"&gt;[fedora-debuginfo]&lt;/span&gt;
&lt;span class="x"&gt;name=fedora-debuginfo&lt;/span&gt;
&lt;span class="x"&gt;mirrorlist=http://mirrors.fedoraproject.org/mirrorlist?repo=fedora-debug-19&amp;amp;arch=x86_64&lt;/span&gt;
&lt;span class="x"&gt;failovermethod=priority&lt;/span&gt;
&lt;span class="x"&gt;enabled=0&lt;/span&gt;

&lt;span class="x"&gt;[updates-debuginfo]&lt;/span&gt;
&lt;span class="x"&gt;name=updates-debuginfo&lt;/span&gt;
&lt;span class="x"&gt;mirrorlist=http://mirrors.fedoraproject.org/mirrorlist?repo=updates-released-debug-f19&amp;amp;arch=x86_64&lt;/span&gt;
&lt;span class="x"&gt;failovermethod=priority&lt;/span&gt;
&lt;span class="x"&gt;enabled=0&lt;/span&gt;

&lt;span class="x"&gt;[updates-testing-debuginfo]&lt;/span&gt;
&lt;span class="x"&gt;name=updates-testing-debuginfo&lt;/span&gt;
&lt;span class="x"&gt;mirrorlist=http://mirrors.fedoraproject.org/mirrorlist?repo=updates-testing-debug-f19&amp;amp;arch=x86_64&lt;/span&gt;
&lt;span class="x"&gt;failovermethod=priority&lt;/span&gt;
&lt;span class="x"&gt;enabled=0&lt;/span&gt;

&lt;span class="x"&gt;[fedora-gitlab]&lt;/span&gt;
&lt;span class="x"&gt;name=Unofficial GitLab repository for Fedora&lt;/span&gt;
&lt;span class="x"&gt;baseurl=http://repos.fedorapeople.org/repos/axilleas/gitlab/fedora-&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;releasever&lt;/span&gt;&lt;span class="x"&gt;/&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;basearch&lt;/span&gt;&lt;span class="x"&gt;/&lt;/span&gt;
&lt;span class="x"&gt;enabled=1&lt;/span&gt;
&lt;span class="x"&gt;skip_if_unavailable=1&lt;/span&gt;
&lt;span class="x"&gt;gpgcheck=0&lt;/span&gt;

&lt;span class="x"&gt;[fedora-gitlab-noarch]&lt;/span&gt;
&lt;span class="x"&gt;name=Unofficial GitLab repository for Fedora&lt;/span&gt;
&lt;span class="x"&gt;baseurl=http://repos.fedorapeople.org/repos/axilleas/gitlab/fedora-&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;releasever&lt;/span&gt;&lt;span class="x"&gt;/noarch/&lt;/span&gt;
&lt;span class="x"&gt;enabled=1&lt;/span&gt;
&lt;span class="x"&gt;skip_if_unavailable=1&lt;/span&gt;
&lt;span class="x"&gt;gpgcheck=0&lt;/span&gt;

&lt;span class="x"&gt;[fedora-gitlab-source]&lt;/span&gt;
&lt;span class="x"&gt;name=Unofficial GitLab repository for Fedora - Source&lt;/span&gt;
&lt;span class="x"&gt;baseurl=http://repos.fedorapeople.org/repos/axilleas/gitlab/fedora-&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;releasever&lt;/span&gt;&lt;span class="x"&gt;/SRPMS&lt;/span&gt;
&lt;span class="x"&gt;enabled=0&lt;/span&gt;
&lt;span class="x"&gt;skip_if_unavailable=1&lt;/span&gt;
&lt;span class="x"&gt;gpgcheck=0&lt;/span&gt;

&lt;span class="x"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="difficulties-in-gem-versions"&gt;Difficulties in gem versions&lt;/h2&gt;
&lt;p&gt;The most challenging aspect of my whole GSoC project is not how to package the 
~ 80 gems needed for GitLab at runtime, but how to coordinate GitLab-Fedora-Upstream
and their different versions of gems.&lt;/p&gt;
&lt;p&gt;In this process, there are two key stoppers that need to be resolved.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;For gems with versions: GitLab &amp;lt; Fedora, I will have to test if they properly work.
    Else, a gem with lower version should be packaged for Fedora.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For gems with versions: GitLab &amp;gt; Fedora, if GitLab == Upstream, it is easy to update by asking the maintainer to update, 
    BUT if Fedora &amp;lt; GitLab &amp;lt; Upstream , it is &lt;em&gt;hard&lt;/em&gt;, as it is needed a version lower than the
    current upstream, and in Fedora we try to have the latest version. Of course
    that is debatable and if really needed, a gem with lower version than upstream
    could be submitted.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="todo"&gt;TODO&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;There are about 15 more gems to package&lt;/li&gt;
&lt;li&gt;Somehow deal with GitLab's forks&lt;/li&gt;
&lt;li&gt;Commit to github the specs i have built so far with propper commit messages&lt;/li&gt;
&lt;li&gt;Test in a gitlab-vagrant VM some new gem versions I built and submit PR with updated Gemfile&lt;/li&gt;
&lt;li&gt;Start packaging the GitLab app itself (get a clue from Gitorious)&lt;/li&gt;
&lt;li&gt;Check which gems are ok so far to submit to Bugzilla&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:cloud"&gt;
&lt;p&gt;All that thanks to &lt;a href="https://okeanos.grnet.gr/home/"&gt;okeanos&lt;/a&gt;, a &lt;a href="https://www.grnet.gr/en/"&gt;GRNET&lt;/a&gt;'s public cloud service which provides cloud services to the whole Greek research and academic community. More info &lt;a href="http://www.synnefo.org/"&gt;here&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:cloud" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="gsoc"></category><category term="fedora"></category><category term="gitlab"></category><category term="packaging"></category></entry><entry><title>GSoC - Weekly update 6</title><link href="http://axilleas.me/en/blog/2013/gsoc-weekly-update-6" rel="alternate"></link><updated>2013-07-30T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.me,2013-07-30:en/blog/2013/gsoc-weekly-update-6</id><summary type="html">&lt;p&gt;Here is what I have been doing the past week.&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#packages"&gt;Packages&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#charlock_holmes"&gt;charlock_holmes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#omniauth"&gt;omniauth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sanitize"&gt;sanitize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orm_adapter"&gt;orm_adapter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#update-to-gitlab-54"&gt;Update to GitLab 5.4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="packages"&gt;Packages&lt;/h2&gt;
&lt;h3 id="charlock_holmes"&gt;charlock_holmes&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=989143"&gt;Pending review&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This one gave me some headaches as it is a gem with c extensions and as it turned
out I didn't ship the soname in the right directory. It took me some time but I
finally understood how that works. Here are the steps I follow when packaging gems
with c extensions.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;From the initial spec file that gem2rpm creates, comment the line below:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;mv %&lt;span class="o"&gt;{&lt;/span&gt;buildroot&lt;span class="o"&gt;}&lt;/span&gt;%&lt;span class="o"&gt;{&lt;/span&gt;gem_instdir&lt;span class="o"&gt;}&lt;/span&gt;/lib/shared_object.so %&lt;span class="o"&gt;{&lt;/span&gt;buildroot&lt;span class="o"&gt;}&lt;/span&gt;%&lt;span class="o"&gt;{&lt;/span&gt;gem_extdir_mri&lt;span class="o"&gt;}&lt;/span&gt;/lib/
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;rpmbuild -bi rubygem-charlock_holmes.spec&lt;/code&gt; in order not to remove the
  &lt;em&gt;BUILDROOT&lt;/em&gt; directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find the soname files that get created:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;find ~/rpmbuild/BUILDROOT/rubygem-charlock_holmes-0.6.9.4-1.fc19.x86_64/ -name &lt;span class="s1"&gt;&amp;#39;*.so&amp;#39;&lt;/span&gt;

Output
------
~/rpmbuild/BUILDROOT/rubygem-charlock_holmes-0.6.9.4-1.fc19.x86_64/usr/share/gems/gems/charlock_holmes-0.6.9.4/ext/charlock_holmes/charlock_holmes.so
~/rpmbuild/BUILDROOT/rubygem-charlock_holmes-0.6.9.4-1.fc19.x86_64/usr/share/gems/gems/charlock_holmes-0.6.9.4/lib/charlock_holmes/charlock_holmes.so
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are 2 files, one in &lt;code&gt;lib/&lt;/code&gt; dir and one in &lt;code&gt;ext/&lt;/code&gt; dir. We should ship the one in
&lt;code&gt;lib/&lt;/code&gt; dir, so in our spec file we replace the line that we commented before with:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;mkdir -p %&lt;span class="o"&gt;{&lt;/span&gt;buildroot&lt;span class="o"&gt;}&lt;/span&gt;%&lt;span class="o"&gt;{&lt;/span&gt;gem_extdir_mri&lt;span class="o"&gt;}&lt;/span&gt;/lib/%&lt;span class="o"&gt;{&lt;/span&gt;gem_name&lt;span class="o"&gt;}&lt;/span&gt;/
mv %&lt;span class="o"&gt;{&lt;/span&gt;buildroot&lt;span class="o"&gt;}&lt;/span&gt;%&lt;span class="o"&gt;{&lt;/span&gt;gem_libdir&lt;span class="o"&gt;}&lt;/span&gt;/%&lt;span class="o"&gt;{&lt;/span&gt;gem_name&lt;span class="o"&gt;}&lt;/span&gt;/%&lt;span class="o"&gt;{&lt;/span&gt;gem_name&lt;span class="o"&gt;}&lt;/span&gt;.so %&lt;span class="o"&gt;{&lt;/span&gt;buildroot&lt;span class="o"&gt;}&lt;/span&gt;%&lt;span class="o"&gt;{&lt;/span&gt;gem_extdir_mri&lt;span class="o"&gt;}&lt;/span&gt;/lib/%&lt;span class="o"&gt;{&lt;/span&gt;gem_name&lt;span class="o"&gt;}&lt;/span&gt;/

&lt;span class="c"&gt;# Remove the binary extension sources and build leftovers.&lt;/span&gt;
rm -rf %&lt;span class="o"&gt;{&lt;/span&gt;buildroot&lt;span class="o"&gt;}&lt;/span&gt;/%&lt;span class="o"&gt;{&lt;/span&gt;gem_instdir&lt;span class="o"&gt;}&lt;/span&gt;/ext/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See what I did there? The lib dir when I used find was:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;~/rpmbuild/BUILDROOT/rubygem-charlock_holmes-0.6.9.4-1.fc19.x86_64/usr/share/gems/gems/charlock_holmes-0.6.9.4/lib/charlock_holmes/charlock_holmes.so
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which when written with macros translates to:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;%{buildroot}%{gem_libdir}/%{gem_name}/%{gem_name}.so&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which in turn gets copied to:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;%&lt;span class="o"&gt;{&lt;/span&gt;buildroot&lt;span class="o"&gt;}&lt;/span&gt;%&lt;span class="o"&gt;{&lt;/span&gt;gem_extdir_mri&lt;span class="o"&gt;}&lt;/span&gt;/lib/%&lt;span class="o"&gt;{&lt;/span&gt;gem_name&lt;span class="o"&gt;}&lt;/span&gt;/
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tl;dr;
Follow the directory structure of &lt;code&gt;lib/&lt;/code&gt; where the soname resides and remove the
&lt;code&gt;ext/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Beware that there are cases where this structure is not the same and the soname
is found right in &lt;code&gt;lib/&lt;/code&gt; dir and not in &lt;code&gt;lib/%{gem_name}/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Take for example &lt;a href="http://pkgs.fedoraproject.org/cgit/rubygem-pg.git/tree/rubygem-pg.spec#n61"&gt;rubygem-pg&lt;/a&gt; compared to &lt;a href="https://github.com/axilleas/fedora/blob/master/packages/rubygem-charlock_holmes/rubygem-charlock_holmes.spec#L54"&gt;rubygem-charlock_holmes&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="omniauth"&gt;omniauth&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=989775"&gt;Pending review&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I had some hard time with this too as it was failing the test suite. It turned out
I was missing a BuildRequires dependency. A huge thanks to &lt;a href="https://fedoraproject.org/wiki/User:Ktdreyer"&gt;Ken Dreyer&lt;/a&gt; who
pointed me out to the right direction in the &lt;a href="https://lists.fedoraproject.org/pipermail/ruby-sig/2013-July/001393.html"&gt;mailing list&lt;/a&gt; as well as giving
some nice tips about the packaging workflow.&lt;/p&gt;
&lt;h3 id="sanitize"&gt;sanitize&lt;/h3&gt;
&lt;p&gt;This was an easy one and was immediately accepted when &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=989132"&gt;reviewed&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="orm_adapter"&gt;orm_adapter&lt;/h3&gt;
&lt;p&gt;This is pending a &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=988938"&gt;review&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="update-to-gitlab-54"&gt;Update to GitLab 5.4&lt;/h2&gt;
&lt;p&gt;I updated the dependencies to version 5.4. Overall nothing changed except for the
addition of unicorn, which is already submitted for &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=786636"&gt;review&lt;/a&gt;.&lt;/p&gt;</summary><category term="gsoc"></category><category term="fedora"></category><category term="gitlab"></category><category term="packaging"></category></entry><entry><title>GSoC - Weekly update 5</title><link href="http://axilleas.me/en/blog/2013/gsoc-weekly-update-5" rel="alternate"></link><updated>2013-07-22T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.me,2013-07-22:en/blog/2013/gsoc-weekly-update-5</id><summary type="html">&lt;p&gt;I can't believe that a month has already passed! I keep learning new things, mostly
on packaging, and the cool fact is that many of them are through my Review Requests.
The discussion between the reviewer and the reviewee can sometimes be very productive
leading to learning new things I previously ignored.&lt;/p&gt;
&lt;p&gt;This post would be a long one but I decided to split it up, because some sections
deserved there own space.&lt;/p&gt;
&lt;p&gt;The first split is named &lt;a href="http://axilleas.me/en/blog/2013/i-got-approved-as-a-packager-now-what"&gt;I got approved as a packager, now what?&lt;/a&gt;
and it refers to all new Fedora packagers :)&lt;/p&gt;
&lt;p&gt;The second one is going to talk about maintaining an unofficial repo and I will
describe my workflow and the potential scripts that facilitate the whole process.&lt;/p&gt;
&lt;p&gt;And here is the rest of my progress during the fifth week. &lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#packages"&gt;Packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-package-a-ruby-gem-blog-post-status"&gt;How to package a Ruby gem - blog post status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#todo-next-week"&gt;TODO next week&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="packages"&gt;Packages&lt;/h2&gt;
&lt;p&gt;This is the first time that some packages of mine got approved:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=985358"&gt;hashie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=982679"&gt;bootstrap-sass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=969877"&gt;timers&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I am also working on &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=927374"&gt;rubygem-rugged&lt;/a&gt; as a reviewer this time. This is much more
difficult than being the reviewee, since it needs a lot testing from your side
and a good understanding of the guidelines.&lt;/p&gt;
&lt;p&gt;And of course there is a bunch of other gems I am working on but not ready to
submit yet. As always, my progress is noted in this &lt;a href="https://trello.com/c/IOzzF6MQ/16-gem-packaging-phase-1"&gt;trello board&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="how-to-package-a-ruby-gem-blog-post-status"&gt;How to package a Ruby gem - blog post status&lt;/h2&gt;
&lt;p&gt;As you may know, I am in the process of writing an article on how to package Ruby
gems in Fedora. This is the only type of package I have been dealing with for the
past months, so I am far from an avid packager in general. But, as a structure
and wiki freak I like to have everything in order, even understandable by completely
newbies, so this is going to be very comprehensive. Progress is being made :)&lt;/p&gt;
&lt;p&gt;You can now watch the progress &lt;a href="https://trello.com/c/oGOKkvBn/6-weekly-blog-posts"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="todo-next-week"&gt;TODO next week&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Submit more packages&lt;/li&gt;
&lt;li&gt;Set up GitLab on a Fedora machine and check if packaged bundler works&lt;/li&gt;
&lt;li&gt;Take on reviews of packages concerning the gsoc project&lt;/li&gt;
&lt;/ul&gt;</summary><category term="gsoc"></category><category term="fedora"></category><category term="gitlab"></category><category term="packaging"></category></entry><entry><title>I got approved as a packager, now what?</title><link href="http://axilleas.me/en/blog/2013/i-got-approved-as-a-packager-now-what" rel="alternate"></link><updated>2013-07-21T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.me,2013-07-21:en/blog/2013/i-got-approved-as-a-packager-now-what</id><summary type="html">&lt;p&gt;This must have been the most intense week in terms of learning how the build 
system/process work in Fedora. I finally got approved as a packager and that means
more responsibility from my side. Unfortunately, the instrusctions in the wiki
are sometimes sparsed into different places and one has to read a lot and ask
around in order not to make any mistakes. For a newcomer all this information
is at least overwhelming and you have to even put a lot of thinking into asking
the right question in order to get the right answer.&lt;/p&gt;
&lt;p&gt;I'm starting to believe that this is intentional as a continuous test to one's
understanding of how things work in Fedora. No pain no gain they say. &lt;/p&gt;
&lt;p&gt;Anyway, I kinda managed to understand most of it and below I will describe the
process I followed hoping to help any future-to-be packagers. I will describe the
whole process of my first package submission including the outputs of many commands
that were new to me. &lt;a href="https://fedoraproject.org/wiki/New_package_process_for_existing_contributors"&gt;This&lt;/a&gt; wiki page sums it up, but read it after understanding 
the process. There is also a nice guide called &lt;a href="http://shakthimaan.com/downloads/glv/howtos/packaging-rpm-workflow.html"&gt;packaging rpm workflow&lt;/a&gt; that shows
the workflow of the whole process from the very beginning. Nice read.&lt;/p&gt;
&lt;p&gt;With the kind help of the people at &lt;code&gt;#fedora-devel&lt;/code&gt; I was able to pull it through, 
so thanks guys :)&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#route-to-follow-after-your-approval"&gt;Route to follow after your approval&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#scm-request"&gt;SCM request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#commit-build-and-upload-your-package"&gt;Commit, build and upload your package&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#steps-with-fedpkg-and-git"&gt;Steps with fedpkg and git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#build-on-koji"&gt;Build on koji&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#submit-your-package-to-current-versions-of-fedora"&gt;Submit your package to current versions of Fedora&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#push-your-package-to-bodhi"&gt;Push your package to bodhi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#epilogue"&gt;Epilogue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="route-to-follow-after-your-approval"&gt;Route to follow after your approval&lt;/h1&gt;
&lt;p&gt;Congratulations you promoted to a &lt;a href="https://fedoraproject.org/wiki/How_to_get_sponsored_into_the_packager_group"&gt;packager&lt;/a&gt;! After your approval, there are a
bunch of things to do, summarized into two big steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make a &lt;a href="https://fedoraproject.org/wiki/Package_SCM_admin_requests"&gt;scm request&lt;/a&gt; in your bugzilla review request&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;fedpkg&lt;/code&gt; to &lt;a href="https://fedoraproject.org/wiki/Join_the_package_collection_maintainers#Add_Package_to_Source_Code_Management_.28SCM.29_system_and_Set_Owner"&gt;commit, build and upload your package&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's break it down.&lt;/p&gt;
&lt;h2 id="scm-request"&gt;SCM request&lt;/h2&gt;
&lt;p&gt;Must read: &lt;a href="https://fedoraproject.org/wiki/Package_SCM_admin_requests"&gt;Package SCM admin requests&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For starters, scm stands for &lt;em&gt;Source Code Management&lt;/em&gt;.
After your package approval, there are two steps as far as the Bugzilla concerns. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;set fedora-cvs flag to ?&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a new comment including the following form completed:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gh"&gt;New Package SCM Request&lt;/span&gt;
&lt;span class="gh"&gt;=======================&lt;/span&gt;
Package Name: 
Short Description: 
Owners: 
Branches: 
InitialCC:
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hit &lt;code&gt;Save Changes&lt;/code&gt; to save both 1 and 2. See &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=982679"&gt;how&lt;/a&gt; I did it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Let me tell you a little secret if you are new to bugzilla like I am. Make any
changes you need to, even leave a comment and then hit &lt;code&gt;Save Changes&lt;/code&gt; to save ALL
the changes you've made. There are two buttons for this: one in the upper right
corner and one below the &lt;code&gt;Additional Comments&lt;/code&gt; form. Either one will do just fine.
This may sound stupid but I wansn't aware of it, so I first left a comment and then
changed the flag, resulting to send a mail update twice.&lt;/p&gt;
&lt;h2 id="commit-build-and-upload-your-package"&gt;Commit, build and upload your package&lt;/h2&gt;
&lt;p&gt;Must read: &lt;a href="https://fedoraproject.org/wiki/Join_the_package_collection_maintainers#Add_Package_to_Source_Code_Management_.28SCM.29_system_and_Set_Owner"&gt;Add Package to Source Code Management (SCM) system and Set Owner&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After the scm request, you will receive some e-mails from Bugzilla and PackageDB
stating that you are good to go. If you visit &lt;a href="http://pkgs.fedoraproject.org/cgit/"&gt;cgit&lt;/a&gt; you will see your bare repository.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bare repo" src="http://axilleas.me/images/rubygem-bootstrap-sass.git-bare-2013-07-20-14-28-50.png" /&gt;&lt;/p&gt;
&lt;p&gt;The whole building process works using &lt;code&gt;fedpkg&lt;/code&gt; and git commands, so if you are
not familiar with git, I suggest the &lt;a href="https://fedoraproject.org/wiki/Using_git_FAQ_for_package_maintainers"&gt;Fedora wiki page&lt;/a&gt;. For a more
comprehensive approach I highly recommend the &lt;a href="http://git-scm.com/book"&gt;Pro Git book&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="steps-with-fedpkg-and-git"&gt;Steps with fedpkg and git&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a directory to have all your package builds neat and tidy.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;mkdir ~/fedora-scm
&lt;span class="nb"&gt;cd&lt;/span&gt; ~/fedora-scm
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clone the newly created git repository.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;fedpkg clone rubygem-bootstrap-sass
&lt;span class="nb"&gt;cd &lt;/span&gt;rubygem-bootstrap-sass
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The contents of git config are:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;[core]&lt;/span&gt;
  &lt;span class="na"&gt;repositoryformatversion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;0&lt;/span&gt;
&lt;span class="s"&gt;  filemode = true&lt;/span&gt;
&lt;span class="s"&gt;  bare = false&lt;/span&gt;
&lt;span class="s"&gt;  logallrefupdates = true&lt;/span&gt;
&lt;span class="k"&gt;[remote &amp;quot;origin&amp;quot;]&lt;/span&gt;
  &lt;span class="na"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;ssh://axilleas@pkgs.fedoraproject.org/rubygem-bootstrap-sass&lt;/span&gt;
&lt;span class="s"&gt;  fetch = +refs/heads/*:refs/remotes/origin/*&lt;/span&gt;
&lt;span class="k"&gt;[branch &amp;quot;master&amp;quot;]&lt;/span&gt;
 &lt;span class="na"&gt;remote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;origin&lt;/span&gt;
&lt;span class="s"&gt; merge = refs/heads/master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Import the src.rpm:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;fedpkg import /var/lib/mock/fedora-rawhide-x86_64/results/rubygem-bootstrap-sass-f20.src.rpm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should see something like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;Uploading: 4f0c887ea7cd95812edcc6b8b01b9329  bootstrap-sass-2.3.2.1.gem
&lt;span class="c"&gt;######################################################################## 100.0%&lt;/span&gt;
Uploaded and added to .gitignore: bootstrap-sass-2.3.2.1.gem
...
diff status of all files to be commited
...
New content staged and new sources uploaded.
Commit &lt;span class="k"&gt;if&lt;/span&gt; happy or revert with: git reset --hard HEAD
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we have 3 files in our directory:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;-r--r--r--. 1 axil axil 86528 Jul 20 15:30 bootstrap-sass-2.3.2.1.gem
-rw-r--r--. 1 axil axil  2314 Jul 20 15:30 rubygem-bootstrap-sass.spec
-rw-r--r--. 1 axil axil    61 Jul 20 15:30 sources
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;sources is a text file with the source package (gem) and its md5 hash.
Notice that the gem name was automatically placed to the &lt;code&gt;.gitignore&lt;/code&gt;.
Running &lt;code&gt;git status&lt;/code&gt; we see that there are 3 files in the &lt;a href="http://git-scm.com/about/staging-area"&gt;staging area&lt;/a&gt;.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;# On branch master
# Changes to be committed:
#   (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)
#
#       modified:   .gitignore
#       new file:   rubygem-bootstrap-sass.spec
#       modified:   sources
#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you are indeed happy with the changes, commit them and push to master (rawhide) branch.
Use the bugzilla id from your review request. No scripts are parsing this, it is just for reference.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Initial import (#982679).&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, if you visit again the cgit web page, you will see that the changes are submitted.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bare repo" src="http://axilleas.me/images/rubygem-bootstrap-sass.git-init-2013-07-20-15-58-58.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="build-on-koji"&gt;Build on koji&lt;/h3&gt;
&lt;p&gt;Lastly, give this command to start a build on &lt;a href="https://fedoraproject.org/wiki/Koji"&gt;koji&lt;/a&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;fedpkg build
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Output:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;Building rubygem-bootstrap-sass-2.3.2.1-1.fc20 for rawhide
Created task: 5631690
Task info: http://koji.fedoraproject.org/koji/taskinfo?taskID=5631690
Watching tasks (this may be safely interrupted)...
5631690 build (rawhide, /rubygem-bootstrap-sass:md5): open (arm02-builder11.arm.fedoraproject.org)
5631691 buildSRPMFromSCM (/rubygem-bootstrap-sass:md5): open (buildvm-25.phx2.fedoraproject.org)
5631716 buildArch (rubygem-bootstrap-sass-2.3.2.1-1.fc20.src.rpm, noarch): open (buildvm-01.phx2.fedoraproject.org)
5631691 buildSRPMFromSCM (/rubygem-bootstrap-sass:md5): open (buildvm-25.phx2.fedoraproject.org) -&amp;gt; closed
0 free  2 open  1 done  0 failed
5631716 buildArch (rubygem-bootstrap-sass-2.3.2.1-1.fc20.src.rpm, noarch): open (buildvm-01.phx2.fedoraproject.org) -&amp;gt; closed
0 free  1 open  2 done  0 failed
5631737 tagBuild (noarch): closed
5631690 build (rawhide, /rubygem-bootstrap-sass:md5): open (arm02-builder11.arm.fedoraproject.org) -&amp;gt; closed
0 free  0 open  4 done  0 failed

5631690 build (rawhide, /rubygem-bootstrap-sass:054f742970e4b930bc55a5d3802fb31d26c57d0d) completed successfully
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A notification mail will be sent to you once the build is complete and the
package will appear automagically at rawhide repos. If you want to push a
package to a stable version of Fedora, keep reading.&lt;/p&gt;
&lt;h3 id="submit-your-package-to-current-versions-of-fedora"&gt;Submit your package to current versions of Fedora&lt;/h3&gt;
&lt;p&gt;This step is optional if you want to maintain other versions than rawhide.
Switch to the corresponding version branch with &lt;code&gt;fx&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; the version of Fedora:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;fedpkg switch-branch f19
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running &lt;code&gt;git branch -r&lt;/code&gt; reveals our branches so far:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;origin/HEAD -&amp;gt; origin/master
origin/f19
origin/master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; I suggest you use a shell where it shows you the branch you are in.
I recommend zsh and if you look at &lt;a href="https://github.com/robbyrussell/oh-my-zsh"&gt;oh-my-zsh&lt;/a&gt;, almost all themes included
support this. Mine for example is: &lt;/p&gt;
&lt;p&gt;&lt;img alt="My zsh theme" src="http://axilleas.me/images/zsh-git-branch.png" /&gt;&lt;/p&gt;
&lt;p&gt;Get the changes from master branch, push and build like before:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;git merge master
git push
fedpkg build
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="push-your-package-to-bodhi"&gt;Push your package to bodhi&lt;/h3&gt;
&lt;p&gt;If your local machine's username is the same as your FAS one, skip this step.
This option is hidden from the wiki guide, I spoted it &lt;a href="https://fedoraproject.org/wiki/Package_update_HOWTO#Submit_your_update_to_Bodhi"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;export BODHI_USER=axilleas &amp;gt;&amp;gt; ~/.zshrc&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; ~/.zshrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace &lt;code&gt;.zshrc&lt;/code&gt; with your shell's rc.&lt;/p&gt;
&lt;p&gt;The final step is to submit your package to bodhi in order to be processed and
reach the repositories. You have two options: either via terminal or via the webui 
of bodhi. Choose what fits you best.&lt;/p&gt;
&lt;p&gt;If you prefer the webui method then go to &lt;a href="https://admin.fedoraproject.org/updates/new/"&gt;this link&lt;/a&gt;, login and fill
in the blanks.&lt;/p&gt;
&lt;p&gt;There are tooltips for each section explaining what should be filled,
but let's take a look:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Description&lt;/th&gt;
&lt;th align="left"&gt;Option&lt;/th&gt;
&lt;th align="left"&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Package&lt;/td&gt;
&lt;td align="left"&gt;rubygem-bootstrap-sass&lt;/td&gt;
&lt;td align="left"&gt;Start typing your package name and it will autocomplete&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Type&lt;/td&gt;
&lt;td align="left"&gt;newpackage&lt;/td&gt;
&lt;td align="left"&gt;Since this is the first package I chose newpackage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Request&lt;/td&gt;
&lt;td align="left"&gt;Testing&lt;/td&gt;
&lt;td align="left"&gt;For the package to first land in updates-testing before goes in stable(recommended)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Bugs&lt;/td&gt;
&lt;td align="left"&gt;982679&lt;/td&gt;
&lt;td align="left"&gt;The bugzilla id of your review request. This way it will change its status automatically&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Notes&lt;/td&gt;
&lt;td align="left"&gt;Package description&lt;/td&gt;
&lt;td align="left"&gt;Additional notes, eg. why you made this update, what are the bugfixes if it is a bugfix, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Suggest Reboot&lt;/td&gt;
&lt;td align="left"&gt;untick&lt;/td&gt;
&lt;td align="left"&gt;Recommend that the user restart their machines after they install this update&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Enable karma&lt;/td&gt;
&lt;td align="left"&gt;tick&lt;/td&gt;
&lt;td align="left"&gt;Enable update request automation based on &lt;a href="https://fedoraproject.org/wiki/QA:Update_feedback_guidelines"&gt;user feedback&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Threshold to stable&lt;/td&gt;
&lt;td align="left"&gt;3&lt;/td&gt;
&lt;td align="left"&gt;This is the defaul value. It needs 3 points to get to stable repos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Threshold for unpushing&lt;/td&gt;
&lt;td align="left"&gt;-3&lt;/td&gt;
&lt;td align="left"&gt;If it gets 3 points it rejects the package from testing&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Your other option is to do the update through terminal. This only works with branches
other than rawhide. If you try to push to rawhide, &lt;code&gt;fedpkg&lt;/code&gt; will warn you.&lt;/p&gt;
&lt;p&gt;When you issue the command below, you will have to edit a template using the default
system editor which is &lt;code&gt;vi&lt;/code&gt;. If you have a different preference eg. &lt;code&gt;vim&lt;/code&gt;, use
the export command. While in &lt;code&gt;f19&lt;/code&gt; branch:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;EDITOR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;vim
fedpkg update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The template is this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;[ rubygem-bootstrap-sass-2.3.2.1-1.fc19 ]&lt;/span&gt;

&lt;span class="c1"&gt;# bugfix, security, enhancement, newpackage (required)&lt;/span&gt;
&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;

&lt;span class="c1"&gt;# testing, stable&lt;/span&gt;
&lt;span class="na"&gt;request&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;testing&lt;/span&gt;

&lt;span class="c1"&gt;# Bug numbers: 1234,9876&lt;/span&gt;
&lt;span class="na"&gt;bugs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;

&lt;span class="c1"&gt;# Description of your update&lt;/span&gt;
&lt;span class="na"&gt;notes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Here is where you give an explanation of your update.&lt;/span&gt;

&lt;span class="c1"&gt;# Enable request automation based on the stable/unstable karma thresholds&lt;/span&gt;
&lt;span class="na"&gt;autokarma&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;True&lt;/span&gt;
&lt;span class="na"&gt;stable_karma&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;3&lt;/span&gt;
&lt;span class="na"&gt;unstable_karma&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;-3&lt;/span&gt;

&lt;span class="c1"&gt;# Automatically close bugs when this marked as stable&lt;/span&gt;
&lt;span class="na"&gt;close_bugs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;True&lt;/span&gt;

&lt;span class="c1"&gt;# Suggest that users restart after update&lt;/span&gt;
&lt;span class="na"&gt;suggest_reboot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once you make all the appropriate changes, save it and close it. You will be
asked your FAS password to complete the process and you will get a similar output:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;================================================================================
     rubygem-bootstrap-sass-2.3.2.1-1.fc19
================================================================================
    Release: Fedora 19
     Status: pending
       Type: newpackage
      Karma: 0
       Bugs: 982679 - Review Request: rubygem-bootstrap-sass - Twitter&amp;#39;s
           : Bootstrap, converted to Sass and ready to drop into
           : Rails or Compass
      Notes: Initial commit
  Submitter: axilleas
  Submitted: 2013-07-20 15:20:18

  https://admin.fedoraproject.org/updates/rubygem-bootstrap-sass-2.3.2.1-1.fc19
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After the submission, your package will go through these &lt;a href="https://fedoraproject.org/wiki/Bodhi#Package_States"&gt;states&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="faq"&gt;FAQ&lt;/h1&gt;
&lt;p&gt;Here are some questions that I had during this process and their answers from
people in &lt;code&gt;#fedora-devel&lt;/code&gt; which I thank them once again.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; During &lt;code&gt;fedpkg import src.rpm&lt;/code&gt;, do I need to provide a &lt;code&gt;foo-f20.src.rpm&lt;/code&gt; or &lt;code&gt;foo-f19.src.rpm&lt;/code&gt; will work too?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; You can virtually take any valid fedora/rhel srpm regardless on which version it was created.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; What if I accidentally run &lt;code&gt;fedpkg update&lt;/code&gt; for rawhide (master branch)?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; New versions of fedpkg should refuse.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; If in a package review the spec's release version was bumped, should I revert the release to 1 prior to pushing in cgit?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; No, it is not needed.&lt;/p&gt;
&lt;h1 id="epilogue"&gt;Epilogue&lt;/h1&gt;
&lt;p&gt;This was quite an adventure and I learned a lot. I am sure this is only the tip
of the iceberg and there's a lot more to come. This post took me literally one
day to compose as I was virtually recording the process as I performed it, hope
it was worth it. If you find any mistake or you want to add something please do
leave a comment. Next big article the Rubygem packaging How to ;)&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;</summary><category term="fedora"></category><category term="packaging"></category><category term="fedpkg"></category><category term="bodhi"></category><category term="git"></category></entry><entry><title>GSoC - Weekly update 3 and 4</title><link href="http://axilleas.me/en/blog/2013/gsoc-weekly-update-3-and-4" rel="alternate"></link><updated>2013-07-09T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.me,2013-07-09:en/blog/2013/gsoc-weekly-update-3-and-4</id><summary type="html">&lt;p&gt;Here is what I have been doing the last two weeks.&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#work-on-packages"&gt;Work on packages&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#sanitize"&gt;sanitize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#boostrap-sass"&gt;boostrap-sass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orm_adapter"&gt;orm_adapter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#devise"&gt;devise&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#gems-and-their-versions-in-json-format"&gt;Gems and their versions in json format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#version-table-in-wiki"&gt;Version table in wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#init-repository"&gt;Init repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubygem-packaging-article"&gt;Rubygem packaging article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#todo-next-week"&gt;TODO next week&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="work-on-packages"&gt;Work on packages&lt;/h2&gt;
&lt;p&gt;I ran gem2rpm on all gems and saved their specs in a &lt;a href="https://github.com/axilleas/fedora/tree/master/packages/tmp"&gt;tmp&lt;/a&gt; folder
so that I can easily modify them later. I intend to split them in categories
according to the bundled gems in GitLab's &lt;a href="https://github.com/gitlabhq/gitlabhq/blob/master/Gemfile#L11-L143"&gt;Gemfile&lt;/a&gt; that are needed for production.
Below are some gems that are either almost ready for Bugzilla or submitted. There
are a dozen more that I work with but haven't pushed any changes to github. Will
do soon.&lt;/p&gt;
&lt;h3 id="sanitize"&gt;sanitize&lt;/h3&gt;
&lt;p&gt;Not yet submitted to BZ as it needs nokogiri 1.6.0 whereas in Fedora
we still have 1.5.9. Will have to talk to the maintainer of nokogiri for an update.&lt;/p&gt;
&lt;h3 id="boostrap-sass"&gt;boostrap-sass&lt;/h3&gt;
&lt;p&gt;Submitted in &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=982679"&gt;Bugzilla&lt;/a&gt;. This is a tricky one as per the package guidelines,
as it ships with some javascript files that are distributed from &lt;a href="https://github.com/twitter/bootstrap"&gt;Twitter bootstrap&lt;/a&gt;,
which are considered a bundle. And if you don't already know it, bundling is
prohibited by the &lt;a href="https://fedoraproject.org/wiki/Packaging:Guidelines#Duplication_of_system_libraries"&gt;packaging guidelines&lt;/a&gt;. You can follow the discussion
in the Bugzilla. There is also an interesting discussion going on in packaging ML,
about web Assets/JavaScript guidelines and are proposed some &lt;a href="https://lists.fedoraproject.org/pipermail/packaging/2013-July/009304.html"&gt;drafts&lt;/a&gt;.
This could probably alter the packaging structure of bootstrap-sass, but I don't
expect it anytime soon.&lt;/p&gt;
&lt;h3 id="orm_adapter"&gt;orm_adapter&lt;/h3&gt;
&lt;p&gt;Some tests are skipped because they require some gems not yet packaged for Fedora,
but that is a &lt;a href="https://lists.fedoraproject.org/pipermail/ruby-sig/2013-July/001384.html"&gt;little acceptable&lt;/a&gt;. This is a dependency of devise (see
below). To be submitted soon.&lt;/p&gt;
&lt;h3 id="devise"&gt;devise&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://github.com/plataformatec/devise"&gt;Devise&lt;/a&gt; provides ready-made authentication and user management for rails
applications. It is a very popular rack application among the rails community, so
it'll be cool to get it into Fedora's repos :)
Submission is on the way along with orm_adapter.&lt;/p&gt;
&lt;h2 id="gems-and-their-versions-in-json-format"&gt;Gems and their versions in json format&lt;/h2&gt;
&lt;p&gt;As I've mentioned before, one of the main problems about packaging GitLab, is
the version mismatch between GitLab, Fedora and upstream gems. I have added some
more functions to my &lt;a href="https://github.com/axilleas/gsoc/blob/master/gemfile.py"&gt;script&lt;/a&gt; and now it saves the gems with their corresponding
version in a json format. There are three files: &lt;code&gt;gitlab.json&lt;/code&gt;, &lt;code&gt;fedora.json&lt;/code&gt; and 
 &lt;code&gt;upstream.json&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;I haven't added a flag to those methods yet, so one has to run it through the python
interpreter for now. Here's how:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install &lt;a href="https://fedorahosted.org/python-bugzilla/‎"&gt;python-bugzilla&lt;/a&gt; and &lt;a href="http://pkgwat.readthedocs.org/en/latest/"&gt;pkgwat.api&lt;/a&gt; if not already.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone https://github.com/axilleas/gsoc.git &amp;amp;&amp;amp; cd gsoc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start your python interpreter (I prefer ipython)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import gemfile as g&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dicts = g.populate_dicts()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[gitlab, fedora, upstream] = dicts&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It will take a couple of minutes since it uses pkgwat.api to query the Fedora
database for the gems in Rawhide, and rubygems.org for the upstream versions.
&lt;code&gt;dicts&lt;/code&gt; is a tuple containing all three dictionaries. With the last command we
unpacked the dictionaries of the tuple. So now calling gitlab, you have the gitlab
dictionary and so on.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; All methods are called using the runtime gems of the current version of 
GitLab, which are 143 for now. According to those gems we then search the Fedora
package database and quering rubygems.org's API.&lt;/p&gt;
&lt;h2 id="version-table-in-wiki"&gt;Version table in wiki&lt;/h2&gt;
&lt;p&gt;There is now a &lt;a href="https://fedoraproject.org/wiki/User:Axilleas/GitLab#Packages"&gt;table&lt;/a&gt; in the wiki for an easy reference about the versions
of gems. Where you see &lt;code&gt;None&lt;/code&gt; it means it hasn't been packaged for Fedora yet.
This is now &lt;a href="https://github.com/axilleas/gsoc/blob/master/gemfile.py#L217"&gt;automatically&lt;/a&gt; accomplished by running the script. &lt;/p&gt;
&lt;p&gt;Further below is a list of the gems to be packaged. Those that are submitted to
Bugzilla are accompanied with a link to their review. I am working on automating
this process, it should be something similar to how the wiki table is generated.&lt;/p&gt;
&lt;p&gt;Also, I modified the output a little bit to be more readable. For example:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;------------------------------------------------------
Gitlab runtime gems  :  143
Gems in Fedora repos :  380
Common gems          :  64
To be packaged       :  79
Pending review in BZ :  11
When BZ go in repos  :  68

Fedora will have 20.79 % more ruby packages, that is 459 gems in total.
------------------------------------------------------
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="init-repository"&gt;Init repository&lt;/h2&gt;
&lt;p&gt;I have created a repository at &lt;a href="http://repos.fedorapeople.org/repos/axilleas/gitlab/"&gt;fedorapeople.org&lt;/a&gt; to start populating it with packages
I build, but take a long time to get to Fedora repos. This should be a good chance
to test the packages they make it to Rawhide.&lt;/p&gt;
&lt;p&gt;Most gems come with a bundled test suite. Running tests during gem packaging
can sometimes be cumbersome but it is the only way to test that the gem really
works, at least according to the suite. To my experience, getting the tests run
requires a big amount of your time during package building, so in this test repo
expect to find many packages without their tests run. At least this is going to
be the case at the beginning.&lt;/p&gt;
&lt;h2 id="rubygem-packaging-article"&gt;Rubygem packaging article&lt;/h2&gt;
&lt;p&gt;Half done, nothing commited yet, I have everything local. This takes more time
than I expected, as I want it to be easily understandable by people that don't
have a clue, but also a good guide for more experienced users. I am rather picky
and I read what I write many times, so yeah, this is going to take longer to finish.&lt;/p&gt;
&lt;h2 id="todo-next-week"&gt;TODO next week&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Categorize gems according to their dependencies.&lt;/li&gt;
&lt;li&gt;Submit 5-10 more gems.&lt;/li&gt;
&lt;li&gt;Deploy GitLab on a Fedora server and test with some packaged gems. This is going to hit me hard I feel it :p&lt;/li&gt;
&lt;li&gt;Maybe write an unofficial guide of how to install GitLab in Fedora, haven't checked if there is a guide out in the internets.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="gsoc"></category><category term="fedora"></category><category term="gitlab"></category></entry><entry><title>GSoC - Weekly update 2</title><link href="http://axilleas.me/en/blog/2013/gsoc-weekly-update-2" rel="alternate"></link><updated>2013-07-02T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.me,2013-07-02:en/blog/2013/gsoc-weekly-update-2</id><summary type="html">&lt;p&gt;Unfortunately this week hasn't been very productive due to lack of time. I managed
to package 5-6 more gems, but I haven't submit them in Bugzilla yet. As always, the
most difficult and time consuming task is to make all the test suites provided
with each gem pass. And believe me this isn't always easy. So, here is what I did
this week.&lt;/p&gt;
&lt;h2 id="meeting-gitlab-devs"&gt;Meeting GitLab devs&lt;/h2&gt;
&lt;p&gt;We arranged a google hangout and we talked about the progress I make.
They were kind enough to ask whether I need help with something. 
Then I got to meet in person &lt;a href="https://github.com/dosire"&gt;Sytse Sijbrandij&lt;/a&gt; and &lt;a href="https://github.com/maxlazio"&gt;Marin Jankovski&lt;/a&gt; 
during &lt;a href="http://euruko2013.org/"&gt;Euruko 2013&lt;/a&gt;. Really cool guys.&lt;/p&gt;
&lt;p&gt;Our main concern was about the gems that are GitLab's forks and how we should
deal with them since it is very unlikely they get accepted into the official Fedora
repos. See next week TODOs about that matter.&lt;/p&gt;
&lt;h2 id="wikification-and-versioning-process"&gt;Wikification and versioning process&lt;/h2&gt;
&lt;p&gt;I started a wiki page on &lt;a href="https://fedoraproject.org/wiki/User:Axilleas/GitLab"&gt;GitLab&lt;/a&gt;, listing all the &lt;a href="https://github.com/axilleas/gsoc/blob/master/rubygems_missing"&gt;dependencies&lt;/a&gt; and their versions.
I said version&lt;strong&gt;s&lt;/strong&gt; because we have to deal with version mismatch, &lt;a href="https://fedoraproject.org/wiki/GSOC_2013/Student_Application_Axilleas/Gitlab%28463%29#Version_mismatch"&gt;remember&lt;/a&gt;?
I am working on a script to get them automatically on a table. So far, I can extract
GitLab's and upstream versions whereas I still need Fedora's. Here's how I do it.&lt;/p&gt;
&lt;h3 id="gitlab"&gt;GitLab&lt;/h3&gt;
&lt;p&gt;gem versions are retrieved from &lt;a href="https://github.com/axilleas/gsoc/blob/master/gemfile.py#L30"&gt;this&lt;/a&gt; dictionary. Pretty simple.&lt;/p&gt;
&lt;h3 id="upstream"&gt;Upstream&lt;/h3&gt;
&lt;p&gt;Using &lt;a href="https://github.com/axilleas/gsoc/blob/master/gemfile.py#L83"&gt;this&lt;/a&gt; method by qeuerying the API of rubygems.org and iterrating
through the missing gems, I can get in a list of the latest gem versions.&lt;/p&gt;
&lt;h3 id="fedora"&gt;Fedora&lt;/h3&gt;
&lt;p&gt;There is this nice tool in ruby called &lt;a href="https://rubygems.org/gems/pkgwat"&gt;pkgwat&lt;/a&gt; which queries Fedora's repo
database. This is also used by &lt;a href="https://github.com/zuhao/isitfedoraruby/blob/master/app/models/rpm_importer.rb#L46"&gt;isitfedoraruby&lt;/a&gt;, which unfortunately doesn't have
an API. This would make my work a lot easier.&lt;/p&gt;
&lt;p&gt;So, I decided to give this a shot by first &lt;a href="https://github.com/axilleas/fedora/blob/master/packages/rubygem-pkgwat/rubygem-pkgwat.spec"&gt;packaging&lt;/a&gt; it. This is what I am learning
here, isn't it? I thought this would be a matter of time since it only depends on
one unpackaged gem, &lt;a href="https://rubygems.org/gems/sanitize"&gt;sanitize&lt;/a&gt; (which ironically is needed by GitLab too).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(And I just whipped out a mosquito. Where the hell are they going 14.30 in the afternoon?...)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The process that I thought would take me 30 minutes top, still goes on.
You see, &lt;code&gt;pkgwat&lt;/code&gt; has a fixed dependency on &lt;code&gt;nokogiri 1.5.5&lt;/code&gt; whereas the latest
&lt;code&gt;sanitize 2.0.4&lt;/code&gt; requires &lt;code&gt;nokogiri&amp;gt;=1.6.0&lt;/code&gt;. On Fedora we have &lt;code&gt;nokogiri 1.5.9&lt;/code&gt;.
Let me draw that for you.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Dependency hell" src="http://axilleas.me/images/pkgwat.png" /&gt;&lt;/p&gt;
&lt;p&gt;Welcome to Gem dependency hell. The only way to install it is through
&lt;code&gt;gem install pkwat&lt;/code&gt;...&lt;/p&gt;
&lt;h2 id="package-review"&gt;Package review&lt;/h2&gt;
&lt;p&gt;My first informal review in order to be sponsored as a packager was 
&lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=927374"&gt;rubygem-rugged&lt;/a&gt;. I did all my homework and I tested the given
SPEC and SRPM with fedora-review, I built the rpm using both mock and rpmbuild 
and then ran rpmlint against the produced packages. I made a few notes of 
what I thought needed fixing and with some help from Vit&lt;sup id="fnref:cheat"&gt;&lt;a class="footnote-ref" href="#fn:cheat" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; I submited
my review.&lt;/p&gt;
&lt;h2 id="package-submission"&gt;Package submission&lt;/h2&gt;
&lt;p&gt;Last week I submited for review &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=969877"&gt;rubygem-timers&lt;/a&gt;, this week it
is &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=978284"&gt;rubygem-redis&lt;/a&gt;. One package a week you say? Dude are you
ever going to package all these gems? Well, submiting a package for review
in bugzilla takes some time, as I carefully check to follow the guidelines
as much as I can. The toughest part of it all are the testing suites.
A test may rely on other gems that are not in Fedora yet, so I try to package 
them as well. &lt;a href="https://github.com/axilleas/fedora/tree/master/packages"&gt;Here&lt;/a&gt; you will find some packages I am working on. 
Most of them are not submited for review yet.&lt;/p&gt;
&lt;h2 id="todos-for-next-week"&gt;TODOs for next week&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Get more packages finished&lt;/li&gt;
&lt;li&gt;Complete the version table in wiki&lt;/li&gt;
&lt;li&gt;Start porting gemfile.py into ruby (eventually)&lt;/li&gt;
&lt;li&gt;Continue writing the article about Rubygem packaging&lt;/li&gt;
&lt;li&gt;Talk to infra team to see how that forked-gem-packaging will go&lt;/li&gt;
&lt;li&gt;I am just a placeholder, nothing useful here, I just wanted to continue the stairs&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:cheat"&gt;
&lt;p&gt;I actually did seek for some help in &lt;a href="https://lists.fedoraproject.org/pipermail/ruby-sig/2013-July/001373.html"&gt;Ruby-SIG&lt;/a&gt; ML :p&amp;#160;&lt;a class="footnote-backref" href="#fnref:cheat" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="gsoc"></category><category term="fedora"></category><category term="gitlab"></category></entry><entry><title>GSoC - Weekly update 1</title><link href="http://axilleas.me/en/blog/2013/gsoc-weekly-update-1" rel="alternate"></link><updated>2013-06-25T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.me,2013-06-25:en/blog/2013/gsoc-weekly-update-1</id><summary type="html">&lt;p&gt;It's been over a week that GSoC started and here is a weekly report of what achieved
so far.&lt;/p&gt;
&lt;h2 id="weekly-process"&gt;Weekly process&lt;/h2&gt;
&lt;h3 id="workflow"&gt;Workflow&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://trello.com/board/gitlab/51b844202ed21a6735011b25"&gt;Trello board&lt;/a&gt; - This is a web app in which you can manage your workflow by adding
tasks that are to be completed. I set it up to remind me the things I have to accomplish
in due time. Cool thing is that there is an android app too, so I can manage it
from wherever I am :)&lt;/p&gt;
&lt;h3 id="first-package"&gt;First package&lt;/h3&gt;
&lt;p&gt;I submitted my first package to Bugzilla for review. Yay! It is called &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=969877"&gt;timers&lt;/a&gt;
and is of course a rubygem (what else :p). Not a big deal, just an easy one to get
me started.&lt;/p&gt;
&lt;h3 id="list-of-gems-to-package"&gt;List of gems to package&lt;/h3&gt;
&lt;p&gt;I re-calculated GitLab's gem dependencies, this time including only the ones
needed for runtime. I ditched from the list the ones that are used for testing/development.
Not that they are not useful, but for the time being runtime dependencies
are a priority. I used a really ugly hack but it works for now. Here is how:
Clone &lt;a href="https://github.com/gitlabhq/gitlabhq"&gt;GitLab&lt;/a&gt;, cd into it and run:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;bundle &lt;span class="nb"&gt;exec &lt;/span&gt;install --deployment --without &lt;span class="nb"&gt;test &lt;/span&gt;development
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will install all deps included in the Gemfile except for the ones in test and 
development groups. Then, using a for loop we can iterate under the &lt;code&gt;vendor/bundle/ruby/1.9.1/gems&lt;/code&gt;
directory and write the results in a file.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="sb"&gt;`&lt;/span&gt;ls vendor/bundle/ruby/1.9.1/gems&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &amp;gt;&amp;gt; ../gitlab53-gems&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The list contains gems in the format of &lt;code&gt;gem_name-1.0.0&lt;/code&gt; so I had to clean that
up a little. I used some string methods in the &lt;a href="https://github.com/axilleas/gsoc/blob/master/gemfile.py#L30"&gt;python script&lt;/a&gt; and stored those values
in a dictionary where key is the gem name and value its version. Then the names
list was easily retrievable. All I had to do is call the &lt;code&gt;keys()&lt;/code&gt; method on
the dictionary and store the result in a &lt;a href="https://github.com/axilleas/gsoc/blob/master/rubygems_gitlab"&gt;file&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then, I had somehow to include in the list of already packaged gems, the ones that 
are submitted in bugzilla for review. No need to work on them if their specfile
is already submitted for review, right? For that I used the &lt;a href="https://fedorahosted.org/python-bugzilla/"&gt;python-bugzilla&lt;/a&gt;
tool that queries a Bugzilla instance and spits nice &lt;a href="https://github.com/axilleas/gsoc/blob/master/rubygems_bugzilla_raw"&gt;formated results&lt;/a&gt;.
The query is pretty much self explanatory. In the end I just sorted them according
to their bug status.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;bugzilla query --product&lt;span class="o"&gt;=&lt;/span&gt;fedora --bug_status&lt;span class="o"&gt;=&lt;/span&gt;new,assigned --component&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Package Review&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
--short_desc&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rubygem-&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sort -k2 -r &amp;gt; &lt;span class="nv"&gt;$bugzilla_gems_raw&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Below, using the same query methods and some sed/awk magic&lt;sup id="fnref:json"&gt;&lt;a class="footnote-ref" href="#fn:json" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;, we end up with a file
containing only the names of gems that are submitted for review in Bugzilla.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;bugzilla query --product&lt;span class="o"&gt;=&lt;/span&gt;fedora --bug_status&lt;span class="o"&gt;=&lt;/span&gt;new,assigned --component&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Package Review&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
--short_desc&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rubygem-&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;BEGIN { FS = &amp;quot; - &amp;quot; }; { print $3 }&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;BEGIN { FS = &amp;quot;:&amp;quot; }; { print $2 }&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed -e &lt;span class="s1"&gt;&amp;#39;s/rubygem-//&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sort -k1 &amp;gt; &lt;span class="nv"&gt;$bugzilla_gems&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That list, combined with the query from the official repos, results in the &lt;a href="https://github.com/axilleas/gsoc/blob/master/rubygems_fedora"&gt;final&lt;/a&gt;
one which has all the Ruby gems already packaged or are to be packaged for Fedora.&lt;/p&gt;
&lt;p&gt;I also wrote a method to store those values in a &lt;a href="https://github.com/axilleas/gsoc/blob/master/gemfile.py#L95"&gt;dictionary&lt;/a&gt; in the format
of &lt;code&gt;dict = { gem_name: [bug_id, status, assignee, description] }&lt;/code&gt;. It might come
in handy in the future, who knows!&lt;/p&gt;
&lt;p&gt;Next step was to find the missing gems that I will have to package for Fedora.
Comparing those two lists we end up with this &lt;a href="https://github.com/axilleas/gsoc/blob/master/rubygems_missing"&gt;list&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And the new results are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Gitlab uses &lt;strong&gt;143&lt;/strong&gt; runtime gems.&lt;/p&gt;
&lt;p&gt;Fedora has packaged &lt;strong&gt;461&lt;/strong&gt; gems.&lt;/p&gt;
&lt;p&gt;There are &lt;strong&gt;73&lt;/strong&gt; common gems.&lt;/p&gt;
&lt;p&gt;There should be packaged &lt;strong&gt;70&lt;/strong&gt; gems.&lt;/p&gt;
&lt;p&gt;Fedora will have &lt;strong&gt;15.18 %&lt;/strong&gt; more ruby packages, that is &lt;strong&gt;531&lt;/strong&gt; gems in total.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="gem-tree-dependencies"&gt;Gem tree dependencies&lt;/h3&gt;
&lt;p&gt;There are a lot of gems that depend on each other which means one has to
be picky as to what to package first. The best way would be: given a package,
find its dependency tree and start packaging first the leafs that have no children
going all the way up until you reach to the root.&lt;/p&gt;
&lt;p&gt;I started writing a &lt;a href="https://github.com/axilleas/fedora/tree/master/gitlab-deps/gemtree"&gt;script&lt;/a&gt; in ruby as a way to better learn the language,
but I have yet to iplement the DFS algorithm which will traverse through all
dependencies. Any comments on how to best approach this are welcomed!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Update!!&lt;/em&gt;&lt;/strong&gt; I just found out this reaaally cool site: &lt;a href="https://gemlou.pe"&gt;https://gemlou.pe&lt;/a&gt;
which parses rubygems.org and lists the runtime tree dependencies of a gem through 
javascript!&lt;/p&gt;
&lt;h3 id="article-about-gem-packaging"&gt;Article about gem packaging&lt;/h3&gt;
&lt;p&gt;I started writing an article about packaging a Ruby gem in Fedora. I want to
note down the whole process, beginning from the use of gem2rpm to the review process.
At first I wanted to have it finished by this week, but the information is so vast
that I will take my time and write it piece by piece. You can follow the process &lt;a href="https://github.com/axilleas/axilleas.github.io/blob/source/src/posts/en/2013-06-12-fedora-rubygem-packaging.md"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="todo"&gt;TODO&lt;/h2&gt;
&lt;p&gt;Some TODOs for this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Continue writing the article about Rubygem packaging&lt;/li&gt;
&lt;li&gt;Make some unofficial package reviews in order to get &lt;a href="https://fedoraproject.org/wiki/Join_the_package_collection_maintainers#Get_Sponsored"&gt;sponsored&lt;/a&gt; as a packager&lt;/li&gt;
&lt;li&gt;Make more package submissions (I have some specfiles ready)&lt;/li&gt;
&lt;li&gt;Start wikifying the process (like the &lt;a href="https://fedoraproject.org/wiki/User:Ktdreyer/Gitorious"&gt;Gitorious&lt;/a&gt; page)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="extras"&gt;Extras&lt;/h2&gt;
&lt;p&gt;Apart from the GSoC program that is an awesome experience, there are some other
cool stuff going on this summer. &lt;/p&gt;
&lt;p&gt;First one is &lt;a href="http://euruko2013.org/"&gt;Euruko&lt;/a&gt; which will take place in
Athens, so it will be easy to attend. I have already purchased a ticket. I am sure
that it's gonna be awesome and I'll get to meet the GitLab devs as well :)&lt;/p&gt;
&lt;p&gt;The other one is a MOOC by UC Berkley and is a course about agile development and SaaS.
It has two parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.edx.org/course/uc-berkeley/cs-169-1x/software-service/993"&gt;CS169.1x&lt;/a&gt; starts on July 2nd and is lasting 5 weeks&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.edx.org/course/uc-berkeley/cs-169-2x/software-service/1005"&gt;CS169.2x&lt;/a&gt; starts on August 13th and is lasting 6 weeks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The language they use is Ruby and the framework on which they build the apps is
Rails. I am going to attend both courses as it is strictly related to GitLab and
my GSoC involvement. Actually, I already bought the accompanying &lt;a href="http://www.saasbook.info/"&gt;book&lt;/a&gt; (not mandatory)
and started reading it :)&lt;/p&gt;
&lt;p&gt;I will try to be more on schedule next time and post about my progress at the end
of each week.&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:json"&gt;
&lt;p&gt;It would make matters easier if the query returned a json file. I haven't
seen anything in the man page about json support.&amp;#160;&lt;a class="footnote-backref" href="#fnref:json" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="gsoc"></category><category term="fedora"></category><category term="gitlab"></category></entry><entry><title>Connect to Transmission through an ssh encrypted session</title><link href="http://axilleas.me/en/blog/2013/connect-to-transmission-through-an-ssh-encrypted-session" rel="alternate"></link><updated>2013-06-11T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.me,2013-06-11:en/blog/2013/connect-to-transmission-through-an-ssh-encrypted-session</id><summary type="html">&lt;p&gt;Use case: You have a remote machine with high bandwidth and you want to turn it 
in a torrent server.&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#prerequisites"&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#transgui"&gt;Transgui&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="prerequisites"&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;All you have to install in the remote server, is &lt;code&gt;transmission-daemon&lt;/code&gt; which is 
pretty much included in every well known distribution. After it successfuly installs,
run &lt;code&gt;transmission-daemon&lt;/code&gt; as your user, no need for extra privileges. See the
man page for extra commands.&lt;/p&gt;
&lt;p&gt;In the client side you will need &lt;a href="https://code.google.com/p/transmisson-remote-gui/"&gt;Transmission Remote Gui&lt;/a&gt; (I will call it 
transgui from now on), a cool cross platform front-end to remotely control a 
Transmission Bit-Torrent client daemon via its RPC protocol. In Fedora you can 
install it from the official repos with:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;yum install transgui
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;whereas in Archlinux you can find it in &lt;a href="https://aur.archlinux.org/packages/?O=0&amp;amp;K=transmission-remote-gui"&gt;AUR&lt;/a&gt;. I suggest you go with the bin one
which is a precompiled binary so that you avoid the building time.&lt;/p&gt;
&lt;p&gt;Now, there is this little bash script which makes an ssh connection to you server,
in order to link transgui with transmission-daemon:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;RPORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;9091
&lt;span class="nv"&gt;LPORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;9092

ssh -C -c blowfish -f remotevm -L &lt;span class="nv"&gt;$LPORT&lt;/span&gt;:localhost:&lt;span class="nv"&gt;$RPORT&lt;/span&gt; -N

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Connection established&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Connection failed&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's cut it down to pieces. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-C&lt;/code&gt; is optional and it will compress all the data of the session. As the man page
dictates, use it only on slow connections (client side).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-c blowfish&lt;/code&gt; selects the cipher specification for encrypting the session, in 
  this case &lt;a href="https://en.wikipedia.org/wiki/Blowfish_%28cipher%29"&gt;blowfish&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-f&lt;/code&gt; requests ssh to go to the background.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;remotevm&lt;/code&gt; is just an alias of the remote server I have at my &lt;code&gt;~/.ssh/config&lt;/code&gt; 
  in which I use an ssh key to connect to, without using a password.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-L $LPORT:localhost:$RPORT&lt;/code&gt; specifies that the given port on the local (client) 
  host  is  to be  forwarded  to  the  given  host on the remote side.
  Here I use &lt;code&gt;RPORT&lt;/code&gt; for the remote side and &lt;code&gt;LPORT&lt;/code&gt; for the local one. Note that
  9091 is used by default from transmission as its bind port. All this is traversed 
  through localhost, no external IPs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-N&lt;/code&gt; makes sure there isn't executed a remote command. This is useful for just 
  forwarding ports.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="transgui"&gt;Transgui&lt;/h2&gt;
&lt;p&gt;After you run the above script and see the &lt;em&gt;Connection established&lt;/em&gt; message, it's
time to open transgui and connect to the remote server. Make a new connection as
it appears in the image below. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Connect to transgui" src="http://axilleas.me/images/transgui_connection.png" /&gt;&lt;/p&gt;
&lt;p&gt;Default username:password is &lt;code&gt;transmission&lt;/code&gt;. If you want to change it, either 
pass it as a parameter when running &lt;code&gt;transmission-daemon&lt;/code&gt; (see man page) or edit 
&lt;code&gt;$HOME/.config/transmission-daemon/settings.json&lt;/code&gt; with the daemon stopped.&lt;/p&gt;
&lt;p&gt;Some more screens:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Download dialog" src="http://axilleas.me/images/down_dialog.png" /&gt;
&lt;em&gt;The dialog that appears when you open a torrent file&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Downloading Fedora" src="http://axilleas.me/images/fedora_torrent.png" /&gt;
&lt;em&gt;Main download page&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now all that remains is to retrieve the downloaded data. There are numerous ways 
to do so, like using &lt;code&gt;scp&lt;/code&gt;, &lt;code&gt;rync&lt;/code&gt;, &lt;code&gt;ftp&lt;/code&gt;, &lt;code&gt;sftp&lt;/code&gt;, &lt;code&gt;sshfs&lt;/code&gt; etc, each serving its 
own purpose.&lt;/p&gt;</summary><category term="transmission"></category><category term="ssh"></category><category term="torrent"></category></entry><entry><title>Accepted for GSoC 2013</title><link href="http://axilleas.me/en/blog/2013/accepted-for-gsoc-2013" rel="alternate"></link><updated>2013-05-27T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.me,2013-05-27:en/blog/2013/accepted-for-gsoc-2013</id><summary type="html">&lt;p&gt;&lt;img alt="gsoc-logo" src="https://1-ps.googleusercontent.com/sx/s.google-melange.appspot.com/www.google-melange.com/soc/content/2-1-20130521/images/gsoc/logo/924x156xbanner-gsoc2013.png.pagespeed.ic.Z9V_lgyiqp.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Sooo, I am happy to announce that I got accepted to this year's Google Summer of Code!
Couldn't be more happy right now :)&lt;/p&gt;
&lt;p&gt;For those that have no idea, here is my &lt;a href="https://fedoraproject.org/wiki/GSOC_2013/Student_Application_Axilleas/Gitlab%28463%29"&gt;proposal&lt;/a&gt; on Fedora's wiki (&lt;a href="https://fedoraproject.org/wiki/User:Axilleas"&gt;my user&lt;/a&gt;). 
I have in mind to make a follow post on how I dealt with all this the past three months.&lt;/p&gt;
&lt;p&gt;Special thanks to &lt;a href="https://github.com/johngian"&gt;John Giannelos&lt;/a&gt; for pressuring me to apply :p&lt;/p&gt;</summary><category term="gsoc"></category><category term="fedora"></category><category term="gitlab"></category><category term="superexcited"></category></entry><entry><title>Codeschool offers 2-day hall pass to all courses</title><link href="http://axilleas.me/en/blog/2013/codeschool-two-day-hall-pass" rel="alternate"></link><updated>2013-05-13T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.me,2013-05-13:en/blog/2013/codeschool-two-day-hall-pass</id><summary type="html">&lt;p&gt;&lt;img alt="codeschool-logo" src="https://d1tijy5l7mg5kk.cloudfront.net/assets/press_kit/logo-full-text-842f207391207c249d46b10fb166a8cb.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www.codeschool.com/"&gt;Code School&lt;/a&gt; is an online learning platform that teaches a variety of
programming and web design skills. Courses range from beginner to advanced
levels and you get to earn rewards and badges as you learn.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Courses cover a variety of technologies including among others &lt;code&gt;Git&lt;/code&gt;, &lt;code&gt;Ruby&lt;/code&gt;, 
&lt;code&gt;Backbone.js&lt;/code&gt;, &lt;code&gt;Sass&lt;/code&gt;, &lt;code&gt;Rails&lt;/code&gt;, &lt;code&gt;jQuery&lt;/code&gt;. Each course has a unique environment 
and some their own theme song, which is kinda cool. Here is the &lt;a href="http://www.codeschool.com/jingles"&gt;special page&lt;/a&gt; where 
you can find all these songs. &lt;/p&gt;
&lt;p&gt;Normally, there is a monthly &lt;a href="http://www.codeschool.com/enroll"&gt;subscription&lt;/a&gt; that costs only 25$ and 
grants you access to all courses and screencasts, with download links for the 
videos and the presentations.&lt;/p&gt;
&lt;p&gt;The current offer covers a 2 day free pass for all courses and screencasts. &lt;a href="http://go.codeschool.com/3UBpUQ"&gt;Here&lt;/a&gt; 
is my affiliate link&lt;sup id="fnref:afflink"&gt;&lt;a class="footnote-ref" href="#fn:afflink" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; to get you started (shameless promo :p). 
For each person that signs up, you get two more free days until you reach a 
limit of 30. During this weekend I finished the &lt;a href="http://www.codeschool.com/courses/ruby-bits"&gt;Ruby Bits&lt;/a&gt; and &lt;a href="http://www.codeschool.com/courses/git-real"&gt;Git Real&lt;/a&gt;
courses and I have to admit I learned a lot. My next goal is the famous &lt;a href="http://www.codeschool.com/courses/rails-for-zombies-redux"&gt;Rails for Zombies&lt;/a&gt; 
which I am looking forward to complete!&lt;/p&gt;
&lt;p&gt;So, what are you waiting for? &lt;a href="http://go.codeschool.com/3UBpUQ"&gt;Go&lt;/a&gt; and learn some realy cool stuff!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:afflink"&gt;
&lt;p&gt;I got an email from codeschool about this offer and there doesn't seem to be a clear url to reach it. That's why I am posting the affiliate url.&amp;#160;&lt;a class="footnote-backref" href="#fnref:afflink" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="codeschool"></category><category term="ruby"></category><category term="courses"></category><category term="javascript"></category><category term="html"></category><category term="css"></category></entry><entry><title>Nominated for Space Apps Challenge 2013</title><link href="http://axilleas.me/en/blog/2013/nasa-spaceappschallenge-2013" rel="alternate"></link><updated>2013-05-02T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.me,2013-05-02:en/blog/2013/nasa-spaceappschallenge-2013</id><summary type="html">&lt;p&gt;&lt;strong&gt;&lt;em&gt;Update&lt;/em&gt;&lt;/strong&gt;: The Popeye on Mars project came &lt;a href="http://www.nasa.gov/home/hqnews/2013/may/HQ_13-152_Space_App_Challenge_winners.html"&gt;first&lt;/a&gt; in "Best Mission Concept" 
category. Congrats guys!&lt;/p&gt;
&lt;p&gt;During the weekend of 20th and 21st of April we gathered at &lt;a href="https://hackerspace.gr"&gt;hackerpace.gr&lt;/a&gt;
and started hacking for NASA's space apps challenge. From their &lt;a href="http://spaceappschallenge.org/about/"&gt;webpage&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The International Space Apps Challenge is an international mass collaboration 
focused on space exploration that takes place over 48-hours in cities around 
the world. The event embraces collaborative problem solving with a goal of 
producing relevant open-source solutions to address global needs applicable to
both life on Earth and life in space. NASA is leading this global collaboration 
along with a number of additional government collaborators and 100+ local 
partner organizations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;16 people, 2 teams, 2 days, 2 globally nominated projects:
&lt;code&gt;popeye on mars&lt;/code&gt; and &lt;code&gt;anapNEO&lt;/code&gt;. See &lt;a href="https://plus.google.com/u/0/photos/117312389370621956919/albums/5868971703249663889" title="Space App Challenge 2013 at hackerspace.gr"&gt;here&lt;/a&gt; some photos. 
Thank you &lt;a href="https://mozilla.org"&gt;mozilla&lt;/a&gt; for all the pizzas and souvlakia :)&lt;/p&gt;
&lt;h1 id="popeye-on-mars"&gt;Popeye on Mars&lt;/h1&gt;
&lt;p&gt;Our solution is a deployable, reusable spinach greenhouse for Mars.
Internally, a fully equipped aeroponic system operates for ~45 days,
having all the needed resources, sensors and electronic systems to
stabilize the internal environment and help the spinach growth. Also,
there are systems for harvesting produced oxygen during the process
and the plants at the end of it. Externally, photovoltaic panels
provide power, while several cover layers protect the system against
Mars extreme conditions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://spaceappschallenge.org/project/pom"&gt;Project page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=kBl5lzwcYlQ"&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="anapneo"&gt;anapNEO&lt;/h1&gt;
&lt;p&gt;anapNEO is a web app build on Django and HTML, CSS, JS that enables
the submission and ranking of NEO findings. Focused on UX simplicity
and streamlining of the registration and submission process, a user
signs up easily using Persona, and creates a user account (with basic
information). She then lands on a (public too!) Dashboard that
displays all latest submissions and can submit a new finding. You can
also vote on findings affecting the score and (yet to implement)
expose those on an API.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://spaceappschallenge.org/project/anapneo"&gt;Project page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=u5eSPSy4ix8"&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="nasa"></category><category term="hsgr"></category><category term="django"></category><category term="spinach"></category><category term="popeye"></category></entry><entry><title>Ένας σύντομος οδηγός για τον vim</title><link href="http://axilleas.me/el/blog/2013/vimtips" rel="alternate"></link><updated>2013-04-08T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.me,2013-04-08:el/blog/2013/vimtips</id><summary type="html">&lt;p&gt;Ένα πολύ ωραίο thread σχετικά με τον vim editor βρίσκεται &lt;a href="http://www.adslgr.com/forum/showthread.php?t=418489"&gt;εδώ&lt;/a&gt;, όπου το μέλος &lt;a href="http://lordkhelben.wordpress.com"&gt;imitheos&lt;/a&gt; έχει παραθέσει πολλά χρήσιμα tips. Στο παρόν post θα προσπαθήσω να τα συγκεντρώσω όλα μαζί. Όπως θα διαπιστώσετε είναι ΠΑΡΑ πολλά, οπότε grab a cup of coffee, open vim and start practicing!&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;Οι συχνότερες λειτουργίες πλήκτρων&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;Εύρος εντολών&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;Εντολές με βάση το παρελθόν&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;Εντολές εύρεσης&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ex"&gt;Οι πιο συχνά χρησιμοποιούμενες εντολές στην κατάσταση ex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s"&gt;Η εντολή s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#global"&gt;Η εντολή global&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vim"&gt;Εκτελώντας εντολές μέσα από τον vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;Ενεργοποίηση διάφορων επιλογών&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#background-bg"&gt;background (bg)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hlsearch-hls"&gt;hlsearch (hls)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#list"&gt;list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#listchars-lcs"&gt;listchars (lcs)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#textwidth-tw"&gt;textwidth (tw)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#c_space_errors"&gt;c_space_errors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#registers"&gt;Registers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#marks"&gt;Marks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#backreferences-patterns"&gt;Backreferences και Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#foldmethod"&gt;Απόκρυψη (δίπλωση) πληροφοριών με την foldmethod&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#colorcolumn"&gt;Η εντολή colorcolumn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;Τοποθεσία κέρσορα&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;Ελληνικός ορθογράφος&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vimrc"&gt;Παράδειγμα .vimrc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#credits"&gt;Credits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="_1"&gt;Οι συχνότερες λειτουργίες πλήκτρων&lt;/h1&gt;
&lt;p&gt;Υπάρχουν εκατοντάδες λειτουργίες πλήκτρων και ανάλογα με την κατάσταση που είμαστε το ίδιο πλήκτρο εκτελεί διαφορετική λειτουργία. Τα παρακάτω είναι τα πιο απλά και πιο συχνά χρησιμοποιούμενα.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;h : Μετακίνηση του δρομέα αριστερά.
j : Μετακίνηση του δρομέα κάτω.
k : Μετακίνηση του δρομέα πάνω.
l : Μετακίνηση του δρομέρα δεξιά.
i : Μας βάζει στην κατάσταση εισαγωγής με τον δρομέα πριν την υπάρχουσα θέση
I : Το ίδιο με i αλλά στην αρχή της γραμμής
a : Μας βάζει στην κατάσταση εισαγωγής με τον δρομέα μετά την υπάρχουσα θέση
A : Το ίδιο με a αλλά στο τέλος της γραμμής
ο : Μας βάζει στην κατάσταση εισαγωγής αφού αλλάξει γραμμή
O : Το ίδιο με o αλλά εισάγει πριν την προηγούμενη γραμμή
p : Επικόλληση των περιεχομένων του buffer μετά από τον δρομέα.
r : Αντικαθιστά ένα χαρακτήρα.
R : Αντικαθιστά πολλούς χαρακτήρες
u : undo
Ctrl+R : αναίρεση του undo (redo)
y : Αντιγραφή στο buffer
d : Διαγραφή
x : Διαγραφή χαρακτήρα μετά τον δρομέα
X : Το ίδιο με x αλλά πριν τον δρομέα
D : Διαγραφή από τον δρομέα μέχρι το τέλος της γραμμής
G : Μετακίνηση σε κάποια γραμμή ή στο τέλος του αρχείου
J : Ενώνει την γραμμή με την επόμενη
. : Εκτελεί την προηγούμενη εντολή
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="_2"&gt;Εύρος εντολών&lt;/h1&gt;
&lt;p&gt;Πολλές εντολές δέχονται εύρος. Για παράδειγμα, αν πληκτρολογήσουμε &lt;code&gt;6x&lt;/code&gt; θα σβήσει 6 χαρακτήρες. Η εντολή &lt;code&gt;5G&lt;/code&gt; θα μας πάει στην 5η γραμμή. Οι εντολές &lt;code&gt;y&lt;/code&gt; και &lt;code&gt;d&lt;/code&gt; δέχονται και ένα όρισμα που δηλώνει την λειτουργία της εντολής. Τα πιο συχνά χρησιμοποιούμενα είναι &lt;code&gt;w&lt;/code&gt; (μια λέξη), &lt;code&gt;$&lt;/code&gt; (μέχρι το τέλος της γραμμής) και &lt;code&gt;d&lt;/code&gt; (μία γραμμή). Στην περίπτωση του &lt;code&gt;y&lt;/code&gt;, αντί για το &lt;code&gt;d&lt;/code&gt; έχουμε το &lt;code&gt;y&lt;/code&gt; (μία γραμμή).
Έτσι, έχουμε:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;d$ : Διαγραφή μέχρι το τέλος της γραμμής (ίδιο με D) 
5dw : Διαγραφή 5 λέξεων 
yy : Αντιγραφή 1 γραμμής 
3dd : Διαγραφή 3 γραμμών 
d3d : Διαγραφή 3 γραμμών
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Τα δύο τελευταία παραδείγματα βλέπουμε ότι κάνουν το ίδιο πράγμα ενώ έχουν διαφορετική σύνταξη. Το &lt;code&gt;3dd&lt;/code&gt; θα εκτελέσει τρεις φορές την εντολή &lt;code&gt;dd&lt;/code&gt; σβήνοντας δηλαδή από μία γραμμή ενώ το &lt;code&gt;d3d&lt;/code&gt; θα σβήσει 3 γραμμές.&lt;/p&gt;
&lt;h1 id="_3"&gt;Εντολές με βάση το παρελθόν&lt;/h1&gt;
&lt;p&gt;Άλλες εντολές μετακίνησης που χρησιμοποιούνται συχνά και έχουν βάση στο παρελθόν είναι:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;Ctrl + B : Μια σελίδα πίσω 
Ctrl + F : Μια σελίδα μπροστά 
^ : Μετακίνηση στην αρχή της γραμμής 
$ : Μετακίνηση στο τέλος της γραμμής 
w : Μετακίνηση μια λέξη μπροστά 
b : Μετακίνηση μια λέξη πίσω
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Και αυτές παίρνουν ορίσματα εύρους π.χ &lt;code&gt;5$&lt;/code&gt;&lt;/p&gt;
&lt;h1 id="_4"&gt;Εντολές εύρεσης&lt;/h1&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;/ : Εύρεση προς τα κάτω του ορίσματος που θέλουμε 
? : Εύρεση προς τα πάνω 
n : Εύρεση του επόμενου αποτελέσματος του 
/ ή ? N : Εύρεση του επόμενου αποτελέσματος στην αντίθετη κατεύθυνση
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Αυτές οι εντολές χρησιμοποιούνται στην κατάσταση εντολών (command mode).&lt;/p&gt;
&lt;h1 id="ex"&gt;Οι πιο συχνά χρησιμοποιούμενες εντολές στην κατάσταση ex&lt;/h1&gt;
&lt;p&gt;Αν στην κατάσταση εντολών πληκτρολογήσουμε &lt;code&gt;:&lt;/code&gt; τότε μπαίνουμε στην κατάσταση ex. Το vim υποστηρίζει τις εντολές του παλαιότερου κειμενογράφου ex. Οι πιο συχνά χρησιμοποιούμενες είναι οι:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;:! = Εκτέλεση ενός εξωτερικού προγράμματος. 
:e = Φόρτωση ενός αρχείου 
:g = Εκτέλεση εντολών για επιλεγμένα patterns 
:n = Όταν έχουμε να επεξεργαστούμε πολλά αρχεία μας φορτώνει το επόμενο 
:N = Ομοίως για το προηγούμενο 
:q = Έξοδος από το vim 
:q! = Αν δεν έχουμε σώσει τις αλλαγές μας, το vim γκαρίζει με το απλό q. Με το q! δηλώνουμε ότι ναι το ξέρω ότι δεν έχω σώσει. Άσε με να βγω 
:r = Μας εισάγει ένα αρχείο στο υπάρχον 
:s = Εύρεση και αντικατάσταση 
:v = Το ίδιο με g αλλά για τις υπόλοιπες γραμμές 
:w = Εγγραφή του αρχείου 
:x = Το ίδιο με :wq (Σώσιμο + Έξοδος)
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="s"&gt;Η εντολή s&lt;/h1&gt;
&lt;p&gt;Μία αρκετά χρήσιμη εντολή είναι η &lt;code&gt;:s&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;[εύρος]s/pattern για εύρεση/pattern για αντικατάσταση/[παράμετροι]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Το εύρος δηλώνει σε ποιες γραμμές θέλουμε να ενεργήσει η &lt;code&gt;s&lt;/code&gt;. Αν δεν δηλώσουμε τίποτα θα ενεργήσει μόνο στην τρέχουσα γραμμή. Ο χαρακτήρας &lt;code&gt;.&lt;/code&gt; σημαίνει την τρέχουσα γραμμή και ο χαρακτήρας &lt;code&gt;%&lt;/code&gt; όλο το αρχείο. Παραδείγματα:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="nl"&gt;s&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;Από&lt;/span&gt; &lt;span class="err"&gt;την&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="err"&gt;η&lt;/span&gt; &lt;span class="err"&gt;γραμμή&lt;/span&gt; &lt;span class="err"&gt;μέχρι&lt;/span&gt; &lt;span class="err"&gt;την&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="err"&gt;η&lt;/span&gt; 
&lt;span class="p"&gt;.,&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="nl"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;Από&lt;/span&gt; &lt;span class="err"&gt;την&lt;/span&gt; &lt;span class="err"&gt;τρέχουσα&lt;/span&gt; &lt;span class="err"&gt;μέχρι&lt;/span&gt; &lt;span class="err"&gt;τις&lt;/span&gt; &lt;span class="err"&gt;επόμενες&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="err"&gt;γραμμές&lt;/span&gt; 
&lt;span class="nf"&gt;%s&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;Όλο&lt;/span&gt; &lt;span class="err"&gt;το&lt;/span&gt; &lt;span class="err"&gt;αρχείο&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Οι πιο συχνά χρησιμοποιούμενες παράμετροι είναι οι εξής:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;c: Ζητά επιβεβαίωση για κάθε αλλαγή 
g: Αντικατάσταση όλων των pattern σε κάθε γραμμή και όχι μόνο του πρώτου 
i: Δεν κοιτάει κεφαλαία/πεζά
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O χαρακτήρας διαχωρισμού των πεδίων μπορεί να είναι οτιδήποτε και δεν είναι απαραίτητο να είναι &lt;code&gt;/&lt;/code&gt;. Ας πούμε ότι θέλουμε να αλλάξουμε σε ένα αρχείο το &lt;code&gt;/usr&lt;/code&gt; σε &lt;code&gt;/usr/local&lt;/code&gt;.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;1) :%s/\/usr/\/usr\/local/g 
2) :%s#/usr#/usr/local#g
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Το πρώτο παράδειγμα χρησιμοποιεί κανονικά το &lt;code&gt;/&lt;/code&gt; για διαχωριστικό. Έτσι πρέπει οπουδήποτε έχουμε &lt;code&gt;/&lt;/code&gt; μέσα στο pattern μας να το κάνουμε quote χρησιμοποιώντας την backslash, ενώ στο δεύτερο παράδειγμα επειδή χρησιμοποιούμε το &lt;code&gt;#&lt;/code&gt; για διαχωριστικό δεν χρειάζεται να κάνουμε τίποτα.&lt;/p&gt;
&lt;h1 id="global"&gt;Η εντολή global&lt;/h1&gt;
&lt;p&gt;Ας πoύμε τώρα και για το global. Το global (&lt;code&gt;:g&lt;/code&gt;) μας επιτρέπει να εκτελέσουμε μια συγκεκριμένη εντολή σε όσες γραμμές πληρούν κάποια προϋπόθεση. πχ&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;1) :g/emacs/d 
2) :g/usr/s/sbin/bin/g 
3) :v/vim/d
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Η πρώτη εντολή θα ψάξει για γραμμές που έχουν την λέξη emacs και θα εκτελέσει την εντολή &lt;code&gt;d&lt;/code&gt;. Δηλαδή θα διαγράψει όσες γραμμές έχουν την λέξη emacs. Η δεύτερη εντολή θα ψάξει για γραμμές που έχουν τη λέξη usr και θα εκτελέσει την εντολή &lt;code&gt;s&lt;/code&gt; η οποία θα αλλάξει το sbin με το bin. Το συγκεκριμένο παράδειγμα είναι απλό και θα μπορούσε να γίνει και μόνο με την &lt;code&gt;s.&lt;/code&gt; Η τρίτη εντολή θα βρει όσες γραμμές έχουν την λέξη vim και διαγράψει τις υπόλοιπες. Δηλαδή είναι το αντίστροφο της &lt;code&gt;g&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;H εντολή που μπορούμε να εκτελέσουμε πρέπει να είναι εντολή του ex. Για παράδειγμα αν θέλουμε να σβήσουμε 10 χαρακτήρες με την εντολή &lt;code&gt;10x&lt;/code&gt; αυτό δεν γίνεται. Αν θέλουμε να εκτελέσουμε μια εντολή του vim μπορούμε να χρησιμοποιήσουμε το πρόθεμα &lt;code&gt;normal&lt;/code&gt; όπως φαίνεται παρακάτω:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;:g/vim/normal 10x
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Η παραπάνω εντολή λέει στο vim να σβήσει τους πρώτους 10 χαρακτήρες από κάθε γραμμή που περιέχει την λέξη vim.&lt;/p&gt;
&lt;h1 id="vim"&gt;Εκτελώντας εντολές μέσα από τον vim&lt;/h1&gt;
&lt;p&gt;Η εντολή &lt;code&gt;:!&lt;/code&gt; μας επιτρέπει να δούμε την έξοδο κάποιας εντολής. Δηλαδή αν γράψουμε &lt;code&gt;:!ls&lt;/code&gt; θα μας εμφανίσει τα αρχεία που υπάρχουν στον τρέχοντα κατάλογο. Εκτός από αυτό πολλές φορές θέλουμε και να επεξεργαστούμε την έξοδο της εντολής ή απλά να την εισάγουμε στο αρχείο μας. Αυτό μπορεί να γίνει αν συνδυάσουμε τις εντολές &lt;code&gt;:r&lt;/code&gt; και &lt;code&gt;:!&lt;/code&gt; π.χ&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;:r !ls
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;και έχουμε το αποτέλεσμα της &lt;code&gt;ls&lt;/code&gt; κατευθείαν μέσα στο buffer μας.&lt;/p&gt;
&lt;p&gt;Μπορούμε επίσης να κάνουμε και το αντίθετο. Αντί να εισάγουμε την έξοδο μιας εντολής στο buffer μας, να στείλουμε το buffer ως είσοδο μιας εντολής. Αυτό γίνεται με το πρόθεμα &lt;code&gt;%&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;Hello World 
:%!rev 
dlroW olleH
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Στο παραπάνω παράδειγμα, έχουμε "Hello World" και λέμε πάρτο και δωσ' το ως είσοδο στην εντολή &lt;code&gt;rev&lt;/code&gt; η οποία αναποδογυρίζει την είσοδο της οπότε το buffer μας γίνεται &lt;code&gt;dlroW olleH&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="_5"&gt;Ενεργοποίηση διάφορων επιλογών&lt;/h1&gt;
&lt;p&gt;Υπάρχουν πολλές επιλογές που μπορούν να δηλωθούν στο .vimrc ή κατά την διάρκεια του vim.&lt;/p&gt;
&lt;h2 id="background-bg"&gt;background (bg)&lt;/h2&gt;
&lt;p&gt;Όταν χρησιμοποιούμε το vim και όχι το gvim, μερικές φορές δεν λειτουργεί σωστά η αυτόματη ανίχνευση του φόντου του τερματικού με συνέπεια να μην φαίνονται καλά τα χρώματα. Για αυτό το λόγο μπορούμε να δηλώσουμε&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;set background=dark 
ή 
set background=light
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="hlsearch-hls"&gt;hlsearch (hls)&lt;/h2&gt;
&lt;p&gt;Όταν ψάξουμε κάτι, το vim το τονίζει ώστε να φαίνεται εύκολα. Αν τελειώσουμε αυτό που θέλαμε να κάνουμε και δεν θέλουμε να βλέπουμε τονισμένο κείμενο στα υπόλοιπα αποτελέσματα απενεργοποιούμε αυτή την επιλογή με&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;:set nohls
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Αν ψάξουμε κάτι νέο, τότε θα ενεργοποιηθεί αυτόματα πάλι.&lt;/p&gt;
&lt;h2 id="list"&gt;list&lt;/h2&gt;
&lt;p&gt;Εμφανίζει &lt;code&gt;$&lt;/code&gt; στο τέλος κάθε γραμμής και &lt;code&gt;^I&lt;/code&gt; για κάθε tab, έτσι μπορεί να μας διευκολύνει να διακρίνουμε τα tab όταν έχουμε κώδικα.&lt;/p&gt;
&lt;h2 id="listchars-lcs"&gt;listchars (lcs)&lt;/h2&gt;
&lt;p&gt;Η κανονική λειτουργία του list δεν είναι και πολύ χρήσιμη. Με την listchars μπορούμε να αλλάξουμε την λειτουργία της. Οι επιλογές που δέχεται είναι οι εξής:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;eol&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="err"&gt;Θα&lt;/span&gt; &lt;span class="err"&gt;εμφανίζει&lt;/span&gt; &lt;span class="err"&gt;τον&lt;/span&gt; &lt;span class="err"&gt;χαρακτήρα&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="err"&gt;στο&lt;/span&gt; &lt;span class="err"&gt;τέλος&lt;/span&gt; &lt;span class="err"&gt;κάθε&lt;/span&gt; &lt;span class="err"&gt;γραμμής&lt;/span&gt; 
&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;xy&lt;/span&gt; &lt;span class="err"&gt;Για&lt;/span&gt; &lt;span class="err"&gt;κάθε&lt;/span&gt; &lt;span class="n"&gt;tab&lt;/span&gt; &lt;span class="err"&gt;θα&lt;/span&gt; &lt;span class="err"&gt;εμφανίζει&lt;/span&gt; &lt;span class="err"&gt;στην&lt;/span&gt; &lt;span class="err"&gt;αρχή&lt;/span&gt; &lt;span class="err"&gt;τον&lt;/span&gt; &lt;span class="err"&gt;χαρακτήρα&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="err"&gt;και&lt;/span&gt; &lt;span class="err"&gt;έπειτα&lt;/span&gt; &lt;span class="err"&gt;τον&lt;/span&gt; &lt;span class="err"&gt;χαρακτήρα&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="err"&gt;μέχρι&lt;/span&gt; &lt;span class="err"&gt;να&lt;/span&gt; &lt;span class="err"&gt;τελειώσει&lt;/span&gt; &lt;span class="err"&gt;το&lt;/span&gt; &lt;span class="n"&gt;tab&lt;/span&gt; 
&lt;span class="n"&gt;trail&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="err"&gt;Θα&lt;/span&gt; &lt;span class="err"&gt;εμφανίζει&lt;/span&gt; &lt;span class="err"&gt;τον&lt;/span&gt; &lt;span class="err"&gt;χαρακτήρα&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="err"&gt;για&lt;/span&gt; &lt;span class="err"&gt;όσες&lt;/span&gt; &lt;span class="n"&gt;spaces&lt;/span&gt; &lt;span class="err"&gt;υπάρχουν&lt;/span&gt; &lt;span class="err"&gt;στο&lt;/span&gt; &lt;span class="err"&gt;τέλος&lt;/span&gt; &lt;span class="err"&gt;της&lt;/span&gt; &lt;span class="err"&gt;γραμμής&lt;/span&gt; 
&lt;span class="kd"&gt;extends&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="err"&gt;Όταν&lt;/span&gt; &lt;span class="err"&gt;η&lt;/span&gt; &lt;span class="err"&gt;γραμμή&lt;/span&gt; &lt;span class="err"&gt;είναι&lt;/span&gt; &lt;span class="err"&gt;μεγαλύτερη&lt;/span&gt; &lt;span class="err"&gt;από&lt;/span&gt; &lt;span class="err"&gt;ό&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;τι&lt;/span&gt; &lt;span class="err"&gt;χωράει&lt;/span&gt; &lt;span class="err"&gt;στην&lt;/span&gt; &lt;span class="err"&gt;οθόνη&lt;/span&gt; &lt;span class="err"&gt;θα&lt;/span&gt; &lt;span class="err"&gt;εμφανίζει&lt;/span&gt; &lt;span class="err"&gt;τον&lt;/span&gt; &lt;span class="err"&gt;χαρακτήρα&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="err"&gt;για&lt;/span&gt; &lt;span class="err"&gt;να&lt;/span&gt; &lt;span class="err"&gt;μας&lt;/span&gt; &lt;span class="err"&gt;δείξει&lt;/span&gt; &lt;span class="err"&gt;ότι&lt;/span&gt; &lt;span class="err"&gt;η&lt;/span&gt; &lt;span class="err"&gt;γραμμή&lt;/span&gt; &lt;span class="err"&gt;φεύγει&lt;/span&gt; &lt;span class="err"&gt;εκτός&lt;/span&gt; &lt;span class="err"&gt;οθόνης&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ένα παράδειγμα είναι το παρακάτω &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;set listchars=eol:$,tab:&amp;gt;-,trail:. 
highlight SpecialKey ctermfg=red


1) printf(&amp;quot;foo\n&amp;quot;); 
2)&amp;gt;------printf(&amp;quot;foo\n&amp;quot;);...$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Το αποτέλεσμα φαίνεται στην μορφή 2) όπου βλέπουμε ότι χρησιμοποιούνται 8άρια tabs και ότι στο τέλος ξέφυγαν 3 spaces που πρέπει να σβήσουμε από τον κώδικα.&lt;/p&gt;
&lt;h2 id="textwidth-tw"&gt;textwidth (tw)&lt;/h2&gt;
&lt;p&gt;Αν δηλωθεί ορίζει το μέγεθος κάθε γραμμής. Αν επιχειρήσουμε να περάσουμε το όριο αυτό θα γίνει αυτόματα wrap στην επόμενη γραμμή. Κανονικά είναι απενεργοποιημένη γιατί έχει νόημα σε κώδικα και όχι οπουδήποτε. Για να την ενεργοποιήσουμε σε συγκεκριμένο τύπο αρχείων μπορούμε να χρησιμοποιήσουμε τις autocommands του vim. π.χ&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;autocmd FileType c setlocal textwidth=78
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Η παραπάνω εντολή λέει ότι αν το αρχείο που έχουμε φορτώσει είναι αρχείο C, τότε θέσε μέγιστο όριο γραμμής τους 78 χαρακτήρες. Η &lt;code&gt;setlocal&lt;/code&gt; θέτει την παράμετρο μόνο για το τοπικό buffer. Αν είχαμε ανοίξει πολλά αρχεία και χρησιμοποιούσαμε την &lt;code&gt;set&lt;/code&gt; τότε θα έθεται την &lt;code&gt;tw&lt;/code&gt; και για εκείνα το οποίο δεν θέλουμε.&lt;/p&gt;
&lt;h2 id="c_space_errors"&gt;c_space_errors&lt;/h2&gt;
&lt;p&gt;Αυτή δεν είναι παράμετρος του vim αλλά του syntax highlighter της C. Αν δηλωθεί, τότε θα εμφανίζει τα spaces που βρίσκονται στο τέλος με κόκκινο. Πρέπει να δηλωθεί πριν φορτωθεί ο syntax highlighter π.χ&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;let c_space_errors = 1 syntax on
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;]
και λειτουργεί ανεξάρτητα της list και μόνο σε C αρχεία. Η list είναι πιο εύχρηστη.&lt;/p&gt;
&lt;h1 id="registers"&gt;Registers&lt;/h1&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;The quick brown fox jumps over the lazy dog
Τρεία πουλάκια κάθονταν.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ας υποθέσουμε ότι έχουμε το παραπάνω κείμενο. Θέλουμε να αντιγράψουμε 50 γραμμές πιο κάτω το κείμενο με την αλεπού, οπότε πηγαίνουμε τον δρομέα πάνω του και πληκτρολογούμε &lt;code&gt;yy&lt;/code&gt; για να αντιγραφεί η γραμμή. Τώρα μένει να πάμε το δρομέα εκεί που θέλουμε και να πατήσουμε &lt;code&gt;p&lt;/code&gt; για να γίνει η επικόλληση. Βλέπουμε όμως ότι το τρία το έχουμε γράψει λάθος οπότε πληκτρολογούμε x και σβήνουμε το έψιλον. Αφού έχουμε μετακινηθεί 50 πιο κάτω πληκτρολογούμε p και βλέπουμε έκπληκτοι και νευριασμένοι ότι γίνεται επικόλληση το έψιλον που σβήσαμε.&lt;/p&gt;
&lt;p&gt;Κάθε εντολή που πραγματοποιεί αλλαγές τις εισάγει σε κάποιο register (κάτι σαν buffer). Οπότε με την εκτέλεση της x το αποτέλεσμα της yy έπαψε να υπάρχει.&lt;/p&gt;
&lt;p&gt;Εκτός από τον default register το vi μας επιτρέπει να χρησιμοποιήσουμε 26 ακόμη registers με ονόματα a-z. Για να προσπελάσουμε τον κάθε register χρησιμοποιούμε το &lt;code&gt;"&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Οπότε στην παραπάνω περίπτωση μπορούμε αντί για &lt;code&gt;yy&lt;/code&gt; να δώσουμε &lt;code&gt;"ayy&lt;/code&gt; οπότε το αποτέλεσμα θα μπει στον &lt;code&gt;a&lt;/code&gt; register και δεν θα χαθεί όταν σβήσουμε το έψιλον. Έπειτα για να γίνει η επικόλληση δίνουμε &lt;code&gt;"ap&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="marks"&gt;Marks&lt;/h1&gt;
&lt;p&gt;Στο προηγούμενο μήνυμα είπαμε ότι αν εκτελέσουμε πχ &lt;code&gt;5dd&lt;/code&gt; θα σβήσουμε 5 γραμμές. Μπορεί όμως να μην ξέρουμε πόσες ακριβώς είναι οι γραμμές και εννοείται πως δεν θα κάτσουμε να μετράμε. Εδώ έρχονται τα marks τα οποία μας επιτρέπουν να μαρκάρουμε μια περιοχή και να εκτελούμε εντολές πάνω της. Τα marks είναι πάλι 26 με ονόματα a-z αλλά αυτή τη φορά χρησιμοποιούμε το &lt;code&gt;'&lt;/code&gt; (μονό εισαγωγικό).&lt;/p&gt;
&lt;p&gt;Ας υποθέσουμε ότι αυτό που μόλις έγραψα ήταν κείμενο στο vi. Ο δρομέας είναι στο &lt;em&gt;Στο&lt;/em&gt; και πληκτρολογούμε ma. Αυτό λέει ότι μαρκάρισε την γραμμή ως a. Έπειτα πηγαίνουμε το δρομέα στη γραμμή &lt;em&gt;Τα marks&lt;/em&gt;. Αν πληκτρολογήσουμε &lt;code&gt;y'a&lt;/code&gt; θα αντιγράψει τις 6 αυτές γραμμές, ενώ με &lt;code&gt;d'a&lt;/code&gt; μπορούμε να τις σβήσουμε.&lt;/p&gt;
&lt;p&gt;Τα marks είναι χρήσιμα αλλά η Visual κατάσταση δίνει μεγαλύτερη εποπτεία οπότε δεν πολύ χρησιμοποιούνται.&lt;/p&gt;
&lt;h1 id="backreferences-patterns"&gt;Backreferences και Patterns&lt;/h1&gt;
&lt;p&gt;Αυτό δεν είναι καθαρά vim αλλά και το sed και πολλά εργαλεία έχουν την ίδια σύνταξη. Είναι τεράστιο κεφάλαιο αλλά επειδή αναφέραμε την εντολή &lt;code&gt;s&lt;/code&gt; πρέπει να αναφέρουμε και τα backreferences.&lt;/p&gt;
&lt;p&gt;Οι πιο βασικοί μεταχαρακτήρες που ισχύουν σε patterns είναι οι ακόλουθοι.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;. = Οποιοσδήποτε χαρακτήρας
* = Ο προηγούμενος χαρακτήρας μπορεί να υπάρχει όσες φορές θέλει
^ = αρχή της γραμμής
$ = τέλος της γραμμής
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Παραδείγματα:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;H.llo = Hallo, Hbllo, Hello κτλ
^Hello = Η γραμμή αρχίζει με Hello.
World$ = Η γραμμή τελειώνει με World
H.*o = Οποιαδήποτε λέξη αρχίζει με H και περιέχει o
      (Το . λέει οποιοσδήποτε χαρακτήρας και το * όσες φορές
      θέλει ο προηγούμενος οπότε πιάνει τα πάντα)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Τα &lt;em&gt;backreferences&lt;/em&gt; χρησιμοποιούνται όταν θέλουμε να κρατήσουμε ένα μέρος του pattern. Δηλώνονται με τα &lt;code&gt;\(&lt;/code&gt; και &lt;code&gt;\)&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;Ο Κώστας είναι ψηλός και ο Γιώργος είναι ψηλός
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Θέλουμε να αλλάξουμε την παραπάνω πρόταση ώστε να λέει ο Γιώργος είναι πολύ ψηλός. Η κλασική εντολή θα ήταν&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;s/ψηλός/πολύ ψηλός/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Σε αυτή την περίπτωση όμως θα αλλάξει τον Κώστα ή με &lt;a href="#global"&gt;g&lt;/a&gt; και τον Κώστα. Άρα τι εντολή να βάλουμε; Εδώ θα χρησιμοποιήσουμε τα backreferences δηλαδή τις αναφορές.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;s/\(Γιώργος.*\) ψηλός/\1 πολύ ψηλός/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Το &lt;code&gt;Γιώργος.* ψηλός&lt;/code&gt; σημαίνει ψάξε για μια φράση που αρχίζει με την λέξη Γιώργος, μετά ακολουθεί οτιδήποτε και τελειώνει στη λέξη ψηλός. Οι quoted παρενθέσεις λένε ότι το κομμάτι αυτό το χρειάζομαι οπότε έχε το υπ' όψιν σου και θα στο ζητήσω κάποια στιγμή. Αυτό όλο θα το αντικαταστήσεις με την φράση &lt;code&gt;\1 πολύ ψηλός&lt;/code&gt;, όπου &lt;code&gt;\1&lt;/code&gt; σημαίνει η πρώτη αναφορά που σου ζήτησα. Δηλαδή η φράση &lt;code&gt;Γιώργος είναι ψηλός&lt;/code&gt; αντικαθίσταται με την φράση &lt;code&gt;Γιώργος είναι πολύ ψηλός&lt;/code&gt;&lt;/p&gt;
&lt;h1 id="foldmethod"&gt;Απόκρυψη (δίπλωση) πληροφοριών με την foldmethod&lt;/h1&gt;
&lt;p&gt;Το vim μάς επιτρέπει να αποκρύπτουμε (διπλώνουμε) πληροφορίες για ευκολότερη ανάγνωση. Αυτό χρησιμεύει σε μεγάλα κείμενα με πολλαπλές ενότητες.
Η παράμετρος που δηλώνει την μέθοδο που θα χρησιμοποιηθεί για το δίπλωμα είναι η &lt;code&gt;foldmethod&lt;/code&gt;. Κανονικά όταν τρέχουμε το vim είναι επιλεγμένη η manual για αυτό και δεν γίνεται κανένα δίπλωμα. Ακόμη, υπάρχουν οι &lt;code&gt;indent&lt;/code&gt;,&lt;code&gt;syntax&lt;/code&gt;,&lt;code&gt;expr&lt;/code&gt;,&lt;code&gt;marker&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Η expr δέχεται ως όρισμα μια εντολή της αρεσκείας μας με βάση την οποία ορίζει το δίπλωμα. Είναι πολύ δυνατή αλλά δεν χρησιμοποιείται πολύ συχνά.&lt;/p&gt;
&lt;p&gt;Η indent και η syntax έχουν παρόμοια λειτουργία στις περισσότερες περιπτώσεις. Ας δούμε για παράδειγμα τον παρακάτω κώδικα:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Factorial of %d = %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;
                        &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Αν εκτελέσουμε &lt;code&gt;:set foldmethod=indent&lt;/code&gt; αυτή θα διπλώσει τον κώδικα μας με βάση την κάθε βαθμίδα indentation και θα προκύψει το εξής:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;+--&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="nl"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;-------------------&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;               
&lt;span class="o"&gt;+--&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="nl"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;----------&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;Όπως ήταν αναμενόμενο μας έκλεισε όλες τις δηλώσεις με βάση το indentation. Η μέθοδος αυτή λειτουργεί για οποιοδήποτε κείμενο χρησιμοποιεί indentation. &lt;/p&gt;
&lt;p&gt;Αντίθετα η syntax χρειάζεται να έχει δηλωθεί η σύνταξη του κάθε τύπου αρχείου για να λειτουργήσει, το vim όμως έχει ενσωματωμένες συντάξεις για πάρα πολλούς τύπους αρχείων. Ας δούμε τώρα πόσο διαφορετική θα είναι αυτή η μέθοδος.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;+--&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="nl"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;-----------------------&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;+--&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="nl"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;-----------------------&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Εδώ βλέπουμε ότι αναγνωρίζεται η σύνταξη της C. Έτσι γνωρίζει ότι έχουμε δηλώσει κάποιες συναρτήσεις και γι' αυτό μας κρύβει όλη την συνάρτηση, οπότε οπτικά είναι καλύτερο για μεγάλους κώδικες.&lt;/p&gt;
&lt;p&gt;Κακά τα ψέμματα, τα αποτελέσματα και με τις δύο μεθόδους ήταν άθλια. Δεν μπορείς να δεις τίποτα. Σε αυτό παίζει ρόλο η επιλογή &lt;code&gt;foldlevel&lt;/code&gt; η οποία ορίζει από ποια βαθμίδα και έπειτα θα γίνεται το δίπλωμα. Κανονικά έχει την τιμή 0 οπότε διπλώνονται όλες οι δηλώσεις. Οι περισσότεροι χρήστες βρίσκουν για κώδικα την τιμή 1 ως βέλτιστη, η οποία διπλώνει δηλώσεις από την 2η βαθμίδα και έπειτα. Ας δούμε τι αποτέλεσμα θα έχει αυτό στις δύο προηγούμενες περιπτώσεις.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;indent&lt;/em&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;+---&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nl"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="o"&gt;---------&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;+---&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="nl"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-----------&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Τώρα το αποτέλεσμα είναι πολύ καλύτερο. Έχουμε μια ιδέα τι κάνει η κάθε συνάρτηση και αποκρύπτονται πχ οι λεπτομέρειες του for.
&lt;em&gt;syntax&lt;/em&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;+---&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="nl"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;------&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;+---&lt;/span&gt;  &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="nl"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;-------------------&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Όπως και πριν το αποτέλεσμα της syntax είναι καλύτερο οπτικά γιατί γνωρίζει τις ιδιαιτερότητες της C.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Συνδυασμοί πλήκτρων&lt;/em&gt;
Όλες οι εντολές αναδίπλωσης ξεκινούν με &lt;code&gt;z&lt;/code&gt;.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;zo = Άνοιγμα του fold στη θέση του δρομέα
zO = Άνοιγμα του fold καθώς και αυτών που βρίσκονται μέσα σε αυτό
zc = Κλείσιμο του fold στη θέση του δρομέα
zC = Κλείσιμο του fold καθώς και αυτών που βρίσκονται μέσα σε αυτό
za = Εναλλαγή της κατάστασης του fold (Άνοιγμα/Κλείσιμο)
zA = Εναλλαγή της κατάστασης και αυτών που βρίσκονται μέσα
zj = Μετακίνηση του δρομέα στο επόμενο fold
zk = Μετακίνηση του δρομέα στο προηγούμενο fold
zi = Εναλλαγή της κατάστασης foldenable με συνέπεια το άνοιγμα ή κλείσιμο όλων των folds
zM = Θέτει στην foldlevel την τιμή 0 κλείνοντας ουσιαστικά όλα τα folds
zR = Θέτει στην foldlevel την μέγιστη τιμή ανοίγοντας ουσιαστικά όλα τα folds
zm = Μειώνει την foldlevel κατά 1 κλείνοντας μια βαθμίδα από folds
zr = Αυξάνει την foldlevel κατά 1 ανοίγοντας μια βαθμίδα από folds
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ας δούμε τώρα και την τρίτη μέθοδο που είναι η &lt;code&gt;marker&lt;/code&gt;. Εδώ επιλέγουμε πως θέλουμε να γίνει δίπλωμα μόνο όπου υπάρχουν οι markers &lt;code&gt;{{{&lt;/code&gt; και &lt;code&gt;}}}&lt;/code&gt;. Αυτή η μέθοδος έχει το καλό ότι επιλέγουμε εμείς να κάνουμε folding μόνο εκεί που θέλουμε να γίνει. Δεν χρησιμοποιείται πάρα πολύ σε κώδικα αλλά συνήθως σε αρχεία που δεν έχουν κάποια σύνταξη ή indentation.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;# {{{ Γεια σου κόσμε
echo Hello World
# }}}

/* {{{ Γεια σου κόσμε */
printf(&amp;quot;Hello World\n&amp;quot;);
/* }}} */
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Τα παραπάνω είναι δύο παραδείγματα για shell και C. Το κείμενο που βάζουμε μετά τον &lt;code&gt;{{{&lt;/code&gt; marker θα εμφανίζεται ως περιγραφή όταν το fold είναι κλειστό.&lt;/p&gt;
&lt;p&gt;Υπάρχουν αρκετοί στους οποίους οι μέθοδοι indent και syntax δεν αρέσουν γιατί δυσκολεύουν αντί να ευκολύνουν στη συγγραφή κώδικα. Υπάρχουν όμως περιπτώσεις που βολεύει η χρήση των markers όπως π.χ. στα αρχεία εκκίνησης του zsh. Για παράδειγμα ένα αρχείο zshrc μπορεί να φαίνεται ως εξής:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;+-- 36 lines: Δήλωση του prompt ---------------------

+-- 57 lines: Λειτουργίες πλήκτρων -------------------

+-- 64 lines: Δήλωση μεταβλητών --------------------

+-- 41 lines: Δήλωση συντομεύσεων (aliases) ----
κτλ
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Έτσι, όταν θέλoυμε να αλλάξουμε ή να προσθέσουμε κάτι δεν χρειάζεται να ψάχνουμε μέσα σε 700 γραμμές. Απλά πηγαίνουμε στην κατηγορία που θέλουμε και ανοίγουμε το fold.&lt;/p&gt;
&lt;p&gt;Καλά και χρυσά τα folds, αλλά δεν μπορούμε κάθε φορά που ανοίγουμε ένα αρχείο να γράφουμε &lt;code&gt;:set foldmethod=τάδε&lt;/code&gt;. Για αυτό το λόγο, το vim υποστηρίζει τα λεγόμενα &lt;code&gt;modelines&lt;/code&gt; που είναι γραμμές οι οποίες λένε στο vim ποιες παραμέτρους να ενεργοποιήσει για το συγκεκριμένο αρχείο.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;[κείμενο]&amp;lt;κενό&amp;gt;vim:παράμετροι 
[κείμενο]&amp;lt;κενό&amp;gt;vim:set παράμετροι: [κείμενο]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Αυτές είναι οι δύο μορφές που μπορούμε να χρησιμοποιήσουμε για να δηλώσουμε την modeline. Το vim ψάχνει ένα αριθμό γραμμών στην αρχή και στο τέλος του αρχείου για πιθανά modelines, έτσι μπορούμε να την δηλώσουμε είτε στην αρχή είτε στο τέλος του αρχείου μας.&lt;/p&gt;
&lt;p&gt;Πιθανά παραδείγματα&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;# vim:filetype=zsh:foldmethod=marker
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Όπως αναφέρθηκε πιο πάνω μπορεί να χρησιμοποιηθεί στα αρχεία του zsh. Ο τύπος του αρχείου θα αναγνωριζόταν αυτόματα αλλά καλό είναι να τον δηλώνουμε. Όπως βλέπουμε στην σύνταξη, η πρώτη μορφή δεν επιτρέπει κείμενο στο τέλος, οπότε σε συγκεκριμένες περιπτώσεις πρέπει να χρησιμοποιηθεί η δεύτερη μορφή.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* vim:filetype=c:foldmethod=syntax *ΛΑΘΟΣ* &lt;/span&gt;
&lt;span class="cm"&gt;/* vim:set filetype=c:foldmethod=syntax */&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="err"&gt;ΣΩΣΤΟ&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Οι modelines χρησιμοποιούνται για να δηλώσουμε οτιδήποτε παραμέτρους θέλουμε να ισχύουν για το συγκεκριμένο αρχείο μας και όχι μόνο για το folding. Έτσι, για λόγους ασφαλείας, δεν διαβάζονται όταν ο χρήστης είναι ο root. Αν ανοίξουμε ένα αρχείο ως root, θα πρέπει να εκτελέσουμε &lt;code&gt;:set foldmethod=τάδε&lt;/code&gt; ακόμη και αν υπάρχει modeline.&lt;/p&gt;
&lt;h1 id="colorcolumn"&gt;Η εντολή colorcolumn&lt;/h1&gt;
&lt;p&gt;Για προγραμματισμό, παρόμοια και εξίσου χρήσιμη είναι και η colorcolumn. Πολλά IDE έχουν μια (πράσινη συνήθως) κατακόρυφη γραμμή που δηλώνει τα όρια του κώδικα για παράδειγμα 80 στήλες. Η colorcolumn κάνει ακριβώς το ίδιο. Το μόνο κακό είναι ότι λόγω της φύσης του vim έχει πλάτος ένα χαρακτήρα οπότε είναι λίγο χοντροκομμένη και μπορεί να κουράζει κάποιους. Μπορεί εύκολα να χρησιμοποιηθεί μόνο σε αρχεία προγραμματισμού.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;autocmd FileType c setlocal textwidth=78 
autocmd FileType c setlocal colorcolumn=+1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Πχ. σε αρχεία γλώσσας C να χρησιμοποιούνται το πολύ 78 στήλες (από τη μάνα του το vim δεν πειράζει τον κώδικα αλλά τα σχόλια αναδιπλώνονται αυτόματα αν περάσουν τις 78 στήλες) και να χρωματιστεί η στήλη textwidth+1 δηλαδή η 79.&lt;/p&gt;
&lt;h1 id="_6"&gt;Τοποθεσία κέρσορα&lt;/h1&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;:hi CursorLine   cterm=NONE ctermbg=lightgrey
:hi CursorColumn cterm=NONE ctermbg=lightgrey
:nnoremap &amp;lt;Leader&amp;gt;c :set cursorline! cursorcolumn!&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Με τον συγκεκριμένο κώδικα γίνονται 3 πράγματα:
1) το highlight είναι γκρι
2) ΔΕΝ είναι υπογραμμισμένο
3) ΔΕΝ είναι ενεργοποιημένο, αλλά μπορεί πολύ εύκολα να ενεργοποιηθεί/απενεργοποιηθεί πατώντας &lt;code&gt;\c&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="_7"&gt;Ελληνικός ορθογράφος&lt;/h1&gt;
&lt;p&gt;Αν η διανομή μας έχει πακέτο με το Ελληνικό αρχείο ορθογραφίας του vim, τότε απλά το εγκαθιστούμε, Αν όχι, τότε πρέπει να το δημιουργήσουμε με βάση μία λίστα λέξεων. Πολλές διανομές εγκαθιστούν λίστες λέξεων για Ελληνικά για aspell, myspell,  αλλά ας υποθέσουμε ότι δεν έχουμε τέτοιο πακέτο οπότε ας το κατεβάσουμε.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;mkdir foo; cd foo 
wget http://extensions.services.openoffice.org/e-files/1411/2/el_gr_v110.oxt 
unzip el_gr_v100.oxt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Τα αρχεία που μας ενδιαφέρουν είναι το &lt;code&gt;el_GR.dic&lt;/code&gt; που είναι η λίστα με τις λέξεις και το &lt;code&gt;el_GR.aff&lt;/code&gt; που έχει διάφορα χαρακτηριστικά των Ελληνικών. Έπειτα τρέχουμε το vim για να δημιουργήσουμε το αρχείο και τρέχουμε&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;:mkspell el el_GR
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Η εντολή θα δημιουργήσει ένα αρχείο &lt;code&gt;el.utf-8.spl&lt;/code&gt; ή &lt;code&gt;el.iso8859-7.spl&lt;/code&gt; ανάλογα με το encoding που έχoυμε με βάση τα αρχεία &lt;code&gt;.aff&lt;/code&gt; και &lt;code&gt;.dic&lt;/code&gt; που έχουν πρόθεμα &lt;code&gt;el_GR&lt;/code&gt;. Έπειτα απλά πρέπει να το βάλουμε στο σωστό μέρος.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;mkdir -p ~/.vim/spell 
mv el.utf-8.spl ~/.vim/spell
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Από εδώ και πέρα έχουμε Ελληνικό ορθογράφο ο οποίος ενεργοποιείται με&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;:set spell spelllang=el
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Τέλος μπορούμε να έχουμε ταυτόχρονα 2 λεξικά ενεργοποιημένα (πχ ελληνικό - αγγλικό)&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;:set spell spelllang=el,en
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Για το λόγο αυτό παράξαμε παραπάνω την «precompiled» μορφή ώστε το vim να αναγνωρίζει γρήγορα μια λέξη και να μπορούμε να έχουμε φορτωμένα πολλά λεξικά. Ουσιαστικά η mkspell κάνει το αρχείο binary για να γίνεται πιο γρήγορα το matching.&lt;/p&gt;
&lt;h1 id="vimrc"&gt;Παράδειγμα .vimrc&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Τα διπλά αυτάκια &lt;code&gt;"&lt;/code&gt; δηλώνουν σχόλια.&lt;/em&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&amp;quot;Με την autoread αν το αρχείο έχει αλλάξει από το άνοιγμα του αλλά δεν
&amp;quot;έχει γίνει κάποια αλλαγή από εμάς, τότε διαβάζει ξανά αυτόματα το αρχείο. 
&amp;quot;Το lazyredraw δεν σχεδιάζει ξανά την οθόνη κατά την εκτέλεση των macros.

set autoread
set lazyredraw
set nomodeline
set nobackup        &amp;quot;δεν κάνει αυτόματα backups
set viminfo=&amp;quot;NONE&amp;quot;  &amp;quot;απενεργοποιεί το .viminfo

&amp;quot;Απενεργοποίηση του mouse 
 if has(&amp;#39;mouse&amp;#39;)
     set mouse=a
 endif

&amp;quot;Σκοτεινό φόντο και εμφάνιση των tabs και των τελικών spaces σε κώδικα.
set background=dark
set listchars=eol:$,tab:&amp;gt;-,trail:.
highlight SpecialKey ctermfg=red
let c_space_errors = 1

&amp;quot;Διάφορες custom λέξεις και patterns που θέλω να είναι τονισμένες.
syntax match TadeName &amp;quot;Pattern&amp;quot;
highlight match TadeName ctermfg=tadexroma

&amp;quot;Όταν διαβάζω αρχεία που βρίσκονται μέσα στο /var/log δηλαδή logs να πηγαίνει
&amp;quot;αυτόματα στο τέλος του αρχείου. Μέσα στον /var/log όμως το Slackware έχει
&amp;quot;και άλλους καταλόγους όπως π.χ τον κατάλογο με τις πληροφορίες των πακέτων.
&amp;quot;Εκεί δεν θέλω να με πηγαίνει στο τέλος. Παλαιότερα είχα regexp αλλά από μια
&amp;quot;έκδοση και μετά δεν έπαιζε οπότε μετράω τις / που υπάρχουν στο όνομα.
&amp;quot;Αν χαλάσει το match, να το κάνω stridx(s:name,&amp;#39;/&amp;#39;,9)
autocmd BufReadPost /var/log/*
\ let s:name = expand(&amp;quot;&amp;lt;afile&amp;gt;:p&amp;quot;) |
\ if match(s:name,&amp;#39;/&amp;#39;,0,4) == -1 |
\   exe &amp;quot;normal G&amp;quot; |
\ endif |
\ unlet! s:name

&amp;quot;Μερικές φορές θέλω να κάνω επικόλληση κάτι χωρίς όμως να χαλάσει η δομή του.
&amp;quot;Το vim παρέχει την επιλογή paste για αυτό. Έτσι με το F10 αλλάζω την επιλογή.
&amp;quot;Επίσης το F2 ενεργοποιεί/απενεργοποιεί την list ώστε να βλέπω σε κώδικα αν
&amp;quot;έχω ξεχάσει κενά ή tabs και το F8 απενεργοποιεί την hlsearch όταν έχω βρει
&amp;quot;αυτό που θέλω και δεν θέλω να βλέπω πλέον τα highlights.
&amp;quot;Key Mappings
set pastetoggle=&amp;lt;F10&amp;gt;
nmap &amp;lt;silent&amp;gt; &amp;lt;F2&amp;gt; :set list!&amp;lt;cr&amp;gt;
imap &amp;lt;silent&amp;gt; &amp;lt;F2&amp;gt; &amp;lt;esc&amp;gt;:set list!&amp;lt;cr&amp;gt;a
nmap &amp;lt;silent&amp;gt; &amp;lt;F8&amp;gt; :set hls!&amp;lt;cr&amp;gt;

&amp;quot;Τα leader και localleader είναι κάποια εικονικά πλήκτρα για την εύκολη χρήση
&amp;quot;συνδυασμών. Κανονικά είναι ρυθμισμένα να χρησιμοποιούν το backslash αλλά
&amp;quot;μπορούμε να αλλάξουμε την τιμή τους. Οι καρτέλες δεν έχουν και πολύ νόημα
&amp;quot;σε X τερματικά μια και υποστηρίζουν και αυτά καρτέλες αλλά είναι χρήσιμες στην
&amp;quot;κονσόλα.

&amp;quot;Αλλαγή των πλήκτρων leader από το default \
&amp;quot;let mapleader = &amp;#39;,&amp;#39;
&amp;quot;let maplocalleader = &amp;#39;,&amp;#39;

&amp;quot;Αποθήκευση αρχείου
nmap &amp;lt;leader&amp;gt;w :w&amp;lt;cr&amp;gt;

&amp;quot;Μεταφορά στο προηγούμενο/επόμενο buffer
nmap &amp;lt;leader&amp;gt;n :bn&amp;lt;cr&amp;gt;
nmap &amp;lt;leader&amp;gt;p :bp&amp;lt;cr&amp;gt;

&amp;quot;Άνοιγμα νέας καρτέλας
nmap &amp;lt;leader&amp;gt;to :tabnew&amp;lt;cr&amp;gt;
&amp;quot;Κλείσιμο τρέχουσας καρτέλας
nmap &amp;lt;leader&amp;gt;tc :tabclose&amp;lt;cr&amp;gt;
&amp;quot;Μεταφορά στην προηγούμενη/επόμενη καρτέλα
nmap &amp;lt;leader&amp;gt;tn :tabnext&amp;lt;cr&amp;gt;
nmap &amp;lt;leader&amp;gt;tp :tabprev&amp;lt;cr&amp;gt;

&amp;quot;Κατάργηση των βελακίων ώστε να γίνουν συνήθεια τα hjkl. 
&amp;quot;Τα απενεργοποιούμε μόνο στην normal κατάσταση
&amp;quot;γιατί στην insert και στην command δεν υπάρχουν εναλλακτικές (εκτός από macros).

if &amp;amp;encoding == &amp;quot;utf-8&amp;quot;
  nnoremap &amp;lt;Left&amp;gt;     :echoerr &amp;quot;Το h αγκάθια έχει?&amp;quot;&amp;lt;cr&amp;gt;
  nnoremap &amp;lt;Down&amp;gt;     :echoerr &amp;quot;Το j αγκάθια έχει?&amp;quot;&amp;lt;cr&amp;gt;
  nnoremap &amp;lt;Up&amp;gt;       :echoerr &amp;quot;Το k αγκάθια έχει?&amp;quot;&amp;lt;cr&amp;gt;
  nnoremap &amp;lt;Right&amp;gt;    :echoerr &amp;quot;Το l αγκάθια έχει?&amp;quot;&amp;lt;cr&amp;gt;
  nnoremap &amp;lt;PageUp&amp;gt;   :echoerr &amp;quot;Το Ctrl-B αγκάθια έχει?&amp;quot;&amp;lt;cr&amp;gt;
  nnoremap &amp;lt;PageDown&amp;gt; :echoerr &amp;quot;Το Ctrl-F αγκάθια έχει?&amp;quot;&amp;lt;cr&amp;gt;
endif

&amp;quot;Για συγγραφή latex
&amp;quot;assign keyboard commands while using the greek keyboard:
map Α A
map Β B
map Ψ C
map Δ D
map Ε E
map Φ F
map Γ G
map Η H
map Ι I
map Ξ J
map Κ K
map Λ L
map Μ M
map Ν N
map Ο O
map Π P
map Q Q
map Ρ R
map Σ S
map Τ T
map Θ U
map Ω V
map W W
map Χ X
map Υ Y
map Ζ Z
map α a
map β b
map ψ c
map δ d
map ε e
map φ f
map γ g
map η h
map ι i
map ξ j
map κ k
map λ l
map μ m
map ν n
map ο o
map π p
map q q
map ρ r
map σ s
map τ t
map θ u
map ω v
map ς w
map χ x
map υ y
map ζ z
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="credits"&gt;Credits&lt;/h1&gt;
&lt;p&gt;Τα credits στους imitheos, arkara, tsigarid. 
Όποιος κατάφερε και διάβασε μέχρι εδώ είναι ήρωας... &lt;/p&gt;</summary><category term="vim"></category></entry><entry><title>Bringing GitLab to Fedora</title><link href="http://axilleas.me/en/blog/2013/bringing-gitlab-in-fedora" rel="alternate"></link><updated>2013-04-07T00:00:00+03:00</updated><author><name>axil</name></author><id>tag:axilleas.me,2013-04-07:en/blog/2013/bringing-gitlab-in-fedora</id><summary type="html">&lt;p&gt;&lt;strong&gt;&lt;em&gt;Update&lt;/em&gt;&lt;/strong&gt;: I just got a confirmation mail that my proposal got accepted! &lt;a href="http://axilleas.me/en/blog/2013/accepted-for-gsoc-2013"&gt;Read here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, I decided to write some info regarding my involvement for this year's
&lt;a href="http://www.google-melange.com/gsoc/homepage/google/gsoc2013" title="Google Summer of Code 2013"&gt;Google Summer of Code&lt;/a&gt;. I have been using/testing GitLab since
version 2.0 (almost a year now) and I am thrilled to see how much it has
growed since. This year I got a little more involved into this and
I made &lt;a href="https://github.com/gitlabhq/gitlabhq/commits/master/doc/install/installation.md?author=axilleas"&gt;two&lt;/a&gt; &lt;a href="https://github.com/gitlabhq/gitlabhq/commits/master/lib/tasks/gitlab/check.rake?author=axilleas"&gt;commits&lt;/a&gt; upstream. Nothing fancy, but I hope to
contribute more as time passes by.&lt;/p&gt;
&lt;p&gt;In the rest of this article I will try to explain what GitLab is,
how Fedora is involved into all this and what are the benefits of this involvement.
This is the first of many follow-up posts I intend to write, so keep tight!&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-gitlab"&gt;What is GitLab?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fedoras-involvement-so-far"&gt;Fedora's involvement so far&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-are-the-benefits"&gt;What are the benefits&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#get-more-ruby-packages-in-the-repos"&gt;Get more ruby packages in the repos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-new-service-for-fedorahostedorg"&gt;A new service for fedorahosted.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#next-steps-and-things-to-overcome"&gt;Next steps and things to overcome&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="what-is-gitlab"&gt;What is GitLab?&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://blog.gitlab.com" title="GitLab home page"&gt;GitLab&lt;/a&gt; is an &lt;a href="https://github.com/gitlabhq/gitlabhq" title="GitLab on Github :p"&gt;open source&lt;/a&gt; MIT licenced &lt;a href="http://git-scm.com" title="git home page"&gt;git&lt;/a&gt; repository
management application. It is built on &lt;a href="http://rubyonrails.org/" title="Ruby on Rails"&gt;Ruby on Rails&lt;/a&gt; and is
one of the most &lt;a href="https://github.com/popular/starred" title="GitLab featured in Github's most popular repos"&gt;popular&lt;/a&gt; projects featured on Github.
It is used by many companies as their internal git management repository.
The reason it gained so much popularity is that it bares a strong resemblance
to github's &lt;a href="http://gitlab.org/screenshots/" title="GitLab screenshots"&gt;looks&lt;/a&gt; and &lt;a href="http://blog.gitlab.com/features/" title="GitLab features"&gt;feels&lt;/a&gt;.
It is a project with great potential, under heavy development with a release
cycle every month. That makes it possible to apply bug fixes quite regularly
and test new features. And since a picture is worth a thousand words, here is
a &lt;a href="http://demo.gitlab.com/users/sign_in" title="GitLab demo site"&gt;demo site&lt;/a&gt; where you can test all the latest features.&lt;/p&gt;
&lt;h1 id="fedoras-involvement-so-far"&gt;Fedora's involvement so far&lt;/h1&gt;
&lt;p&gt;The thought of GitLab being packaged and deployed for &lt;a href="http://fedorahosted.org"&gt;Fedora Hosted&lt;/a&gt; isn't new.
It all started last March when &lt;a href="https://fedoraproject.org/wiki/User:Mojavelinux"&gt;Dan Allen&lt;/a&gt; &lt;a href="https://lists.fedoraproject.org/pipermail/infrastructure/2012-March/011463.html"&gt;proposed&lt;/a&gt; GitLab
to be used as a service for Fedora Hosted. If you follow the conversation
it summarizes to some key points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Projects pages should be ideally hosted as &lt;code&gt;$projectname.fedorahosted.org&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;GitLab and its dependencies should be packaged for Fedora and EPEL 6.&lt;/li&gt;
&lt;li&gt;Puppetize the whole thing up. &lt;a href="https://forge.puppetlabs.com/sbadia/gitlab"&gt;There&lt;/a&gt; are &lt;a href="https://forge.puppetlabs.com/lboynton/gitlab"&gt;some&lt;/a&gt; configs, but they'll sure need some adjustment.&lt;/li&gt;
&lt;li&gt;We need to form a team of maintainers for longterm support even after GSoC is over.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There was even a &lt;a href="https://groups.google.com/forum/?fromgroups=#!topic/gitlabhq/SQMDi-yyXmU"&gt;post&lt;/a&gt; in GitLab's list, also by Dan Allen,
bringing the project to the attention of the GitLab community.
The most interesting thing was that the &lt;a href="https://github.com/randx"&gt;lead developer&lt;/a&gt; of GitLab
was more than willing to help. In the end, there was an &lt;a href="https://fedoraproject.org/wiki/GSOC_2012/Student_Application_babakb/GitlabSetup" title="Student application for GitLab at GSoC 2012"&gt;application&lt;/a&gt; but
unfortunately that was the last anyone heard about the project.&lt;/p&gt;
&lt;p&gt;So, here we are a year after with me applying for the project. To be exact
there is &lt;a href="https://lists.fedoraproject.org/pipermail/summer-coding/2013-March/000286.html"&gt;another&lt;/a&gt; sudent interested in this as well, so that makes it two of us.
I have already expressed my interest in &lt;a href="https://lists.fedoraproject.org/pipermail/ruby-sig/2013-March/001270.html"&gt;RubySIG&lt;/a&gt; and in the &lt;a href="https://lists.fedoraproject.org/pipermail/infrastructure/2013-March/012631.html"&gt;infrastructure&lt;/a&gt; mailing list.
I was glad to see that there was a positive response from Dan Allen,
as well as some valuable advice from user &lt;a href="https://fedoraproject.org/wiki/User:Ktdreyer"&gt;Ken Dreyer&lt;/a&gt; who currently
tries to deal with &lt;a href="https://fedoraproject.org/wiki/User:Ktdreyer/Gitorious"&gt;Gitorious&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="what-are-the-benefits"&gt;What are the benefits&lt;/h1&gt;
&lt;p&gt;There are two major benefits for Fedora.&lt;/p&gt;
&lt;h2 id="get-more-ruby-packages-in-the-repos"&gt;Get more ruby packages in the repos&lt;/h2&gt;
&lt;p&gt;Prior to addressing my interest in the mailing lists, I approached &lt;a href="https://fedoraproject.org/wiki/User:Vondruch"&gt;Vít Ondruch&lt;/a&gt; to get some feedback about this task.
He was very helpful and pointed me to what should be done as a first step.
That is&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;identify which gems are missing in Fedora and package them,&lt;/li&gt;
&lt;li&gt;compile a list of gems GitLab is using, including all their dependencies (and possibly bundled dependencies).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For the first task, I used a hackish bash script which first accumulates
all rubygems in a file and then removes the duplicate packages and the ones
that are documentation.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;file_raw&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/axil/tools/fedora-gitlab/rubygems_fedora_raw&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;file_new&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/axil/tools/fedora-gitlab/rubygems_fedora&amp;#39;&lt;/span&gt;

yum search all rubygem &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt; &amp;gt; &lt;span class="nv"&gt;$file_raw&lt;/span&gt;

sed -e &lt;span class="s1"&gt;&amp;#39;s/rubygem-//g&amp;#39;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;s/.noarch//g&amp;#39;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;s/.x86_64//g&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
-e &lt;span class="s1"&gt;&amp;#39;/i686/d&amp;#39;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;/==/d&amp;#39;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;/:/d&amp;#39;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;/-doc/d&amp;#39;&lt;/span&gt; &amp;lt; &lt;span class="nv"&gt;$file_raw&lt;/span&gt; &amp;gt; &lt;span class="nv"&gt;$file_new&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In order to find what gems GitLab depends on, I used the &lt;a href="https://github.com/gitlabhq/gitlabhq/blob/master/Gemfile.lock"&gt;Gemfile.lock&lt;/a&gt;
and wrote a simple python &lt;a href="https://github.com/axilleas/gsoc/blob/master/gemfile.py"&gt;script&lt;/a&gt;&lt;sup id="fnref:python-script"&gt;&lt;a class="footnote-ref" href="#fn:python-script" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; that computes how many and which gems
Fedora and GitLab have in common. Below are some draft&lt;sup id="fnref:draft_numbers"&gt;&lt;a class="footnote-ref" href="#fn:draft_numbers" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; numbers and a bar chart.&lt;/p&gt;
&lt;div id="rubygems_chart"&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Gitlab uses: &lt;strong&gt;203&lt;/strong&gt; gems.&lt;/p&gt;
&lt;p&gt;Fedora has packaged: &lt;strong&gt;385&lt;/strong&gt; gems.&lt;/p&gt;
&lt;p&gt;There are &lt;strong&gt;97&lt;/strong&gt; common gems.&lt;/p&gt;
&lt;p&gt;There should be packaged: &lt;strong&gt;106&lt;/strong&gt; gems.&lt;/p&gt;
&lt;p&gt;Fedora will have &lt;strong&gt;27.53 %&lt;/strong&gt; more ruby packages, that is &lt;strong&gt;482&lt;/strong&gt; gems in total.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Not bad, &lt;strong&gt;106&lt;/strong&gt; more ruby packages! That is a plus now that Fedora is considered
one of &lt;a href="https://bugs.ruby-lang.org/projects/ruby-trunk/wiki/20SupportedPlatforms"&gt;Ruby's supported platforms&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; I just found out about the &lt;a href="http://isitfedoraruby.com/stats/gemfile_tool"&gt;gemfile tool&lt;/a&gt; that isitfedoraruby.com&lt;sup id="fnref:isitfedruby"&gt;&lt;a class="footnote-ref" href="#fn:isitfedruby" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;
is using. This will come in handy.&lt;/p&gt;
&lt;h2 id="a-new-service-for-fedorahostedorg"&gt;A new service for fedorahosted.org&lt;/h2&gt;
&lt;p&gt;After the packaging is done, the next big thing is the deployment process on
&lt;a href="http://fedorahosted.org"&gt;Fedora Hosted&lt;/a&gt; as a new service. Quoting Dan Allen's &lt;a href="https://lists.fedoraproject.org/pipermail/infrastructure/2013-March/012680.html"&gt;thought&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One of the key reasons I've been pushing for GitLab is because I see the
potential it has for drastically improving the discoverability of the
Fedora code base and encourage participation. I've been involved with a lot
of projects on GitHub and I'm amazed by how simple it is to submit changes
(to both code and documentation). In fact, it's often easier to send a
patch with a description of the change than to create an issue...flipping
the normal bug submitting process on its head.&lt;/p&gt;
&lt;p&gt;GitHub also works because it enables collaboration over coordination. You
don't have to ask for permission on GitHub. You just do it. Then you can
easily track when they get pulled in or changes are requested. (the same is
true of GitLab).&lt;/p&gt;
&lt;p&gt;With GitLab, we can bring that experience to the Fedora community. It's a
large enough community (esp in terms of repositories), that I'm positive
we'd see that collaboration kindle within the Fedora instance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So yeah, this is a big deal from this point of view :)&lt;/p&gt;
&lt;h1 id="next-steps-and-things-to-overcome"&gt;Next steps and things to overcome&lt;/h1&gt;
&lt;p&gt;There is certainly a lot more to do. For starters, as a Fedora newbie,
I have to run through the &lt;a href="https://fedoraproject.org/wiki/Packaging:Ruby"&gt;Ruby guidelines&lt;/a&gt; and learn
about the philosophy of rpm. Luckily, I am not a linux newbie (I've been
using Archlinux for 5 years) and I am adopting rapidly.
Then, I need to learn some Ruby. I have already printed &lt;em&gt;&lt;a href="http://mislav.uniqpath.com/poignant-guide"&gt;why's (poignant) Guide to Ruby&lt;/a&gt;&lt;/em&gt;
which is considered a must read, and believe me it is! (download the pdf from &lt;a href="https://github.com/downloads/mislav/poignant-guide/whys-poignant-guide-to-ruby.pdf"&gt;here&lt;/a&gt;).
&lt;a href="http://ruby.learncodethehardway.org/book/"&gt;Learn Ruby the hard way&lt;/a&gt; is also a good starting point. Ι think I'm on the right track.&lt;/p&gt;
&lt;p&gt;Now, as far as the packaging process is concerned, here is what more needs to be done:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MariaDB support. Since MariaDB will be the &lt;a href="https://lists.fedoraproject.org/pipermail/devel/2013-January/176584.html" title="Proposed F19 Feature: Replace MySQL with MariaDB"&gt;default&lt;/a&gt; &lt;a href="https://fedoraproject.org/wiki/Features/ReplaceMySQLwithMariaDB" title="Features/ReplaceMySQLwithMariaDB"&gt;implementation&lt;/a&gt; of MySQL in Fedora 19, GitLab will need to support it.&lt;/li&gt;
&lt;li&gt;Write systemd service files. I had made an &lt;a href="https://github.com/axilleas/gitlab-recipes/tree/master/systemd"&gt;attempt&lt;/a&gt; two months ago when I was trying to set up GitLab on Archlinux, but it is far from perfect.&lt;/li&gt;
&lt;li&gt;Packages to be EPEL compatible. A great advantage if GitLab gets packaged for Fedora, is that it would make it as easy as pie to install on a server running Red Hat, Centos, or some other rpm based distro.&lt;/li&gt;
&lt;li&gt;Ruby 2.0 compatibility. I don't think that'll be much of a stopper since GitLab is in the &lt;a href="https://github.com/gitlabhq/gitlabhq/commit/52cd655f71c6a5393b71640c13cd95e35e8d2624"&gt;process&lt;/a&gt; of supporting it, but I put it here just in case.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's all for now. If you read through here you should have a good understanding
of this project's goal. More posts to come!&lt;/p&gt;
&lt;!--Load the AJAX API--&gt;

&lt;script type="text/javascript" src="https://www.google.com/jsapi"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;

  // Load the Visualization API and the piechart package.
  google.load('visualization', '1.0', {'packages':['corechart']});

  // Set a callback to run when the Google Visualization API is loaded.
  google.setOnLoadCallback(drawChart);

  // Callback that creates and populates a data table,
  // instantiates the pie chart, passes in the data and
  // draws it.
  function drawChart() {

  // Create the data table.
  var data = new google.visualization.DataTable();
  data.addColumn('string', '');
  data.addColumn('number', 'rubygems');
  data.addRows([
    ['GitLab', 203],
    ['Fedora', 385],
    ['Common', 97],
    ['To be packaged', 106],
    ['Total after packaging', 482]
    ]);

  // Set chart options
  var options = {'title':'Numbers calculated on 08-04-2013', 'width':600, 'height':500};

  // Instantiate and draw our chart, passing in some options.
  var chart = new google.visualization.BarChart(document.getElementById('rubygems_chart'));
  chart.draw(data, options);
  }
&lt;/script&gt;

&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:python-script"&gt;
&lt;p&gt;I should write it in ruby, I know :p&amp;#160;&lt;a class="footnote-backref" href="#fnref:python-script" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:draft_numbers"&gt;
&lt;p&gt;I say draft, mainly because that is a raw calculation of GitLab's dependencies. One has to take into account the different/old versions that may exist between Fedora and GtiLab. There are also some packages GitLab pulls from git and not rubygems.org.&amp;#160;&lt;a class="footnote-backref" href="#fnref:draft_numbers" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:isitfedruby"&gt;
&lt;p&gt;&lt;a href="http://isitfedoraruby.com"&gt;isitfedoraruby.com&lt;/a&gt; is a cool web app that was the result of &lt;a href="https://fedoraproject.org/wiki/GSOC_2012/Student_Application_Zuhao/IsItFedoraRuby"&gt;last year's GSoC&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:isitfedruby" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="fedora"></category><category term="gitlab"></category><category term="gsoc"></category><category term="ruby"></category><category term="rails"></category></entry></feed>