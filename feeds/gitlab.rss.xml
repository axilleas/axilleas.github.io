<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Over the line</title><link>http://axilleas.github.io/</link><description></description><atom:link href="http://axilleas.github.io/feeds/gitlab.rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 09 Jul 2013 00:00:00 +0300</lastBuildDate><item><title>GSoC - Weekly update 3 and 4</title><link>http://axilleas.github.io/en/blog/2013/gsoc-weekly-update-3-and-4</link><description>&lt;p&gt;Here is what I have been doing the last two weeks.&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#work-on-packages"&gt;Work on packages&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#sanitize"&gt;sanitize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#boostrap-sass"&gt;boostrap-sass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orm_adapter"&gt;orm_adapter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#devise"&gt;devise&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#gems-and-their-versions-in-json-format"&gt;Gems and their versions in json format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#version-table-in-wiki"&gt;Version table in wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#init-repository"&gt;Init repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubygem-packaging-article"&gt;Rubygem packaging article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#todo-next-week"&gt;TODO next week&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="work-on-packages"&gt;Work on packages&lt;/h2&gt;
&lt;p&gt;I ran gem2rpm on all gems and saved their specs in a &lt;a href="https://github.com/axilleas/fedora/tree/master/packages/tmp"&gt;tmp&lt;/a&gt; folder
so that I can easily modify them later. I intend to split them in categories
according to the bundled gems in GitLab's &lt;a href="https://github.com/gitlabhq/gitlabhq/blob/master/Gemfile#L11-L143"&gt;Gemfile&lt;/a&gt; that are needed for production.
Below are some gems that are either almost ready for Bugzilla or submitted. There
are a dozen more that I work with but haven't pushed any changes to github. Will
do soon.&lt;/p&gt;
&lt;h3 id="sanitize"&gt;sanitize&lt;/h3&gt;
&lt;p&gt;Not yet submitted to BZ as it needs nokogiri 1.6.0 whereas in Fedora
we still have 1.5.9. Will have to talk to the maintainer of nokogiri for an update.&lt;/p&gt;
&lt;h3 id="boostrap-sass"&gt;boostrap-sass&lt;/h3&gt;
&lt;p&gt;Submitted in &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=982679"&gt;Bugzilla&lt;/a&gt;. This is a tricky one as per the package guidelines,
as it ships with some javascript files that are distributed from &lt;a href="https://github.com/twitter/bootstrap"&gt;Twitter bootstrap&lt;/a&gt;,
which are considered a bundle. And if you don't already know it, bundling is
prohibited by the &lt;a href="https://fedoraproject.org/wiki/Packaging:Guidelines#Duplication_of_system_libraries"&gt;packaging guidelines&lt;/a&gt;. You can follow the discussion
in the Bugzilla. There is also an interesting discussion going on in packaging ML,
about web Assets/JavaScript guidelines and are proposed some &lt;a href="https://lists.fedoraproject.org/pipermail/packaging/2013-July/009304.html"&gt;drafts&lt;/a&gt;.
This could probably alter the packaging structure of bootstrap-sass, but I don't
expect it anytime soon.&lt;/p&gt;
&lt;h3 id="orm_adapter"&gt;orm_adapter&lt;/h3&gt;
&lt;p&gt;Some tests are skipped because they require some gems not yet packaged for Fedora,
but that is a &lt;a href="https://lists.fedoraproject.org/pipermail/ruby-sig/2013-July/001384.html"&gt;little acceptable&lt;/a&gt;. This is a dependency of devise (see
below). To be submitted soon.&lt;/p&gt;
&lt;h3 id="devise"&gt;devise&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://github.com/plataformatec/devise"&gt;Devise&lt;/a&gt; provides ready-made authentication and user management for rails
applications. It is a very popular rack application among the rails community, so
it'll be cool to get it into Fedora's repos :)
Submission is on the way along with orm_adapter.&lt;/p&gt;
&lt;h2 id="gems-and-their-versions-in-json-format"&gt;Gems and their versions in json format&lt;/h2&gt;
&lt;p&gt;As I've mentioned before, one of the main problems about packaging GitLab, is
the version mismatch between GitLab, Fedora and upstream gems. I have added some
more functions to my &lt;a href="https://github.com/axilleas/gsoc/blob/master/gemfile.py"&gt;script&lt;/a&gt; and now it saves the gems with their corresponding
version in a json format. There are three files: &lt;code&gt;gitlab.json&lt;/code&gt;, &lt;code&gt;fedora.json&lt;/code&gt; and 
 &lt;code&gt;upstream.json&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;I haven't added a flag to those methods yet, so one has to run it through the python
interpreter for now. Here's how:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install &lt;a href="https://fedorahosted.org/python-bugzilla/â€Ž"&gt;python-bugzilla&lt;/a&gt; and &lt;a href="http://pkgwat.readthedocs.org/en/latest/"&gt;pkgwat.api&lt;/a&gt; if not already.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone https://github.com/axilleas/gsoc.git &amp;amp;&amp;amp; cd gsoc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start your python interpreter (I prefer ipython)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import gemfile as g&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dicts = g.populate_dicts()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[gitlab, fedora, upstream] = dicts&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It will take a couple of minutes since it uses pkgwat.api to query the Fedora
database for the gems in Rawhide, and rubygems.org for the upstream versions.
&lt;code&gt;dicts&lt;/code&gt; is a tuple containing all three dictionaries. With the last command we
unpacked the dictionaries of the tuple. So now calling gitlab, you have the gitlab
dictionary and so on.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; All methods are called using the runtime gems of the current version of 
GitLab, which are 143 for now. According to those gems we then search the Fedora
package database and quering rubygems.org's API.&lt;/p&gt;
&lt;h2 id="version-table-in-wiki"&gt;Version table in wiki&lt;/h2&gt;
&lt;p&gt;There is now a &lt;a href="https://fedoraproject.org/wiki/User:Axilleas/GitLab#Packages"&gt;table&lt;/a&gt; in the wiki for an easy reference about the versions
of gems. Where you see &lt;code&gt;None&lt;/code&gt; it means it hasn't been packaged for Fedora yet.
This is now &lt;a href="https://github.com/axilleas/gsoc/blob/master/gemfile.py#L217"&gt;automatically&lt;/a&gt; accomplished by running the script. &lt;/p&gt;
&lt;p&gt;Further below is a list of the gems to be packaged. Those that are submitted to
Bugzilla are accompanied with a link to their review. I am working on automating
this process, it should be something similar to how the wiki table is generated.&lt;/p&gt;
&lt;p&gt;Also, I modified the output a little bit to be more readable. For example:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;------------------------------------------------------&lt;/span&gt;
&lt;span class="n"&gt;Gitlab&lt;/span&gt; &lt;span class="n"&gt;runtime&lt;/span&gt; &lt;span class="n"&gt;gems&lt;/span&gt;  &lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;143&lt;/span&gt;
&lt;span class="n"&gt;Gems&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Fedora&lt;/span&gt; &lt;span class="n"&gt;repos&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;380&lt;/span&gt;
&lt;span class="n"&gt;Common&lt;/span&gt; &lt;span class="n"&gt;gems&lt;/span&gt;          &lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;64&lt;/span&gt;
&lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;packaged&lt;/span&gt;       &lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;79&lt;/span&gt;
&lt;span class="n"&gt;Pending&lt;/span&gt; &lt;span class="n"&gt;review&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;BZ&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="n"&gt;When&lt;/span&gt; &lt;span class="n"&gt;BZ&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;repos&lt;/span&gt;  &lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;68&lt;/span&gt;

&lt;span class="n"&gt;Fedora&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="mf"&gt;20.79&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;ruby&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="mi"&gt;459&lt;/span&gt; &lt;span class="n"&gt;gems&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;------------------------------------------------------&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="init-repository"&gt;Init repository&lt;/h2&gt;
&lt;p&gt;I have created a repository at &lt;a href="http://repos.fedorapeople.org/repos/axilleas/gitlab/"&gt;fedorapeople.org&lt;/a&gt; to start populating it with packages
I build, but take a long time to get to Fedora repos. This should be a good chance
to test the packages they make it to Rawhide.&lt;/p&gt;
&lt;p&gt;Most gems come with a bundled test suite. Running tests during gem packaging
can sometimes be cumbersome but it is the only way to test that the gem really
works, at least according to the suite. To my experience, getting the tests run
requires a big amount of your time during package building, so in this test repo
expect to find many packages without their tests run. At least this is going to
be the case at the beginning.&lt;/p&gt;
&lt;h2 id="rubygem-packaging-article"&gt;Rubygem packaging article&lt;/h2&gt;
&lt;p&gt;Half done, nothing commited yet, I have everything local. This takes more time
than I expected, as I want it to be easily understandable by people that don't
have a clue, but also a good guide for more experienced users. I am rather picky
and I read what I write many times, so yeah, this is going to take longer to finish.&lt;/p&gt;
&lt;h2 id="todo-next-week"&gt;TODO next week&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Categorize gems according to their dependencies.&lt;/li&gt;
&lt;li&gt;Submit 5-10 more gems.&lt;/li&gt;
&lt;li&gt;Deploy GitLab on a Fedora server and test with some packaged gems. This is going to hit me hard I feel it :p&lt;/li&gt;
&lt;li&gt;Maybe write an unofficial guide of how to install GitLab in Fedora, haven't checked if there is a guide out in the internets.&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">axil</dc:creator><pubDate>Tue, 09 Jul 2013 00:00:00 +0300</pubDate><guid>tag:axilleas.github.io,2013-07-09:en/blog/2013/gsoc-weekly-update-3-and-4</guid><category>gsoc</category><category>fedora</category><category>gitlab</category></item><item><title>GSoC - Weekly update 2</title><link>http://axilleas.github.io/en/blog/2013/gsoc-weekly-update-2</link><description>&lt;p&gt;Unfortunately this week hasn't been very productive due to lack of time. I managed
to package 5-6 more gems, but I haven't submit them in Bugzilla yet. As always, the
most difficult and time consuming task is to make all the test suites provided
with each gem pass. And believe me this isn't always easy. So, here is what I did
this week.&lt;/p&gt;
&lt;h2 id="meeting-gitlab-devs"&gt;Meeting GitLab devs&lt;/h2&gt;
&lt;p&gt;We arranged a google hangout and we talked about the progress I make.
They were kind enough to ask whether I need help with something. 
Then I got to meet in person &lt;a href="https://github.com/dosire"&gt;Sytse Sijbrandij&lt;/a&gt; and &lt;a href="https://github.com/maxlazio"&gt;Marin Jankovski&lt;/a&gt; 
during &lt;a href="http://euruko2013.org/"&gt;Euruko 2013&lt;/a&gt;. Really cool guys.&lt;/p&gt;
&lt;p&gt;Our main concern was about the gems that are GitLab's forks and how we should
deal with them since it is very unlikely they get accepted into the official Fedora
repos. See next week TODOs about that matter.&lt;/p&gt;
&lt;h2 id="wikification-and-versioning-process"&gt;Wikification and versioning process&lt;/h2&gt;
&lt;p&gt;I started a wiki page on &lt;a href="https://fedoraproject.org/wiki/User:Axilleas/GitLab"&gt;GitLab&lt;/a&gt;, listing all the &lt;a href="https://github.com/axilleas/gsoc/blob/master/rubygems_missing"&gt;dependencies&lt;/a&gt; and their versions.
I said version&lt;strong&gt;s&lt;/strong&gt; because we have to deal with version mismatch, &lt;a href="https://fedoraproject.org/wiki/GSOC_2013/Student_Application_Axilleas/Gitlab%28463%29#Version_mismatch"&gt;remember&lt;/a&gt;?
I am working on a script to get them automatically on a table. So far, I can extract
GitLab's and upstream versions whereas I still need Fedora's. Here's how I do it.&lt;/p&gt;
&lt;h3 id="gitlab"&gt;GitLab&lt;/h3&gt;
&lt;p&gt;gem versions are retrieved from &lt;a href="https://github.com/axilleas/gsoc/blob/master/gemfile.py#L30"&gt;this&lt;/a&gt; dictionary. Pretty simple.&lt;/p&gt;
&lt;h3 id="upstream"&gt;Upstream&lt;/h3&gt;
&lt;p&gt;Using &lt;a href="https://github.com/axilleas/gsoc/blob/master/gemfile.py#L83"&gt;this&lt;/a&gt; method by qeuerying the API of rubygems.org and iterrating
through the missing gems, I can get in a list of the latest gem versions.&lt;/p&gt;
&lt;h3 id="fedora"&gt;Fedora&lt;/h3&gt;
&lt;p&gt;There is this nice tool in ruby called &lt;a href="https://rubygems.org/gems/pkgwat"&gt;pkgwat&lt;/a&gt; which queries Fedora's repo
database. This is also used by &lt;a href="https://github.com/zuhao/isitfedoraruby/blob/master/app/models/rpm_importer.rb#L46"&gt;isitfedoraruby&lt;/a&gt;, which unfortunately doesn't have
an API. This would make my work a lot easier.&lt;/p&gt;
&lt;p&gt;So, I decided to give this a shot by first &lt;a href="https://github.com/axilleas/fedora/blob/master/packages/rubygem-pkgwat/rubygem-pkgwat.spec"&gt;packaging&lt;/a&gt; it. This is what I am learning
here, isn't it? I thought this would be a matter of time since it only depends on
one unpackaged gem, &lt;a href="https://rubygems.org/gems/sanitize"&gt;sanitize&lt;/a&gt; (which ironically is needed by GitLab too).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(And I just whipped out a mosquito. Where the hell are they going 14.30 in the afternoon?...)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The process that I thought would take me 30 minutes top, still goes on.
You see, &lt;code&gt;pkgwat&lt;/code&gt; has a fixed dependency on &lt;code&gt;nokogiri 1.5.5&lt;/code&gt; whereas the latest
&lt;code&gt;sanitize 2.0.4&lt;/code&gt; requires &lt;code&gt;nokogiri&amp;gt;=1.6.0&lt;/code&gt;. On Fedora we have &lt;code&gt;nokogiri 1.5.9&lt;/code&gt;.
Let me draw that for you.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Dependency hell" src="http://axilleas.github.io/static/images/pkgwat.png" /&gt;&lt;/p&gt;
&lt;p&gt;Welcome to Gem dependency hell. The only way to install it is through
&lt;code&gt;gem install pkwat&lt;/code&gt;...&lt;/p&gt;
&lt;h2 id="package-review"&gt;Package review&lt;/h2&gt;
&lt;p&gt;My first informal review in order to be sponsored as a packager was 
&lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=927374"&gt;rubygem-rugged&lt;/a&gt;. I did all my homework and I tested the given
SPEC and SRPM with fedora-review, I built the rpm using both mock and rpmbuild 
and then ran rpmlint against the produced packages. I made a few notes of 
what I thought needed fixing and with some help from Vit&lt;sup id="fnref:cheat"&gt;&lt;a class="footnote-ref" href="#fn:cheat" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; I submited
my review.&lt;/p&gt;
&lt;h2 id="package-submission"&gt;Package submission&lt;/h2&gt;
&lt;p&gt;Last week I submited for review &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=969877"&gt;rubygem-timers&lt;/a&gt;, this week it
is &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=978284"&gt;rubygem-redis&lt;/a&gt;. One package a week you say? Dude are you
ever going to package all these gems? Well, submiting a package for review
in bugzilla takes some time, as I carefully check to follow the guidelines
as much as I can. The toughest part of it all are the testing suites.
A test may rely on other gems that are not in Fedora yet, so I try to package 
them as well. &lt;a href="https://github.com/axilleas/fedora/tree/master/packages"&gt;Here&lt;/a&gt; you will find some packages I am working on. 
Most of them are not submited for review yet.&lt;/p&gt;
&lt;h2 id="todos-for-next-week"&gt;TODOs for next week&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Get more packages finished&lt;/li&gt;
&lt;li&gt;Complete the version table in wiki&lt;/li&gt;
&lt;li&gt;Start porting gemfile.py into ruby (eventually)&lt;/li&gt;
&lt;li&gt;Continue writing the article about Rubygem packaging&lt;/li&gt;
&lt;li&gt;Talk to infra team to see how that forked-gem-packaging will go&lt;/li&gt;
&lt;li&gt;I am just a placeholder, nothing useful here, I just wanted to continue the stairs&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:cheat"&gt;
&lt;p&gt;I actually did seek for some help in &lt;a href="https://lists.fedoraproject.org/pipermail/ruby-sig/2013-July/001373.html"&gt;Ruby-SIG&lt;/a&gt; ML :p&amp;#160;&lt;a class="footnote-backref" href="#fnref:cheat" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">axil</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0300</pubDate><guid>tag:axilleas.github.io,2013-07-02:en/blog/2013/gsoc-weekly-update-2</guid><category>gsoc</category><category>fedora</category><category>gitlab</category></item><item><title>GSoC - Weekly update 1</title><link>http://axilleas.github.io/en/blog/2013/gsoc-weekly-update-1</link><description>&lt;p&gt;It's been over a week that GSoC started and here is a weekly report of what achieved
so far.&lt;/p&gt;
&lt;h2 id="weekly-process"&gt;Weekly process&lt;/h2&gt;
&lt;h3 id="workflow"&gt;Workflow&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://trello.com/board/gitlab/51b844202ed21a6735011b25"&gt;Trello board&lt;/a&gt; - This is a web app in which you can manage your workflow by adding
tasks that are to be completed. I set it up to remind me the things I have to accomplish
in due time. Cool thing is that there is an android app too, so I can manage it
from wherever I am :)&lt;/p&gt;
&lt;h3 id="first-package"&gt;First package&lt;/h3&gt;
&lt;p&gt;I submitted my first package to Bugzilla for review. Yay! It is called &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=969877"&gt;timers&lt;/a&gt;
and is of course a rubygem (what else :p). Not a big deal, just an easy one to get
me started.&lt;/p&gt;
&lt;h3 id="list-of-gems-to-package"&gt;List of gems to package&lt;/h3&gt;
&lt;p&gt;I re-calculated GitLab's gem dependencies, this time including only the ones
needed for runtime. I ditched from the list the ones that are used for testing/development.
Not that they are not useful, but for the time being runtime dependencies
are a priority. I used a really ugly hack but it works for now. Here is how:
Clone &lt;a href="https://github.com/gitlabhq/gitlabhq"&gt;GitLab&lt;/a&gt;, cd into it and run:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;bundle &lt;span class="nb"&gt;exec &lt;/span&gt;install --deployment --without &lt;span class="nb"&gt;test &lt;/span&gt;development
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will install all deps included in the Gemfile except for the ones in test and 
development groups. Then, using a for loop we can iterate under the &lt;code&gt;vendor/bundle/ruby/1.9.1/gems&lt;/code&gt;
directory and write the results in a file.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;for &lt;/span&gt;i in &lt;span class="sb"&gt;`&lt;/span&gt;ls vendor/bundle/ruby/1.9.1/gems&lt;span class="sb"&gt;`&lt;/span&gt;; &lt;span class="k"&gt;do &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &amp;gt;&amp;gt; ../gitlab53-gems; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The list contains gems in the format of &lt;code&gt;gem_name-1.0.0&lt;/code&gt; so I had to clean that
up a little. I used some string methods in the &lt;a href="https://github.com/axilleas/gsoc/blob/master/gemfile.py#L30"&gt;python script&lt;/a&gt; and stored those values
in a dictionary where key is the gem name and value its version. Then the names
list was easily retrievable. All I had to do is call the &lt;code&gt;keys()&lt;/code&gt; method on
the dictionary and store the result in a &lt;a href="https://github.com/axilleas/gsoc/blob/master/rubygems_gitlab"&gt;file&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then, I had somehow to include in the list of already packaged gems, the ones that 
are submitted in bugzilla for review. No need to work on them if their specfile
is already submitted for review, right? For that I used the &lt;a href="https://fedorahosted.org/python-bugzilla/"&gt;python-bugzilla&lt;/a&gt;
tool that queries a Bugzilla instance and spits nice &lt;a href="https://github.com/axilleas/gsoc/blob/master/rubygems_bugzilla_raw"&gt;formated results&lt;/a&gt;.
The query is pretty much self explanatory. In the end I just sorted them according
to their bug status.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;bugzilla query --product&lt;span class="o"&gt;=&lt;/span&gt;fedora --bug_status&lt;span class="o"&gt;=&lt;/span&gt;new,assigned --component&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Package Review&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
--short_desc&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rubygem-&amp;#39;&lt;/span&gt; | sort -k2 -r &amp;gt; &lt;span class="nv"&gt;$bugzilla_gems_raw&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Below, using the same query methods and some sed/awk magic&lt;sup id="fnref:json"&gt;&lt;a class="footnote-ref" href="#fn:json" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;, we end up with a file
containing only the names of gems that are submitted for review in Bugzilla.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;bugzilla query --product&lt;span class="o"&gt;=&lt;/span&gt;fedora --bug_status&lt;span class="o"&gt;=&lt;/span&gt;new,assigned --component&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Package Review&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
--short_desc&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rubygem-&amp;#39;&lt;/span&gt; | awk &lt;span class="s1"&gt;&amp;#39;BEGIN { FS = &amp;quot; - &amp;quot; }; { print $3 }&amp;#39;&lt;/span&gt; | awk &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;BEGIN { FS = &amp;quot;:&amp;quot; }; { print $2 }&amp;#39;&lt;/span&gt; | sed -e &lt;span class="s1"&gt;&amp;#39;s/rubygem-//&amp;#39;&lt;/span&gt; | sort -k1 &amp;gt; &lt;span class="nv"&gt;$bugzilla_gems&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That list, combined with the query from the official repos, results in the &lt;a href="https://github.com/axilleas/gsoc/blob/master/rubygems_fedora"&gt;final&lt;/a&gt;
one which has all the Ruby gems already packaged or are to be packaged for Fedora.&lt;/p&gt;
&lt;p&gt;I also wrote a method to store those values in a &lt;a href="https://github.com/axilleas/gsoc/blob/master/gemfile.py#L95"&gt;dictionary&lt;/a&gt; in the format
of &lt;code&gt;dict = { gem_name: [bug_id, status, assignee, description] }&lt;/code&gt;. It might come
in handy in the future, who knows!&lt;/p&gt;
&lt;p&gt;Next step was to find the missing gems that I will have to package for Fedora.
Comparing those two lists we end up with this &lt;a href="https://github.com/axilleas/gsoc/blob/master/rubygems_missing"&gt;list&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And the new results are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Gitlab uses &lt;strong&gt;143&lt;/strong&gt; runtime gems.&lt;/p&gt;
&lt;p&gt;Fedora has packaged &lt;strong&gt;461&lt;/strong&gt; gems.&lt;/p&gt;
&lt;p&gt;There are &lt;strong&gt;73&lt;/strong&gt; common gems.&lt;/p&gt;
&lt;p&gt;There should be packaged &lt;strong&gt;70&lt;/strong&gt; gems.&lt;/p&gt;
&lt;p&gt;Fedora will have &lt;strong&gt;15.18 %&lt;/strong&gt; more ruby packages, that is &lt;strong&gt;531&lt;/strong&gt; gems in total.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="gem-tree-dependencies"&gt;Gem tree dependencies&lt;/h3&gt;
&lt;p&gt;There are a lot of gems that depend on each other which means one has to
be picky as to what to package first. The best way would be: given a package,
find its dependency tree and start packaging first the leafs that have no children
going all the way up until you reach to the root.&lt;/p&gt;
&lt;p&gt;I started writing a &lt;a href="https://github.com/axilleas/fedora/tree/master/gitlab-deps/gemtree"&gt;script&lt;/a&gt; in ruby as a way to better learn the language,
but I have yet to iplement the DFS algorithm which will traverse through all
dependencies. Any comments on how to best approach this are welcomed!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Update!!&lt;/em&gt;&lt;/strong&gt; I just found out this reaaally cool site: &lt;a href="https://gemlou.pe"&gt;https://gemlou.pe&lt;/a&gt;
which parses rubygems.org and lists the runtime tree dependencies of a gem through 
javascript!&lt;/p&gt;
&lt;h3 id="article-about-gem-packaging"&gt;Article about gem packaging&lt;/h3&gt;
&lt;p&gt;I started writing an article about packaging a Ruby gem in Fedora. I want to
note down the whole process, beginning from the use of gem2rpm to the review process.
At first I wanted to have it finished by this week, but the information is so vast
that I will take my time and write it piece by piece. You can follow the process &lt;a href="https://github.com/axilleas/axilleas.github.io/blob/source/src/posts/en/2013-06-12-fedora-rubygem-packaging.md"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="todo"&gt;TODO&lt;/h2&gt;
&lt;p&gt;Some TODOs for this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Continue writing the article about Rubygem packaging&lt;/li&gt;
&lt;li&gt;Make some unofficial package reviews in order to get &lt;a href="https://fedoraproject.org/wiki/Join_the_package_collection_maintainers#Get_Sponsored"&gt;sponsored&lt;/a&gt; as a packager&lt;/li&gt;
&lt;li&gt;Make more package submissions (I have some specfiles ready)&lt;/li&gt;
&lt;li&gt;Start wikifying the process (like the &lt;a href="https://fedoraproject.org/wiki/User:Ktdreyer/Gitorious"&gt;Gitorious&lt;/a&gt; page)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="extras"&gt;Extras&lt;/h2&gt;
&lt;p&gt;Apart from the GSoC program that is an awesome experience, there are some other
cool stuff going on this summer. &lt;/p&gt;
&lt;p&gt;First one is &lt;a href="http://euruko2013.org/"&gt;Euruko&lt;/a&gt; which will take place in
Athens, so it will be easy to attend. I have already purchased a ticket. I am sure
that it's gonna be awesome and I'll get to meet the GitLab devs as well :)&lt;/p&gt;
&lt;p&gt;The other one is a MOOC by UC Berkley and is a course about agile development and SaaS.
It has two parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.edx.org/course/uc-berkeley/cs-169-1x/software-service/993"&gt;CS169.1x&lt;/a&gt; starts on July 2nd and is lasting 5 weeks&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.edx.org/course/uc-berkeley/cs-169-2x/software-service/1005"&gt;CS169.2x&lt;/a&gt; starts on August 13th and is lasting 6 weeks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The language they use is Ruby and the framework on which they build the apps is
Rails. I am going to attend both courses as it is strictly related to GitLab and
my GSoC involvement. Actually, I already bought the accompanying &lt;a href="http://www.saasbook.info/"&gt;book&lt;/a&gt; (not mandatory)
and started reading it :)&lt;/p&gt;
&lt;p&gt;I will try to be more on schedule next time and post about my progress at the end
of each week.&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:json"&gt;
&lt;p&gt;It would make matters easier if the query returned a json file. I haven't
seen anything in the man page about json support.&amp;#160;&lt;a class="footnote-backref" href="#fnref:json" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">axil</dc:creator><pubDate>Tue, 25 Jun 2013 00:00:00 +0300</pubDate><guid>tag:axilleas.github.io,2013-06-25:en/blog/2013/gsoc-weekly-update-1</guid><category>gsoc</category><category>fedora</category><category>gitlab</category></item><item><title>Accepted for GSoC 2013</title><link>http://axilleas.github.io/en/blog/2013/accepted-for-gsoc-2013</link><description>&lt;p&gt;&lt;img alt="gsoc-logo" src="https://1-ps.googleusercontent.com/sx/s.google-melange.appspot.com/www.google-melange.com/soc/content/2-1-20130521/images/gsoc/logo/924x156xbanner-gsoc2013.png.pagespeed.ic.Z9V_lgyiqp.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Sooo, I am happy to announce that I got accepted to this year's Google Summer of Code!
Couldn't be more happy right now :)&lt;/p&gt;
&lt;p&gt;For those that have no idea, here is my &lt;a href="https://fedoraproject.org/wiki/GSOC_2013/Student_Application_Axilleas/Gitlab%28463%29"&gt;proposal&lt;/a&gt; on Fedora's wiki (&lt;a href="https://fedoraproject.org/wiki/User:Axilleas"&gt;my user&lt;/a&gt;). 
I have in mind to make a follow post on how I dealt with all this the past three months.&lt;/p&gt;
&lt;p&gt;Special thanks to &lt;a href="https://github.com/johngian"&gt;John Giannelos&lt;/a&gt; for pressuring me to apply :p&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">axil</dc:creator><pubDate>Mon, 27 May 2013 00:00:00 +0300</pubDate><guid>tag:axilleas.github.io,2013-05-27:en/blog/2013/accepted-for-gsoc-2013</guid><category>gsoc</category><category>fedora</category><category>gitlab</category><category>superexcited</category></item><item><title>Bringing GitLab to Fedora</title><link>http://axilleas.github.io/en/blog/2013/bringing-gitlab-in-fedora</link><description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Update&lt;/em&gt;&lt;/strong&gt;: I just got a confirmation mail that my proposal got accepted! &lt;a href="http://axilleas.github.io/en/blog/2013/accepted-for-gsoc-2013"&gt;Read here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, I decided to write some info regarding my involvement for this year's
&lt;a href="http://www.google-melange.com/gsoc/homepage/google/gsoc2013" title="Google Summer of Code 2013"&gt;Google Summer of Code&lt;/a&gt;. I have been using/testing GitLab since
version 2.0 (almost a year now) and I am thrilled to see how much it has
growed since. This year I got a little more involved into this and
I made &lt;a href="https://github.com/gitlabhq/gitlabhq/commits/master/doc/install/installation.md?author=axilleas"&gt;two&lt;/a&gt; &lt;a href="https://github.com/gitlabhq/gitlabhq/commits/master/lib/tasks/gitlab/check.rake?author=axilleas"&gt;commits&lt;/a&gt; upstream. Nothing fancy, but I hope to
contribute more as time passes by.&lt;/p&gt;
&lt;p&gt;In the rest of this article I will try to explain what GitLab is,
how Fedora is involved into all this and what are the benefits of this involvement.
This is the first of many follow-up posts I intend to write, so keep tight!&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-gitlab"&gt;What is GitLab?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fedoras-involvement-so-far"&gt;Fedora's involvement so far&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-are-the-benefits"&gt;What are the benefits&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#get-more-ruby-packages-in-the-repos"&gt;Get more ruby packages in the repos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-new-service-for-fedorahostedorg"&gt;A new service for fedorahosted.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#next-steps-and-things-to-overcome"&gt;Next steps and things to overcome&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="what-is-gitlab"&gt;What is GitLab?&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://blog.gitlab.com" title="GitLab home page"&gt;GitLab&lt;/a&gt; is an &lt;a href="https://github.com/gitlabhq/gitlabhq" title="GitLab on Github :p"&gt;open source&lt;/a&gt; MIT licenced &lt;a href="http://git-scm.com" title="git home page"&gt;git&lt;/a&gt; repository
management application. It is built on &lt;a href="http://rubyonrails.org/" title="Ruby on Rails"&gt;Ruby on Rails&lt;/a&gt; and is
one of the most &lt;a href="https://github.com/popular/starred" title="GitLab featured in Github's most popular repos"&gt;popular&lt;/a&gt; projects featured on Github.
It is used by many companies as their internal git management repository.
The reason it gained so much popularity is that it bares a strong resemblance
to github's &lt;a href="http://gitlab.org/screenshots/" title="GitLab screenshots"&gt;looks&lt;/a&gt; and &lt;a href="http://blog.gitlab.com/features/" title="GitLab features"&gt;feels&lt;/a&gt;.
It is a project with great potential, under heavy development with a release
cycle every month. That makes it possible to apply bug fixes quite regularly
and test new features. And since a picture is worth a thousand words, here is
a &lt;a href="http://demo.gitlab.com/users/sign_in" title="GitLab demo site"&gt;demo site&lt;/a&gt; where you can test all the latest features.&lt;/p&gt;
&lt;h1 id="fedoras-involvement-so-far"&gt;Fedora's involvement so far&lt;/h1&gt;
&lt;p&gt;The thought of GitLab being packaged and deployed for &lt;a href="http://fedorahosted.org"&gt;Fedora Hosted&lt;/a&gt; isn't new.
It all started last March when &lt;a href="https://fedoraproject.org/wiki/User:Mojavelinux"&gt;Dan Allen&lt;/a&gt; &lt;a href="https://lists.fedoraproject.org/pipermail/infrastructure/2012-March/011463.html"&gt;proposed&lt;/a&gt; GitLab 
to be used as a service for Fedora Hosted. If you follow the conversation 
it summarizes to some key points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Projects pages should be ideally hosted as &lt;code&gt;$projectname.fedorahosted.org&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;GitLab and its dependencies should be packaged for Fedora and EPEL 6.&lt;/li&gt;
&lt;li&gt;Puppetize the whole thing up. &lt;a href="https://forge.puppetlabs.com/sbadia/gitlab"&gt;There&lt;/a&gt; are &lt;a href="https://forge.puppetlabs.com/lboynton/gitlab"&gt;some&lt;/a&gt; configs, but they'll sure need some adjustment.&lt;/li&gt;
&lt;li&gt;We need to form a team of maintainers for longterm support even after GSoC is over.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There was even a &lt;a href="https://groups.google.com/forum/?fromgroups=#!topic/gitlabhq/SQMDi-yyXmU"&gt;post&lt;/a&gt; in GitLab's list, also by Dan Allen,
bringing the project to the attention of the GitLab community.
The most interesting thing was that the &lt;a href="https://github.com/randx"&gt;lead developer&lt;/a&gt; of GitLab 
was more than willing to help. In the end, there was an &lt;a href="https://fedoraproject.org/wiki/GSOC_2012/Student_Application_babakb/GitlabSetup" title="Student application for GitLab at GSoC 2012"&gt;application&lt;/a&gt; but 
unfortunately that was the last anyone heard about the project.&lt;/p&gt;
&lt;p&gt;So, here we are a year after with me applying for the project. To be exact
there is &lt;a href="https://lists.fedoraproject.org/pipermail/summer-coding/2013-March/000286.html"&gt;another&lt;/a&gt; sudent interested in this as well, so that makes it two of us.
I have already expressed my interest in &lt;a href="https://lists.fedoraproject.org/pipermail/ruby-sig/2013-March/001270.html"&gt;RubySIG&lt;/a&gt; and in the &lt;a href="https://lists.fedoraproject.org/pipermail/infrastructure/2013-March/012631.html"&gt;infrastructure&lt;/a&gt; mailing list.
I was glad to see that there was a positive response from Dan Allen,
as well as some valuable advice from user &lt;a href="https://fedoraproject.org/wiki/User:Ktdreyer"&gt;Ken Dreyer&lt;/a&gt; who currently 
tries to deal with &lt;a href="https://fedoraproject.org/wiki/User:Ktdreyer/Gitorious"&gt;Gitorious&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="what-are-the-benefits"&gt;What are the benefits&lt;/h1&gt;
&lt;p&gt;There are two major benefits for Fedora.&lt;/p&gt;
&lt;h2 id="get-more-ruby-packages-in-the-repos"&gt;Get more ruby packages in the repos&lt;/h2&gt;
&lt;p&gt;Prior to addressing my interest in the mailing lists, I approached &lt;a href="https://fedoraproject.org/wiki/User:Vondruch"&gt;VÃ­t Ondruch&lt;/a&gt; to get some feedback about this task.
He was very helpful and pointed me to what should be done as a first step.
That is&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;identify which gems are missing in Fedora and package them,&lt;/li&gt;
&lt;li&gt;compile a list of gems GitLab is using, including all their dependencies (and possibly bundled dependencies).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For the first task, I used a hackish bash script which first accumulates 
all rubygems in a file and then removes the duplicate packages and the ones
that are documentation.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;file_raw&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/axil/tools/fedora-gitlab/rubygems_fedora_raw&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;file_new&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/axil/tools/fedora-gitlab/rubygems_fedora&amp;#39;&lt;/span&gt;

yum search all rubygem | awk &lt;span class="s1"&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt; &amp;gt; &lt;span class="nv"&gt;$file_raw&lt;/span&gt;

sed -e &lt;span class="s1"&gt;&amp;#39;s/rubygem-//g&amp;#39;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;s/.noarch//g&amp;#39;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;s/.x86_64//g&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
-e &lt;span class="s1"&gt;&amp;#39;/i686/d&amp;#39;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;/==/d&amp;#39;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;/:/d&amp;#39;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;/-doc/d&amp;#39;&lt;/span&gt; &amp;lt; &lt;span class="nv"&gt;$file_raw&lt;/span&gt; &amp;gt; &lt;span class="nv"&gt;$file_new&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In order to find what gems GitLab depends on, I used the &lt;a href="https://github.com/gitlabhq/gitlabhq/blob/master/Gemfile.lock"&gt;Gemfile.lock&lt;/a&gt; 
and wrote a simple python &lt;a href="https://github.com/axilleas/gsoc/blob/master/gemfile.py"&gt;script&lt;/a&gt;&lt;sup id="fnref:python-script"&gt;&lt;a class="footnote-ref" href="#fn:python-script" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; that computes how many and which gems 
Fedora and GitLab have in common. Below are some draft&lt;sup id="fnref:draft_numbers"&gt;&lt;a class="footnote-ref" href="#fn:draft_numbers" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; numbers and a bar chart.&lt;/p&gt;
&lt;div id="rubygems_chart"&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Gitlab uses: &lt;strong&gt;203&lt;/strong&gt; gems.&lt;/p&gt;
&lt;p&gt;Fedora has packaged: &lt;strong&gt;385&lt;/strong&gt; gems.&lt;/p&gt;
&lt;p&gt;There are &lt;strong&gt;97&lt;/strong&gt; common gems.&lt;/p&gt;
&lt;p&gt;There should be packaged: &lt;strong&gt;106&lt;/strong&gt; gems.&lt;/p&gt;
&lt;p&gt;Fedora will have &lt;strong&gt;27.53 %&lt;/strong&gt; more ruby packages, that is &lt;strong&gt;482&lt;/strong&gt; gems in total.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Not bad, &lt;strong&gt;106&lt;/strong&gt; more ruby packages! That is a plus now that Fedora is considered 
one of &lt;a href="https://bugs.ruby-lang.org/projects/ruby-trunk/wiki/20SupportedPlatforms"&gt;Ruby's supported platforms&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; I just found out about the &lt;a href="http://isitfedoraruby.com/stats/gemfile_tool"&gt;gemfile tool&lt;/a&gt; that isitfedoraruby.com&lt;sup id="fnref:isitfedruby"&gt;&lt;a class="footnote-ref" href="#fn:isitfedruby" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;
is using. This will come in handy. &lt;/p&gt;
&lt;h2 id="a-new-service-for-fedorahostedorg"&gt;A new service for fedorahosted.org&lt;/h2&gt;
&lt;p&gt;After the packaging is done, the next big thing is the deployment process on 
&lt;a href="http://fedorahosted.org"&gt;Fedora Hosted&lt;/a&gt; as a new service. Quoting Dan Allen's &lt;a href="https://lists.fedoraproject.org/pipermail/infrastructure/2013-March/012680.html"&gt;thought&lt;/a&gt;: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One of the key reasons I've been pushing for GitLab is because I see the
potential it has for drastically improving the discoverability of the
Fedora code base and encourage participation. I've been involved with a lot
of projects on GitHub and I'm amazed by how simple it is to submit changes
(to both code and documentation). In fact, it's often easier to send a
patch with a description of the change than to create an issue...flipping
the normal bug submitting process on its head.&lt;/p&gt;
&lt;p&gt;GitHub also works because it enables collaboration over coordination. You
don't have to ask for permission on GitHub. You just do it. Then you can
easily track when they get pulled in or changes are requested. (the same is
true of GitLab).&lt;/p&gt;
&lt;p&gt;With GitLab, we can bring that experience to the Fedora community. It's a
large enough community (esp in terms of repositories), that I'm positive
we'd see that collaboration kindle within the Fedora instance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So yeah, this is a big deal from this point of view :)&lt;/p&gt;
&lt;h1 id="next-steps-and-things-to-overcome"&gt;Next steps and things to overcome&lt;/h1&gt;
&lt;p&gt;There is certainly a lot more to do. For starters, as a Fedora newbie, 
I have to run through the &lt;a href="https://fedoraproject.org/wiki/Packaging:Ruby"&gt;Ruby guidelines&lt;/a&gt; and learn 
about the philosophy of rpm. Luckily, I am not a linux newbie (I've been 
using Archlinux for 5 years) and I am adopting rapidly.
Then, I need to learn some Ruby. I have already printed &lt;em&gt;&lt;a href="http://mislav.uniqpath.com/poignant-guide"&gt;why's (poignant) Guide to Ruby&lt;/a&gt;&lt;/em&gt;
which is considered a must read, and believe me it is! (download the pdf from &lt;a href="https://github.com/downloads/mislav/poignant-guide/whys-poignant-guide-to-ruby.pdf"&gt;here&lt;/a&gt;). 
&lt;a href="http://ruby.learncodethehardway.org/book/"&gt;Learn Ruby the hard way&lt;/a&gt; is also a good starting point. Î™ think I'm on the right track.&lt;/p&gt;
&lt;p&gt;Now, as far as the packaging process is concerned, here is what more needs to be done:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MariaDB support. Since MariaDB will be the &lt;a href="https://lists.fedoraproject.org/pipermail/devel/2013-January/176584.html" title="Proposed F19 Feature: Replace MySQL with MariaDB"&gt;default&lt;/a&gt; &lt;a href="https://fedoraproject.org/wiki/Features/ReplaceMySQLwithMariaDB" title="Features/ReplaceMySQLwithMariaDB"&gt;implementation&lt;/a&gt; of MySQL in Fedora 19, GitLab will need to support it.&lt;/li&gt;
&lt;li&gt;Write systemd service files. I had made an &lt;a href="https://github.com/axilleas/gitlab-recipes/tree/master/systemd"&gt;attempt&lt;/a&gt; two months ago when I was trying to set up GitLab on Archlinux, but it is far from perfect.&lt;/li&gt;
&lt;li&gt;Packages to be EPEL compatible. A great advantage if GitLab gets packaged for Fedora, is that it would make it as easy as pie to install on a server running Red Hat, Centos, or some other rpm based distro.&lt;/li&gt;
&lt;li&gt;Ruby 2.0 compatibility. I don't think that'll be much of a stopper since GitLab is in the &lt;a href="https://github.com/gitlabhq/gitlabhq/commit/52cd655f71c6a5393b71640c13cd95e35e8d2624"&gt;process&lt;/a&gt; of supporting it, but I put it here just in case.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's all for now. If you read through here you should have a good understanding
of this project's goal. More posts to come!&lt;/p&gt;
&lt;!--Load the AJAX API--&gt;

&lt;script type="text/javascript" src="https://www.google.com/jsapi"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;

  // Load the Visualization API and the piechart package.
  google.load('visualization', '1.0', {'packages':['corechart']});

  // Set a callback to run when the Google Visualization API is loaded.
  google.setOnLoadCallback(drawChart);

  // Callback that creates and populates a data table,  
  // instantiates the pie chart, passes in the data and
  // draws it.
  function drawChart() {

  // Create the data table.
  var data = new google.visualization.DataTable();
  data.addColumn('string', '');
  data.addColumn('number', 'rubygems');
  data.addRows([
    ['GitLab', 203],
    ['Fedora', 385],
    ['Common', 97],
    ['To be packaged', 106],
    ['Total after packaging', 482]
    ]);

  // Set chart options
  var options = {'title':'Numbers calculated on 08-04-2013', 'width':600, 'height':500};

  // Instantiate and draw our chart, passing in some options.
  var chart = new google.visualization.BarChart(document.getElementById('rubygems_chart'));
  chart.draw(data, options);
  }
&lt;/script&gt;

&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:python-script"&gt;
&lt;p&gt;I should write it in ruby, I know :p&amp;#160;&lt;a class="footnote-backref" href="#fnref:python-script" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:draft_numbers"&gt;
&lt;p&gt;I say draft, mainly because that is a raw calculation of GitLab's dependencies. One has to take into account the different/old versions that may exist between Fedora and GtiLab. There are also some packages GitLab pulls from git and not rubygems.org. &amp;#160;&lt;a class="footnote-backref" href="#fnref:draft_numbers" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:isitfedruby"&gt;
&lt;p&gt;&lt;a href="http://isitfedoraruby.com"&gt;isitfedoraruby.com&lt;/a&gt; is a cool web app that was the result of &lt;a href="https://fedoraproject.org/wiki/GSOC_2012/Student_Application_Zuhao/IsItFedoraRuby"&gt;last year's GSoC&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:isitfedruby" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">axil</dc:creator><pubDate>Sun, 07 Apr 2013 00:00:00 +0300</pubDate><guid>tag:axilleas.github.io,2013-04-07:en/blog/2013/bringing-gitlab-in-fedora</guid><category>fedora</category><category>gitlab</category><category>gscoc</category><category>ruby</category><category>rails</category></item></channel></rss>